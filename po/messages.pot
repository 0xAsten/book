
msgid ""
msgstr ""
"Project-Id-Version: Dojo: The Provable Game Engine\n"
"POT-Creation-Date: 2023-12-01T09:27:46+01:00\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: en\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: src/SUMMARY.md:1
msgid "Summary"
msgstr ""

#: src/SUMMARY.md:3
msgid "Foreword"
msgstr ""

#: src/SUMMARY.md:4 src/theory/what-is-dojo.md:1
msgid "What is Dojo?"
msgstr ""

#: src/SUMMARY.md:5
msgid "AW Theory"
msgstr ""

#: src/SUMMARY.md:6
msgid "Cairo Ecosystem"
msgstr ""

#: src/SUMMARY.md:7 src/theory/faqs.md:1
msgid "FAQs"
msgstr ""

#: src/SUMMARY.md:9 src/misc/contributors.md:12
msgid "Getting Started"
msgstr ""

#: src/SUMMARY.md:11 src/getting-started/quick-start.md:1
msgid "Quick Start"
msgstr ""

#: src/SUMMARY.md:12
msgid "Manual Install"
msgstr ""

#: src/SUMMARY.md:13 src/getting-started/setup.md:1
msgid "Development Setup"
msgstr ""

#: src/SUMMARY.md:14
msgid "Contributing"
msgstr ""

#: src/SUMMARY.md:16
msgid "Community"
msgstr ""

#: src/SUMMARY.md:18 src/community/get-started.md:1
msgid "Get Started"
msgstr ""

#: src/SUMMARY.md:20
msgid "Architecture"
msgstr ""

#: src/SUMMARY.md:22 src/SUMMARY.md:46 src/client/overview.md:1
msgid "Overview"
msgstr ""

#: src/SUMMARY.md:23
msgid "World"
msgstr ""

#: src/SUMMARY.md:24 src/cairo/systems.md:1
msgid "Systems"
msgstr ""

#: src/SUMMARY.md:25 src/cairo/models.md:1
msgid "Models"
msgstr ""

#: src/SUMMARY.md:26 src/cairo/commands.md:1 src/toolchain/slot/reference.md:13
#: src/toolchain/slot/deployments-commands/deployments.md:5
msgid "Commands"
msgstr ""

#: src/SUMMARY.md:27 src/cairo/config.md:1
msgid "Config"
msgstr ""

#: src/SUMMARY.md:28 src/cairo/events.md:1 src/cairo/migration/0.3.0.md:154
msgid "Events"
msgstr ""

#: src/SUMMARY.md:29 src/cairo/authorization.md:1
msgid "Authorization"
msgstr ""

#: src/SUMMARY.md:30 src/cairo/metadata.md:1
msgid "Metadata"
msgstr ""

#: src/SUMMARY.md:31 src/cairo/migration.md:1
msgid "Migration"
msgstr ""

#: src/SUMMARY.md:32
msgid "0.2.0 -> 0.3.0"
msgstr ""

#: src/SUMMARY.md:33
msgid "ECS in 15 minutes"
msgstr ""

#: src/SUMMARY.md:35 src/cairo/entities.md:1
msgid "Entities"
msgstr ""

#: src/SUMMARY.md:36 src/cairo/testing.md:1
msgid "Testing"
msgstr ""

#: src/SUMMARY.md:38
msgid "Modules"
msgstr ""

#: src/SUMMARY.md:39 src/cairo/modules/erc20.md:1
msgid "ERC20"
msgstr ""

#: src/SUMMARY.md:40
msgid "ERC721"
msgstr ""

#: src/SUMMARY.md:41
msgid "ERC1155"
msgstr ""

#: src/SUMMARY.md:42
msgid "DeFi"
msgstr ""

#: src/SUMMARY.md:44
msgid "Client SDKs"
msgstr ""

#: src/SUMMARY.md:47
msgid "JS"
msgstr ""

#: src/SUMMARY.md:48 src/client/npm/core.md:1
msgid "Core"
msgstr ""

#: src/SUMMARY.md:49
msgid "torii"
msgstr ""

#: src/SUMMARY.md:51
msgid "Toolchain"
msgstr ""

#: src/SUMMARY.md:53
msgid "Dojoup"
msgstr ""

#: src/SUMMARY.md:54 src/toolchain/sozo/overview.md:1
msgid "Sozo"
msgstr ""

#: src/SUMMARY.md:55 src/SUMMARY.md:69 src/SUMMARY.md:71 src/SUMMARY.md:74
msgid "Reference"
msgstr ""

#: src/SUMMARY.md:56
msgid "profile"
msgstr ""

#: src/SUMMARY.md:57 src/toolchain/sozo/common-options/offline.md:1
msgid "offline"
msgstr ""

#: src/SUMMARY.md:58
msgid "init"
msgstr ""

#: src/SUMMARY.md:59
msgid "build"
msgstr ""

#: src/SUMMARY.md:60
msgid "test"
msgstr ""

#: src/SUMMARY.md:61
msgid "migrate"
msgstr ""

#: src/SUMMARY.md:62
msgid "execute"
msgstr ""

#: src/SUMMARY.md:63
msgid "register"
msgstr ""

#: src/SUMMARY.md:64
msgid "system"
msgstr ""

#: src/SUMMARY.md:65
msgid "component"
msgstr ""

#: src/SUMMARY.md:66
msgid "events"
msgstr ""

#: src/SUMMARY.md:67
msgid "auth"
msgstr ""

#: src/SUMMARY.md:68 src/toolchain/katana/overview.md:1
msgid "Katana"
msgstr ""

#: src/SUMMARY.md:70 src/tutorial/deploy-using-slot/main.md:77
msgid "Torii"
msgstr ""

#: src/SUMMARY.md:72
msgid "Graphql"
msgstr ""

#: src/SUMMARY.md:73 src/toolchain/slot/overview.md:1
msgid "Slot"
msgstr ""

#: src/SUMMARY.md:75
msgid "Deployments"
msgstr ""

#: src/SUMMARY.md:77
msgid "Deploying"
msgstr ""

#: src/SUMMARY.md:79
msgid "Locally"
msgstr ""

#: src/SUMMARY.md:80
msgid "Remote"
msgstr ""

#: src/SUMMARY.md:82
msgid "Tutorial"
msgstr ""

#: src/SUMMARY.md:84
msgid "Onchain Chess"
msgstr ""

#: src/SUMMARY.md:85 src/tutorial/onchain-chess/0-setup.md:1
msgid "0. Setup"
msgstr ""

#: src/SUMMARY.md:86
msgid "1. Initiate"
msgstr ""

#: src/SUMMARY.md:87
msgid "2. Move"
msgstr ""

#: src/SUMMARY.md:88
msgid "3. Check Legal Move"
msgstr ""

#: src/SUMMARY.md:89
msgid "4. Test Chess"
msgstr ""

#: src/SUMMARY.md:90 src/toolchain/slot/overview.md:15
msgid "Deploy using Slot"
msgstr ""

#: src/SUMMARY.md:94
msgid "Contributors"
msgstr ""

#: src/index.md:1
msgid "![Dojo](images/dojo-mark-full-dark.svg)"
msgstr ""

#: src/index.md:3
msgid ""
"Dojo is an open-source project, currently in its early development phase, "
"and warmly welcomes contributors. For additional resources, join the "
"community on [Discord](https://discord.gg/vUN4Xq9Qv6) and check out the "
"[contribution guide](./misc/contributors.md)."
msgstr ""

#: src/index.md:7
msgid "Dojo: The Provable Game Engine"
msgstr ""

#: src/index.md:9
msgid ""
"Dojo is a provable game engine built using "
"[Cairo](https://github.com/starkware-libs/cairo). It establishes a standard "
"for game development via smart contracts, blending best practices with "
"streamlined development and deployment tools. With Dojo by your side, you "
"can evolve from initial concept to a fully realized game in days, not weeks."
msgstr ""

#: src/index.md:11
msgid ""
"This book is dedicated to familiarizing you with the Dojo engine and the "
"potential of Provable games. A special section on the "
"[Theory](./theory/autonomous-worlds.md) elucidates this emergent concept of "
"autonomous worlds and Provable games."
msgstr ""

#: src/index.md:13
msgid "[Quickstart](./getting-started/quick-start.md)"
msgstr ""

#: src/index.md:14
msgid "[What is Dojo? ](./theory/what-is-dojo.md)"
msgstr ""

#: src/index.md:15
msgid "[Explore the Architecture](./cairo/overview.md)"
msgstr ""

#: src/index.md:18
msgid "Explainer"
msgstr ""

#: src/index.md:20
msgid ""
"Here's a video of [Cartridge](https://cartridge.gg/)'s "
"[Tarrence](https://twitter.com/tarrenceva) explaining how Dojo works at the "
"2023 [Autonomous Anonymous "
"Summit](https://twitter.com/pet3rpan_/status/1666764726427353091):"
msgstr ""

#: src/index.md:30
msgid "Organizational Structure"
msgstr ""

#: src/index.md:31
msgid ""
"Dojo is an open-source initiative, licensed under Apache 2.0, dedicated to "
"promoting and advancing the concept of Autonomous Worlds (AWs). It is "
"spearheaded by [Cartridge](https://cartridge.gg/), [Realms & "
"BibliothecaDAO](https://bibliothecadao.xyz/), "
"[briq](https://briq.construction/) and many more "
"[contributors](https://github.com/orgs/dojoengine/people)."
msgstr ""

#: src/index.md:33
msgid "How do I get involved?"
msgstr ""

#: src/index.md:35
msgid ""
"Check out our [Github](https://github.com/dojoengine), our "
"[Twitter](https://twitter.com/dojostarknet), "
"[Discord](https://discord.gg/vUN4Xq9Qv6) and [contribution "
"guide](https://book.dojoengine.org/misc/contributors.html)"
msgstr ""

#: src/theory/what-is-dojo.md:3
msgid ""
"Dojo is the culmination of lessons learned from attempts at building "
"[onchain games](https://naavik.co/digest/primer-fully-on-chain-gaming), an "
"emerging sector in the gaming industry. Any developer who has endeavored to "
"build an on-chain game recognizes the inherent engineering hurdles - a "
"realization that drove us to create Dojo. Just as you wouldn't recreate "
"Unity every time you develop a new game, the same principle applies here. "
"Dojo is designed to handle the complex infrastructure, allowing developers "
"to focus on the unique aspects of their games."
msgstr ""

#: src/theory/what-is-dojo.md:5
msgid ""
"Dojo aspires to be the go-to tool for building provable games. It is "
"radically open-source, and all contributions are welcome."
msgstr ""

#: src/theory/what-is-dojo.md:9
msgid "Stop building infrastructure; start building games"
msgstr ""

#: src/theory/what-is-dojo.md:11
msgid ""
"Dojo's suite of tools takes the infrastructure complexity out of building "
"on-chain games. It includes:"
msgstr ""

#: src/theory/what-is-dojo.md:13
msgid "Entity Component System (ECS)"
msgstr ""

#: src/theory/what-is-dojo.md:15
msgid ""
"Dojo offers a standardized approach to building games on smart contracts. "
"Recognizing the intricacies of game design, Dojo simplifies the development "
"process, allowing creators to focus on gameplay logic. This standardization "
"paves the way for an interconnected network of worlds, streamlining "
"developer expertise and promoting game integration."
msgstr ""

#: src/theory/what-is-dojo.md:17
msgid ""
"Utilizing the ECS (Entity Component System) as its core architecture, Dojo "
"effectively manages the state and behavior of Autonomous Worlds (AWs). This "
"model revolves around systems acting on entities, which are collections of "
"pure data components. Systems efficiently determine which entities to "
"process based on persistent queries over these components."
msgstr ""

#: src/theory/what-is-dojo.md:19
msgid "Read detailed information about the [Dojo ECS](../cairo/overview.md)."
msgstr ""

#: src/theory/what-is-dojo.md:21
msgid "[Torii](/crates/torii/README.md) - Starknet Indexer"
msgstr ""

#: src/theory/what-is-dojo.md:23
msgid ""
"Building on-chain games often involves grappling with the challenge of "
"indexing on-chain state. However, Dojo standardizes contract states to "
"mirror traditional relational databases. This setup enables the [Torii "
"Indexer](../toolchain/torii/overview.md) to auto-index all contract states, "
"ensuring efficient and streamlined queries. Torii then exposes these states "
"via a GraphQL API or gRPC, allowing developers to easily query and retrieve "
"data."
msgstr ""

#: src/theory/what-is-dojo.md:25
msgid ""
"Using Torii drastically reduces the time and effort required to build "
"on-chain games. It also eliminates the need to manually create indexers, "
"which can be a tedious and error-prone process."
msgstr ""

#: src/theory/what-is-dojo.md:27
msgid "[Katana](/crates/katana/README.md) - Blazingly fast development network"
msgstr ""

#: src/theory/what-is-dojo.md:29
msgid ""
"Katana is a customizable StarkNet development network. It is blazingly fast "
"and allows you to iterate on your game logic swiftly."
msgstr ""

#: src/theory/what-is-dojo.md:31
msgid "[Sozo CLI](/crates/sozo/README.md) - CLI Management Tool"
msgstr ""

#: src/theory/what-is-dojo.md:33
msgid ""
"Dojo worlds are poised to become some of the largest contracts. Sozo is a "
"CLI tool that assists you in managing your worlds. It enables you to create, "
"build, test, and deploy your worlds. Additionally, you can craft new "
"components and systems and register them with your world."
msgstr ""

#: src/theory/what-is-dojo.md:35
msgid "What Dojo doesn't give you"
msgstr ""

#: src/theory/what-is-dojo.md:37
msgid ""
"Visual graphics - While Dojo provides networking and contracts, it doesn't "
"offer graphical engines. You can bring your graphics of choice! Integrate "
"your Dojo world with Unreal, Godot, or Unity."
msgstr ""

#: src/theory/what-is-dojo.md:39
msgid "Understanding the Dojo Workflow: A Visual Guide"
msgstr ""

#: src/theory/what-is-dojo.md:41
msgid ""
"To help you understand how `Sozo` works, we've created a visual guide that "
"outlines the flow of execution using the powerful sozo tool and the katana "
"development network."
msgstr ""

#: src/theory/what-is-dojo.md:43
msgid ""
"This visual representation will help you grasp the fundamental steps of "
"working with Dojo, guiding you through the process of creating and managing "
"your on-chain games."
msgstr ""

#: src/theory/what-is-dojo.md:45
msgid "![Dojo Sozo Workflow](../images/dojo-sozo-workflow.jpg)"
msgstr ""

#: src/theory/autonomous-worlds.md:1
msgid "Autonomous Worlds"
msgstr ""

#: src/theory/autonomous-worlds.md:3
msgid ""
"\"Autonomous worlds represent persistent, permissionless, and decentralized "
"open environments that users can freely interact with and contribute to.\""
msgstr ""

#: src/theory/autonomous-worlds.md:5
msgid ""
"The precise definition of Autonomous Worlds (AWs) remains somewhat elusive, "
"as it is more of an abstract concept that has yet to be fully crystallized. "
"Lattice first [introduced](https://0xparc.org/blog/autonomous-worlds) the "
"terminology in 2022, but the notion of open worlds operating on the "
"blockchain has been around for a while. The abstraction introduced by MUD "
"served as a catalyst for the market to recognize the potential of these "
"worlds."
msgstr ""

#: src/theory/autonomous-worlds.md:7
msgid ""
"Autonomous Worlds share notable similarities with blockchains in their "
"fundamental nature. Once established, they persist, maintaining their state "
"throughout the lifespan of the chain. Players can join or leave, and "
"developers can expand these worlds by deploying features in a permissionless "
"manner, much like how contracts are added to a chain. While there is no "
"universally accepted definition for an Autonomous World, we believe that a "
"game must possess at least the following two essential features to be "
"considered as such:"
msgstr ""

#: src/theory/autonomous-worlds.md:9
msgid ""
"Decentralized data availability layer: While the state execution may reside "
"on a centralized layer, it is crucial that the state can be reconstructed if "
"the execution layer ceases to exist. Rollups offer a solution, providing "
"increased capacity execution layers while ensuring data is permanently "
"settled on Ethereum. This guarantees the world's perpetual persistence."
msgstr ""

#: src/theory/autonomous-worlds.md:11
msgid ""
"Permissionless entry point for expanding the world: The World contract must "
"be capable of accepting new systems and components without requiring "
"permission. While this doesn't imply that every component and system will be "
"utilized, they must adhere to this pattern, ensuring open and unrestricted "
"access for potential enhancements."
msgstr ""

#: src/theory/autonomous-worlds.md:13
msgid ""
"We're firm believers in the potential for Autonomous Worlds to catalyze the "
"exploration of novel forms in the medium provided by zk proofs and "
"blockchain technology. This is not only about games, but also about new "
"forms of artwork, coordination, fun, emerging from tinkering and radical "
"innovation, eventually questioning the very notion of \"play\" in this brave "
"new decentralized and trustless world."
msgstr ""

#: src/theory/autonomous-worlds.md:15
msgid "Homework"
msgstr ""

#: src/theory/autonomous-worlds.md:16
msgid ""
"[Wired - Autonomous Worlds "
"Primer](https://www.wired.com/story/autonomous-worlds-aim-to-free-online-games-from-corporate-control/)"
msgstr ""

#: src/theory/autonomous-worlds.md:17
msgid ""
"[0xParc - Autonomous Worlds (Part "
"1)](https://0xparc.org/blog/autonomous-worlds)"
msgstr ""

#: src/theory/autonomous-worlds.md:18
msgid ""
"[Gubsheep - The Strongest Crypto Gaming "
"Thesis](https://gubsheep.substack.com/p/the-strongest-crypto-gaming-thesis)"
msgstr ""

#: src/theory/autonomous-worlds.md:19
msgid ""
"[Lattice - MUD: An engine for Autonomous "
"Worlds](https://lattice.xyz/blog/mud-an-engine-for-autonomous-worlds)"
msgstr ""

#: src/theory/autonomous-worlds.md:20
msgid "[Guiltygyoza - Game 2.0](https://www.guiltygyoza.xyz/2022/07/game2)"
msgstr ""

#: src/theory/autonomous-worlds.md:21
msgid ""
"[Guiltygyoza - Composable "
"Engineering](https://www.guiltygyoza.xyz/2023/05/composable-engineering)"
msgstr ""

#: src/theory/autonomous-worlds.md:22
msgid ""
"[Jay Springett - Wind-up "
"Worlds](https://www.thejaymo.net/2022/05/06/wind-up-worlds/)"
msgstr ""

#: src/theory/autonomous-worlds.md:23
msgid ""
"[Are.na collection on Autonomous "
"Worlds](https://www.are.na/sylve-chevet/on-chain-realities-and-autonomous-worlds)"
msgstr ""

#: src/theory/cairo.md:1
msgid "Provable games"
msgstr ""

#: src/theory/cairo.md:3
msgid ""
"Provable games demand "
"[zero-knowledge](https://ethereum.org/en/zero-knowledge-proofs/) properties "
"for efficient scaling and verification of computations. "
"[Cairo](https://book.starknet.io/ch01-00-getting-started.html) addresses "
"this need by providing a generalized language, eliminating the complexity of "
"creating circuits to incorporate "
"[SNARKs](https://consensys.net/blog/developers/introduction-to-zk-snarks/). "
msgstr ""

#: src/theory/cairo.md:5
msgid ""
"**You can simply program in Cairo and your applications become automatically "
"provable**. "
msgstr ""

#: src/theory/cairo.md:7
msgid ""
"Moreover, you can deploy your programs on the [Cairo Virtual "
"Machine](https://medium.com/starkware/cairo-welcome-on-board-1cf3487554f) "
"(CVM), which is compatible with Starknet's Layer 2, Starknet appchains, and "
"even in-browser through WebAssembly (WASM)! Dojo aims to supply "
"straightforward ZK primitives to fuel your game development."
msgstr ""

#: src/theory/cairo.md:9
msgid ""
"For more information about Starknet, Cairo and its tech stack, check out the "
"[Starknet & Cairo book](https://book.starknet.io/)."
msgstr ""

#: src/theory/cairo.md:11
msgid "Cairo"
msgstr ""

#: src/theory/cairo.md:13
msgid ""
"Cairo is an open-source, Turing-complete smart contract language developed "
"by Starkware, designed to power the Validity Rollup Starknet. The language "
"enables highly expressive and verifiable computation, making it well-suited "
"for building scalable and secure applications, including decentralized "
"finance (DeFi) projects."
msgstr ""

#: src/theory/cairo.md:15
msgid ""
"Dojo builds on Cairo to create a robust framework for developing Autonomous "
"Worlds (AWs). By leveraging the capabilities of Cairo, Dojo aims to "
"streamline the development process, improve maintainability, and enhance the "
"performance of AWs."
msgstr ""

#: src/theory/cairo.md:17
msgid ""
"A key feature of the Dojo framework is its use of "
"[commands](../cairo/commands.md). Commands are a design pattern that helps "
"to reduce boilerplate code, resulting in cleaner and more maintainable "
"applications. They achieve this by encapsulating specific actions or "
"operations within self-contained, reusable units."
msgstr ""

#: src/theory/cairo.md:19
msgid ""
"Developers can write commands freely within Systems, and the Cairo compiler "
"takes care of inlining the appropriate functions. "
msgstr ""

#: src/theory/cairo.md:21
msgid "Essential Reading"
msgstr ""

#: src/theory/cairo.md:22
msgid "[Cairo book](https://github.com/cairo-book/cairo-book)"
msgstr ""

#: src/theory/cairo.md:23
msgid "[Awesome Cairo](https://github.com/auditless/awesome-cairo)"
msgstr ""

#: src/theory/cairo.md:24
msgid "[Starknet Book](https://book.starknet.io/)"
msgstr ""

#: src/theory/cairo.md:26
msgid "Starknet as an L2"
msgstr ""

#: src/theory/cairo.md:28
msgid ""
"Starknet is a Validity Rollup Layer 2 (L2) solution designed to scale "
"Ethereum. It operates by offering high transaction throughput and low gas "
"costs while maintaining the same level of security as Ethereum Layer 1 (L1). "
"The strategy it uses is akin to solving a sudoku puzzle: verifying a "
"solution is easier than finding the solution from scratch. Similarly, "
"Starknet replaces heavy and costly L1 computation with cheaper L1 "
"verification through the use of STARK proofs computed off-chain."
msgstr ""

#: src/theory/cairo.md:30
msgid ""
"In more technical terms, Starknet is a permissionless Validity-Rollup (also "
"known as a \"ZK-Rollup\") that supports general computation and currently "
"runs as an L2 network over Ethereum. The network's L1 security is guaranteed "
"by its utilization of the STARK cryptographic proof system, which is "
"considered one of the safest and most scalable."
msgstr ""

#: src/theory/cairo.md:32
msgid "Starknet as an Appchain"
msgstr ""

#: src/theory/cairo.md:34
msgid ""
"Cairo is an isomorphic, general-purpose language, optimized for "
"Zero-Knowledge (ZK) proofs. It's the driving force behind Starknet, Starkex, "
"and appchains. Remarkably, you can also run it in WebAssembly (WASM) to "
"generate proofs on the client-side! The Dojo team is working closely with "
"the [Madara](https://github.com/keep-starknet-strange/madara) team to enable "
"Starknet appchains to seamlessly run Dojo worlds."
msgstr ""

#: src/theory/faqs.md:3
msgid "Who owns Dojo?"
msgstr ""

#: src/theory/faqs.md:5
msgid ""
"Dojo is strictly open-source and uses the Apache 2.0 license. Anyone can use "
"Dojo for free, and anyone can contribute to the project."
msgstr ""

#: src/theory/faqs.md:7
msgid "Why Dojo?"
msgstr ""

#: src/theory/faqs.md:9
msgid ""
"Dojo was created to solve problems the founders faced when building onchain "
"games. It standardizes the process of building such games and provides a "
"suite of tools to make it easier."
msgstr ""

#: src/theory/faqs.md:11
msgid "What is the Dojo roadmap?"
msgstr ""

#: src/theory/faqs.md:13
msgid ""
"Dojo is rapidly evolving. You can find open issues on the [Dojo "
"Github](https://github.com/dojoengine/dojo/issues) and join the "
"[Discord](https://discord.gg/vUN4Xq9Qv6) to get involved. If you have ideas "
"for the project, please open an issue."
msgstr ""

#: src/theory/faqs.md:15
msgid "What is an onchain game?"
msgstr ""

#: src/theory/faqs.md:17
msgid ""
"Onchain games are games that exist entirely on a public blockchain network; "
"all states and logic are onchain. Clients (like web browsers) do not exist "
"on the chain but exist purely to interact with and interpret the onchain "
"state."
msgstr ""

#: src/theory/faqs.md:19
msgid "What is an autonomous world?"
msgstr ""

#: src/theory/faqs.md:21
msgid ""
"An autonomous world is one that exists entirely onchain. It's not controlled "
"by any single entity but is instead governed by the rules set within that "
"world. Dive deeper into the topic here: [Autonomous "
"Worlds](../theory/autonomous-worlds.md)."
msgstr ""

#: src/theory/faqs.md:23
msgid "What is Cairo?"
msgstr ""

#: src/theory/faqs.md:25
msgid ""
"Cairo is an opensource programming language invented by Starkware. It's a "
"Turing-complete language meant for general-purpose computation. It's a "
"low-level language designed to compile to the Cairo Virtual Machine. Learn "
"more about it here: [Cairo](../theory/cairo.md)."
msgstr ""

#: src/theory/faqs.md:27
msgid "What is a provable game?"
msgstr ""

#: src/theory/faqs.md:29
msgid ""
"Thanks to the magic of zero-knowledge proofs, we can ensure a game is fair "
"by verifying a zk proof created off-chain. But what does that entail? "
"Consider a game of chess. We aim for an experience where players trust each "
"other's moves. In a straightforward approach — and given the simple rules of "
"chess — if this were in a blockchain environment, every move would be a "
"transaction on the blockchain. This is costly. We just want to know the "
"winner, not every move."
msgstr ""

#: src/theory/faqs.md:31
msgid ""
"With zk proofs and client communications, players can establish a state "
"channel, sharing moves off-chain and ensuring their validity. At the end, a "
"zk proof can be submitted to the blockchain to confirm the game's fairness. "
"This constitutes a provable game."
msgstr ""

#: src/getting-started/quick-start.md:3
msgid ""
"It is worth reading [theory](../theory/autonomous-worlds.md) to familiarize "
"yourself with the concept of Autonomous Worlds (AWs) and the [Cairo "
"ecosystem](../theory/cairo.md) before diving into the code."
msgstr ""

#: src/getting-started/quick-start.md:6
msgid "Install Dojoup"
msgstr ""

#: src/getting-started/quick-start.md:8
msgid ""
"Dojo is built around a set of development tools - Katana, Torii and Sozo. "
"Install them all easily with Dojoup. You can find detailed information about "
"Dojoup "
"[here](https://github.com/dojoengine/dojo/blob/master/dojoup/README.md)."
msgstr ""

#: src/getting-started/quick-start.md:14
msgid ""
"This will install Dojoup, then simply follow the instructions on-screen, "
"which will make the `dojoup` command available in your CLI."
msgstr ""

#: src/getting-started/quick-start.md:21
msgid ""
"For full `dojoup` reference and debugging see "
"[Dojoup](../toolchain/dojoup.md)."
msgstr ""

#: src/getting-started/quick-start.md:23
msgid "Next steps"
msgstr ""

#: src/getting-started/quick-start.md:25
msgid ""
"Head to [Hello Dojo](../cairo/hello-dojo.md) to get create your first Dojo "
"world."
msgstr ""

#: src/getting-started/from-source.md:1
msgid "Building from source"
msgstr ""

#: src/getting-started/from-source.md:3
msgid ""
"If you are just wanting to play with the toolchain, we strongly suggest "
"following the [Quick Start](./quick-start.md) guide."
msgstr ""

#: src/getting-started/from-source.md:5 src/getting-started/setup.md:5
msgid "Prerequisites"
msgstr ""

#: src/getting-started/from-source.md:7
msgid ""
"You will need the [Rust](https://rust-lang.org) compiler and Cargo, the Rust "
"package manager. The easiest way to install both is with "
"[`rustup.rs`](https://rustup.rs/)."
msgstr ""

#: src/getting-started/from-source.md:10
msgid ""
"On Windows, you will also need a recent version of [Visual "
"Studio](https://visualstudio.microsoft.com/downloads/), installed with the "
"\"Desktop Development With C++\" Workloads option."
msgstr ""

#: src/getting-started/from-source.md:13
msgid "Building"
msgstr ""

#: src/getting-started/from-source.md:15
msgid "You can either use the different [Dojoup](#using-dojoup) flags:"
msgstr ""

#: src/getting-started/from-source.md:22
msgid "Or, by using a single Cargo command:"
msgstr ""

#: src/getting-started/from-source.md:28
msgid ""
"Or, by manually building from a local copy of the [Dojo "
"repository](https://github.com/dojoengine/dojo):"
msgstr ""

#: src/getting-started/from-source.md:31
msgid "# clone the repository\n"
msgstr ""

#: src/getting-started/from-source.md:33
msgid "# install Sozo\n"
msgstr ""

#: src/getting-started/from-source.md:35
msgid "# install Katana\n"
msgstr ""

#: src/getting-started/from-source.md:37
msgid "# install Torii\n"
msgstr ""

#: src/getting-started/setup.md:3
msgid ""
"This is a guide to setting up a development environment for Dojo. It is not "
"suggested to follow this guide if you are just wanting to play with the "
"toolchain. We strongly suggest following the [Quick "
"Start](../getting-started/quick-start.md) guide."
msgstr ""

#: src/getting-started/setup.md:7
msgid "[Rust](https://github.com/rust-lang/rust)"
msgstr ""

#: src/getting-started/setup.md:8
msgid "[Cairo](https://github.com/starkware-libs/cairo)"
msgstr ""

#: src/getting-started/setup.md:9
msgid "[protoc](https://github.com/protocolbuffers/protobuf)"
msgstr ""

#: src/getting-started/setup.md:11
msgid "Guide"
msgstr ""

#: src/getting-started/setup.md:13
msgid "Clone"
msgstr ""

#: src/getting-started/setup.md:19
msgid "Linux & Mac"
msgstr ""

#: src/getting-started/setup.md:21
msgid "1. Install Rust and Dependencies"
msgstr ""

#: src/getting-started/setup.md:23
msgid ""
"Start by installing Rust and running the test suite to confirm your setup:"
msgstr ""

#: src/getting-started/setup.md:29
msgid ""
"Note: Depending on your Linux distribution, you may need to install "
"additional dependencies. Make sure to install any suggested or missing "
"dependencies that arise during the setup process."
msgstr ""

#: src/getting-started/setup.md:31
msgid "2. Install Scarb Package Manager"
msgstr ""

#: src/getting-started/setup.md:33
msgid ""
"Next, install the [Scarb](https://docs.swmansion.com/scarb) package manager "
"by running:"
msgstr ""

#: src/getting-started/setup.md:36
msgid "'=https'"
msgstr ""

#: src/getting-started/setup.md:39
msgid "3. Add the Cairo 1.0 VSCode Extension"
msgstr ""

#: src/getting-started/setup.md:41
msgid ""
"Install the [Cairo "
"1.0](https://marketplace.visualstudio.com/items?itemName=starkware.cairo1) "
"extension for Visual Studio Code."
msgstr ""

#: src/getting-started/setup.md:43
msgid "Windows"
msgstr ""

#: src/getting-started/setup.md:45 src/getting-started/setup.md:49
msgid "_Coming soon_"
msgstr ""

#: src/getting-started/setup.md:47
msgid "Container"
msgstr ""

#: src/getting-started/contributing.md:1
msgid "Contributing to the Core"
msgstr ""

#: src/getting-started/contributing.md:3
msgid ""
"Dojo is an open-source project, currently in its early development phase, "
"and warmly welcomes contributors."
msgstr ""

#: src/getting-started/contributing.md:5
msgid "How to Contribute"
msgstr ""

#: src/getting-started/contributing.md:7
msgid ""
"Head to the [Github](https://github.com/dojoengine/dojo/issues) for open "
"issues, if you see an issue that is unassigned, please request in the "
"comments to be assigned to it. If you have an idea for a new feature, please "
"create an issue with the `enhancement` tag."
msgstr ""

#: src/community/get-started.md:3
msgid ""
"[Community "
"Hub](https://dojoengine.notion.site/Dojo-Engine-Community-Hub-d316194b998941c48ddf771a4dd5ff08#bcd6a32db1b2406cb6c325f3b700d45a)"
msgstr ""

#: src/community/get-started.md:4
msgid "[Discord](https://discord.gg/KG9w9BmDrV)"
msgstr ""

#: src/community/get-started.md:5
msgid "[Twitter](https://twitter.com/dojostarknet)"
msgstr ""

#: src/community/get-started.md:6
msgid "[Awesome Dojo](https://github.com/dojoengine/awesome-dojo)"
msgstr ""

#: src/cairo/overview.md:1
msgid ""
"You should have a good understanding of Cairo before proceeding. If you're "
"unfamiliar with Cairo, we recommend you read the [Cairo "
"documentation](https://book.cairo-lang.org/title-page.html) first."
msgstr ""

#: src/cairo/overview.md:3
msgid "A New Approach to Game Development"
msgstr ""

#: src/cairo/overview.md:5
msgid ""
"Dojo provides an advanced abstraction layer over Cairo, mirroring React's "
"relationship with JavaScript. Its specialized architecture simplifies game "
"design and development. By leveraging Dojo, developers can use succinct "
"commands that transform into comprehensive queries at compile time. This "
"chapter delves deeper into Dojo's unique architecture."
msgstr ""

#: src/cairo/overview.md:7
msgid "Delving into the Architecture"
msgstr ""

#: src/cairo/overview.md:9
msgid ""
"Dojo efficiently encapsulates boilerplate contracts within the compiler, "
"letting developers concentrate on the distinct aspects of their game or app."
msgstr ""

#: src/cairo/overview.md:11
msgid "Consider this as the most basic Dojo world setup:"
msgstr ""

#: src/cairo/overview.md:20
msgid ""
"While seemingly simple, behind the scenes Dojo generates foundational "
"contracts, setting the stage for you to focus purely on data and logic. "
msgstr ""

#: src/cairo/overview.md:22
msgid "Lets take a look at the `main.cairo`:"
msgstr ""

#: src/cairo/overview.md:26
msgid "// dojo data models\n"
msgstr ""

#: src/cairo/overview.md:30
msgid "// primary key\n"
msgstr ""

#: src/cairo/overview.md:34
msgid "// regular cairo struct\n"
msgstr ""

#: src/cairo/overview.md:41
msgid "// interface\n"
msgstr ""

#: src/cairo/overview.md:47
msgid "// contract\n"
msgstr ""

#: src/cairo/overview.md:57
msgid ""
"// \n"
"        // NOTICE: we pass the world dispatcher as an argument to every "
"function. \n"
"        // This is how we interact with the world contract.\n"
"        //\n"
msgstr ""

#: src/cairo/overview.md:62 src/cairo/hello-dojo.md:97
#: src/cairo/hello-dojo.md:127
msgid "// Access the world dispatcher for reading.\n"
msgstr ""

#: src/cairo/overview.md:65
msgid "// get player address\n"
msgstr ""

#: src/cairo/overview.md:68
msgid "// dojo command - get player position\n"
msgstr ""

#: src/cairo/overview.md:71
msgid "// dojo command - set player position\n"
msgstr ""

#: src/cairo/overview.md:78
msgid "Breakdown"
msgstr ""

#: src/cairo/overview.md:80
msgid "This just a regular Cairo contract, with some specifics."
msgstr ""

#: src/cairo/overview.md:82
msgid "`Position` struct"
msgstr ""

#: src/cairo/overview.md:84
msgid ""
"In a Dojo world, state is defined using models. These are structs marked "
"with the `#[derive(Model)]` attribute, functioning similarly to a keypair "
"store. The primary key for a model is indicated using the `#[key]` "
"attribute; for instance, the `player` field serves as the primary key in "
"this context."
msgstr ""

#: src/cairo/overview.md:86
msgid "Read more about models [here](./models.md)."
msgstr ""

#: src/cairo/overview.md:88
msgid "`spawn` function - a dojo system"
msgstr ""

#: src/cairo/overview.md:90
msgid ""
"In the `spawn` function, take note of the second parameter: the "
"`IWorldDispatcher` interface. This provides a gateway to the world contract. "
"By integrating it into the function, it enables the `get!` and `set!` macros "
"to interface directly with the world contract. "
msgstr ""

#: src/cairo/overview.md:92
msgid ""
"Commands, a significant innovation in Dojo, are further explored "
"[here](./commands.md)."
msgstr ""

#: src/cairo/overview.md:94
msgid "High level transaction flow of a world"
msgstr ""

#: src/cairo/overview.md:96
msgid ""
"To call a Dojo world you invoke a system, which then calls the "
"[world](./world.md) and does the necessary state changes."
msgstr ""

#: src/cairo/overview.md:98
msgid "![Dojo World](../images/world_flow.png)"
msgstr ""

#: src/cairo/world.md:1
msgid ""
"**To think about:** Consider Autonomous Worlds as sovereign blockchains "
"residing within another blockchain - a nested blockchain, so to speak. Just "
"as you can deploy contracts onto Ethereum to enhance its functionality, you "
"can similarly introduce systems into the World contract to enrich its "
"features. While anyone can contribute to the World, akin to Ethereum, "
"authorization is required to interact with model state. There is a dedicated "
"topic to [Authorisation](./authorization.md)."
msgstr ""

#: src/cairo/world.md:3
msgid "The World Contract"
msgstr ""

#: src/cairo/world.md:5
msgid ""
"The world contract functions as a central store for the world models and "
"systems. Every contract that interacts with the world, must use the world "
"contract address as the first parameter. This is how the world contract is "
"able to manage the state of the world."
msgstr ""

#: src/cairo/world.md:7
msgid ""
"Although we suggest strongly to structure your world around an ECS pattern "
"you are not required to do so. You can simply use the dojo-models as a "
"keypair store along with the supporting infrastructure."
msgstr ""

#: src/cairo/world.md:9
msgid ""
"Dojo core abstracts the world contract away, you do not write it and it is "
"not meant to be altered when building a world. However, it's important to "
"understand how it works and how it interacts with the rest of the system."
msgstr ""

#: src/cairo/world.md:11
msgid "The `uuid()` command"
msgstr ""

#: src/cairo/world.md:13
msgid ""
"It is often useful to generate unique IDs for entities. The `uuid()` fn can "
"be used to generate a unique ID."
msgstr ""

#: src/cairo/world.md:15
msgid "Use it like this:"
msgstr ""

#: src/cairo/world.md:22
msgid "Full World API"
msgstr ""

#: src/cairo/world.md:24
msgid ""
"The world exposes an interface which can be interacted with by any client."
msgstr ""

#: src/cairo/world.md:27
msgid "// World interface\n"
msgstr ""

#: src/cairo/systems.md:3
msgid ""
"**IMPORTANT:** Before defining your systems, prioritize permissions. Plan "
"carefully to ensure proper access and security."
msgstr ""

#: src/cairo/systems.md:5 src/cairo/models.md:6
msgid "**_TL;DR_**"
msgstr ""

#: src/cairo/systems.md:6
msgid "Systems function as contract methods."
msgstr ""

#: src/cairo/systems.md:7
msgid "Contracts containing Systems gain permissions to write to models."
msgstr ""

#: src/cairo/systems.md:8
msgid ""
"Systems pass a `world` address as their first parameter unless utilizing the "
"[`#[dojo::contract]`](#the-dojocontract-decorator) decorator."
msgstr ""

#: src/cairo/systems.md:9
msgid "Systems engage the world contract to alter models' state."
msgstr ""

#: src/cairo/systems.md:10
msgid "The world contract is invoked through systems."
msgstr ""

#: src/cairo/systems.md:11
msgid "Systems ought to be concise and specific."
msgstr ""

#: src/cairo/systems.md:12
msgid "In most scenarios, systems are stateless."
msgstr ""

#: src/cairo/systems.md:14
msgid "What are Systems?"
msgstr ""

#: src/cairo/systems.md:16
msgid ""
"Within dojo we define systems as functions within a Contract that act on the "
"world."
msgstr ""

#: src/cairo/systems.md:18
msgid ""
"Systems play a pivotal role in your world's logic, directly mutating its "
"component states. It's important to understand that to enact these "
"mutations, a system needs explicit permission from the "
"[`models`](./models.md) owner."
msgstr ""

#: src/cairo/systems.md:20
msgid "System Permissions"
msgstr ""

#: src/cairo/systems.md:22
msgid ""
"Since the whole contract is giving write access to the model, it is "
"important to be careful when defining systems. A simple way to think about "
"it is:"
msgstr ""

#: src/cairo/systems.md:24
msgid "![System Permissions](../images/permissions.png)"
msgstr ""

#: src/cairo/systems.md:26
msgid "System Structure"
msgstr ""

#: src/cairo/systems.md:28
msgid ""
"Every system function starts with a [`world`](./world.md) address as its "
"initial parameter. This design permits these functions to alter the world's "
"state. Notably, this structure also makes systems adaptable and reusable "
"across multiple worlds!"
msgstr ""

#: src/cairo/systems.md:30
msgid ""
"Let's look at the simplest possible system which mutates the state of the "
"`Moves` component."
msgstr ""

#: src/cairo/systems.md:41
msgid "// no storage\n"
msgstr ""

#: src/cairo/systems.md:45
msgid "// implementation of the PlayerActions interface\n"
msgstr ""

#: src/cairo/systems.md:66 src/cairo/hello-dojo.md:155
msgid "Breaking it down"
msgstr ""

#: src/cairo/systems.md:68 src/cairo/hello-dojo.md:157
msgid "System is a contract"
msgstr ""

#: src/cairo/systems.md:70
msgid ""
"As you can see a System is like a regular Starknet contract. It can include "
"storage, and it can implement interfaces."
msgstr ""

#: src/cairo/systems.md:72
msgid "`Spawn` function"
msgstr ""

#: src/cairo/systems.md:74
msgid ""
"The spawn function is currently the only function that exists in this "
"system. It is called when a player spawns into the world. It is responsible "
"for setting up the player's initial state."
msgstr ""

#: src/cairo/systems.md:76
msgid "The `#[dojo::contract]` Decorator"
msgstr ""

#: src/cairo/systems.md:78
msgid ""
"All StarkNet contracts are defined using the `#[starknet::contract]` "
"decorator, ensuring accurate compilation. In this context, Dojo introduces "
"the `#[dojo::contract]` decorator, which aims to minimize boilerplate in "
"contract writing. It’s imperative to acknowledge that utilizing this "
"decorator is entirely optional."
msgstr ""

#: src/cairo/systems.md:80
msgid ""
"The `#[dojo::contract]` decorator allows developers to omit including "
"`world: IWorldDispatcher` as a parameter. Behind the scenes, it injects the "
"world into the contract and eliminates some imports, thereby streamlining "
"the development process."
msgstr ""

#: src/cairo/systems.md:102 src/cairo/models.md:218 src/cairo/hello-dojo.md:92
msgid "// impl: implement functions specified in trait\n"
msgstr ""

#: src/cairo/systems.md:105 src/cairo/hello-dojo.md:95
msgid "// ContractState is defined by system decorator expansion\n"
msgstr ""

#: src/cairo/systems.md:135
msgid ""
"To interact with Systems read more in the "
"[sozo](../toolchain/sozo/overview.md) docs."
msgstr ""

#: src/cairo/models.md:3
msgid "Models = Data"
msgstr ""

#: src/cairo/models.md:7
msgid "Models store structured data in your world."
msgstr ""

#: src/cairo/models.md:8
msgid "Models are Cairo structs with additional features."
msgstr ""

#: src/cairo/models.md:9
msgid "Models can implement traits."
msgstr ""

#: src/cairo/models.md:10
msgid "Use the `#[derive(Model)]` decorator to define them."
msgstr ""

#: src/cairo/models.md:11
msgid "Custom enums and types are supported."
msgstr ""

#: src/cairo/models.md:12
msgid "Define the primary key using the `#[key]` attribute."
msgstr ""

#: src/cairo/models.md:14
msgid "Models are Structs"
msgstr ""

#: src/cairo/models.md:16
msgid ""
"Models are structs annotated with the `#[derive(Model)]` attribute. Consider "
"these models as a key-value store, where the `#[key]` attribute is utilized "
"to define the primary key. While models can contain any number of fields, "
"adhering to best practices in Entity-Component-System (ECS) design involves "
"maintaining small, isolated models. This approach fosters modularity and "
"composability, enabling you to reuse models across various entity types."
msgstr ""

#: src/cairo/models.md:27
msgid "The #\\[key\\] attribute"
msgstr ""

#: src/cairo/models.md:29
msgid ""
"The `#[key]` attribute indicates to Dojo that this model is indexed by the "
"`player` field. You need to define a key for each model, as this is how you "
"query the model. However, you can create composite keys by defining multiple "
"fields as keys. "
msgstr ""

#: src/cairo/models.md:42
msgid ""
"In this case you then would set the model with both the player and location "
"fields:"
msgstr ""

#: src/cairo/models.md:57
msgid "Implementing Traits"
msgstr ""

#: src/cairo/models.md:59
msgid ""
"Models can implement traits. This is useful for defining common "
"functionality across models. For example, you may want to define a "
"`Position` model that implements a `PositionTrait` trait. This trait could "
"define functions such as `is_zero` and `is_equal` which could be used when "
"accessing the model."
msgstr ""

#: src/cairo/models.md:81
msgid "Custom Setting models"
msgstr ""

#: src/cairo/models.md:83
msgid ""
"Suppose we need a place to keep a global value with the flexibility to "
"modify it in the future. Take, for instance, a global `combat_cool_down` "
"parameter that defines the duration required for an entity to be primed for "
"another attack. To achieve this, we can craft a model dedicated to storing "
"this value, while also allowing for its modification via a decentralized "
"governance model."
msgstr ""

#: src/cairo/models.md:85
msgid ""
"To establish these models, you'd follow the usual creation method. However, "
"when initializing them, employ a constant identifier, such as "
"GAME_SETTINGS_ID."
msgstr ""

#: src/cairo/models.md:98
msgid "Types"
msgstr ""

#: src/cairo/models.md:100
msgid "Support model types:"
msgstr ""

#: src/cairo/models.md:102
msgid "`u8`"
msgstr ""

#: src/cairo/models.md:103
msgid "`u16`"
msgstr ""

#: src/cairo/models.md:104
msgid "`u32`"
msgstr ""

#: src/cairo/models.md:105
msgid "`u64`"
msgstr ""

#: src/cairo/models.md:106
msgid "`u128`"
msgstr ""

#: src/cairo/models.md:107
msgid "`u256`"
msgstr ""

#: src/cairo/models.md:108
msgid "`ContractAddress`"
msgstr ""

#: src/cairo/models.md:109
msgid "Enums"
msgstr ""

#: src/cairo/models.md:110
msgid "Custom Types"
msgstr ""

#: src/cairo/models.md:112
msgid "It is currently not possible to use Arrays."
msgstr ""

#: src/cairo/models.md:114
msgid "Custom Types + Enums"
msgstr ""

#: src/cairo/models.md:115 src/cairo/migration/0.3.0.md:27
msgid ""
"For models containing complex types, it's crucial to implement the "
"`SchemaIntrospection` trait."
msgstr ""

#: src/cairo/models.md:117 src/cairo/migration/0.3.0.md:29
msgid "Consider the model below:"
msgstr ""

#: src/cairo/models.md:123 src/cairo/migration/0.3.0.md:36
msgid "/// The card's designated role.\n"
msgstr ""

#: src/cairo/models.md:128 src/cairo/migration/0.3.0.md:41
msgid ""
"For complex types, like `Roles` in the above example, you need to implement "
"`SchemaIntrospection`. Here's how:"
msgstr ""

#: src/cairo/models.md:134 src/cairo/migration/0.3.0.md:47
msgid "// Represents the byte size of the enum.\n"
msgstr ""

#: src/cairo/models.md:139 src/cairo/migration/0.3.0.md:52
msgid "// Specifies the layout byte size;\n"
msgstr ""

#: src/cairo/models.md:161
msgid "In practice with modularity in mind"
msgstr ""

#: src/cairo/models.md:163
msgid ""
"Consider a tangible analogy: Humans and Goblins. While they possess "
"intrinsic differences, they share common traits, such as having a position "
"and health. However, humans possess an additional model. Furthermore, we "
"introduce a Counter model, a distinct feature that tallies the numbers of "
"humans and goblins."
msgstr ""

#: src/cairo/models.md:187
msgid "// Special counter model\n"
msgstr ""

#: src/cairo/models.md:198
msgid ""
"So the Human will have a `Potions`, `Health` and `Position` model, and the "
"Goblin will have a `Health` and `Position` model. By doing we save having to "
"create Health and Position models for each entity type."
msgstr ""

#: src/cairo/models.md:200
msgid "So then a system would look like this:"
msgstr ""

#: src/cairo/models.md:215
msgid ""
"// we can set the counter value as a const, then query it easily! This "
"pattern is useful for settins.\n"
msgstr ""

#: src/cairo/models.md:229
msgid "// spawn a human\n"
msgstr ""

#: src/cairo/models.md:246
msgid "// spawn a goblin\n"
msgstr ""

#: src/cairo/models.md:259
msgid "// increment the counter\n"
msgstr ""

#: src/cairo/models.md:275
msgid ""
"A complete example can be found in the [Dojo "
"Starter](https://github.com/dojoengine/dojo-starter)"
msgstr ""

#: src/cairo/commands.md:3
msgid "_tldr_"
msgstr ""

#: src/cairo/commands.md:4
msgid "Commands are shorthand ways to write function calls"
msgstr ""

#: src/cairo/commands.md:5
msgid "Commands abstract complex queries into shorthands"
msgstr ""

#: src/cairo/commands.md:6
msgid "Commands are similar to rust macros"
msgstr ""

#: src/cairo/commands.md:8
msgid ""
"Understanding commands is key to understanding Dojo. You will leverage them "
"heavily within the systems you design."
msgstr ""

#: src/cairo/commands.md:10
msgid ""
"Commands in Dojo are generalized functions that are expanded at compile time "
"to facilitate system execution. They provide a convenient way for systems to "
"interact with the world state by abstracting common operations, such as "
"retrieving or updating models, and generating unique IDs. By leveraging "
"these commands, developers can streamline their system implementations and "
"improve code readability."
msgstr ""

#: src/cairo/commands.md:13
msgid "Using commands"
msgstr ""

#: src/cairo/commands.md:15
msgid ""
"Commands are used within systems to interact with the world state. They are "
"called using the following syntax:"
msgstr ""

#: src/cairo/commands.md:17
msgid "The `get!` command"
msgstr ""

#: src/cairo/commands.md:19
msgid "The `get!` command is used to retrieve models from the world state:"
msgstr ""

#: src/cairo/commands.md:22
msgid ""
"// world = calling world\n"
"// caller = key of the entity that called the system\n"
"// (Position, Moves) = tuple of models to retrieve\n"
msgstr ""

#: src/cairo/commands.md:28
msgid ""
"Here we are retrieving the `Position` and `Moves` models from the world "
"state. We are also using the `caller` to retrieve the models for the current "
"entity."
msgstr ""

#: src/cairo/commands.md:30
msgid ""
"You can then use `position` and `moves` as you would as any other Cairo "
"struct."
msgstr ""

#: src/cairo/commands.md:32
msgid "The `set!` command"
msgstr ""

#: src/cairo/commands.md:34
msgid "The `set!` command is used to update models state."
msgstr ""

#: src/cairo/commands.md:45
msgid "// If the structs are already defined it can also be written as:\n"
msgstr ""

#: src/cairo/commands.md:50
msgid ""
"Here we are updating the `Moves` and `Position` models in the world state "
"using the `caller` as the entity id."
msgstr ""

#: src/cairo/commands.md:52
msgid "The `emit!` command"
msgstr ""

#: src/cairo/commands.md:54
msgid ""
"The `emit!` command is used to emit custom events. These events are indexed "
"by [torii](../toolchain/torii/overview.md)"
msgstr ""

#: src/cairo/commands.md:60
msgid ""
"This will emit these values which could be captured by a client or you could "
"query these via [torii](../toolchain/torii/overview.md)"
msgstr ""

#: src/cairo/config.md:3
msgid ""
"Dojo worlds are defined in their Scarb.toml files. This is just a regular "
"[Scarb](https://docs.swmansion.com/scarb/) file which is an excellent Cairo "
"package manager and project manager."
msgstr ""

#: src/cairo/config.md:5
msgid "Full example of a Scarb.toml file:"
msgstr ""

#: src/cairo/config.md:7
msgid ""
"```toml\n"
"[package]\n"
"cairo-version = \"2.3.0\"\n"
"name = \"dojo_examples\"\n"
"version = \"0.1.0\"\n"
"\n"
"[cairo]\n"
"sierra-replace-ids = true\n"
"\n"
"[dependencies]\n"
"# IMPORTANT: Dojo should be pinned to a specific version or else your world "
"might not compile\n"
"dojo = { git = \"https://github.com/dojoengine/dojo\", rev=\"v0.3.0\" }\n"
"\n"
"[[target.dojo]]\n"
"\n"
"[tool.dojo]\n"
"initializer_class_hash = \"0xbeef\"\n"
"\n"
"[tool.dojo.env]\n"
"# local katana devnet\n"
"rpc_url = \"http://localhost:5050/\"\n"
"\n"
"# account address of world deployer\n"
"account_address = "
"\"0x33c627a3e5213790e246a917770ce23d7e562baa5b4d2917c23b1be6d91961c\"\n"
"\n"
"# private key of world deployer\n"
"private_key = "
"\"0x333803103001800039980190300d206608b0070db0012135bd1fb5f6282170b\"\n"
"\n"
"# world contract address\n"
"world_address = "
"\"0x789c94ef39aeebc7f8c4c4633030faefb8bee454e358ae53d06ced36136d7d6\"\n"
"```"
msgstr ""

#: src/cairo/events.md:3
msgid ""
"Events play a pivotal role in decoding the dynamics of a Dojo world. Every "
"time there's an update to a `Model`, the `World` contract emits these "
"events. What's even more exciting is that you can craft your own custom "
"events to fit specific needs! Moreover, thanks to "
"[Torii](../toolchain/torii/overview.md), all these events are seamlessly "
"indexed, ensuring easy and efficient querying."
msgstr ""

#: src/cairo/events.md:6
msgid "Component Events"
msgstr ""

#: src/cairo/events.md:8
msgid "Consider this example of a `Moves` model:"
msgstr ""

#: src/cairo/events.md:18
msgid ""
"When this component is updated, the `World` contract will emit an event with "
"the following structure:"
msgstr ""

#: src/cairo/events.md:23
msgid "// Moves\n"
msgstr ""

#: src/cairo/events.md:24
msgid "// [player]\n"
msgstr ""

#: src/cairo/events.md:25
msgid "// offset for the value in the table\n"
msgstr ""

#: src/cairo/events.md:26
msgid "// [remaining]\n"
msgstr ""

#: src/cairo/events.md:30
msgid ""
"This will then be captured by [Torii](../toolchain/torii/overview.md) and "
"indexed for querying. This will allow you to then reconstruct the state of "
"your world."
msgstr ""

#: src/cairo/events.md:32
msgid ""
"Similarly, when a component is deleted, the `World` contract will emit an "
"event with the following structure:"
msgstr ""

#: src/cairo/events.md:42
msgid "World Events"
msgstr ""

#: src/cairo/events.md:44
msgid ""
"The `World` contract also emits events when it's initialized and when new "
"components and systems are registered. These events are emitted with the "
"following structures:"
msgstr ""

#: src/cairo/events.md:70
msgid ""
"These events are also captured by [Torii](../toolchain/torii/overview.md) "
"and indexed for querying."
msgstr ""

#: src/cairo/events.md:73
msgid "Custom Events"
msgstr ""

#: src/cairo/events.md:75
msgid ""
"Within your systems, emitting custom events can be highly beneficial. "
"Fortunately, there's a handy `emit!` macro that lets you release events "
"directly from your world. These events are indexed by "
"[torii](../toolchain/torii/overview.md)"
msgstr ""

#: src/cairo/events.md:77
msgid "Use it like so:"
msgstr ""

#: src/cairo/events.md:83
msgid ""
"Include this in your system and it will emit an event with the following "
"structure:"
msgstr ""

#: src/cairo/events.md:93
msgid "Now a full example using a custom event: "
msgstr ""

#: src/cairo/events.md:108
msgid ""
"Note: Read about the `get!` and `set!` macros in [Commands](./commands.md)."
msgstr ""

#: src/cairo/authorization.md:3
msgid ""
"Authorization is crucial to a world, just like how authorization is crucial "
"to any smart contract."
msgstr ""

#: src/cairo/authorization.md:5
msgid ""
"As discussed in the [World](./world.md) chapter, Autonomous Worlds (AWs) "
"function as sovereign chains nested within a public blockchain. These Worlds "
"are also open to the public. This structure allows anyone to enhance a World "
"by deploying models or systems. However, this openness also introduces "
"security considerations. Similar to Ethereum, interacting with a model's "
"state within a System requires the appropriate authorization from the model "
"owner."
msgstr ""

#: src/cairo/authorization.md:7
msgid "Auth Architecture"
msgstr ""

#: src/cairo/authorization.md:9
msgid ""
"Every time a `set!` is called in a `System`, the world checks if the "
"`System` has authorization to update the model state. Only when the `System` "
"possesses the necessary authorization, the `set!` is executed. The following "
"diagram illustrates the authorization architecture."
msgstr ""

#: src/cairo/authorization.md:11
msgid "![Authorization Architecture](../images/dojo-auth.png)"
msgstr ""

#: src/cairo/authorization.md:13
msgid "Providing Authorization"
msgstr ""

#: src/cairo/authorization.md:15
msgid ""
"The deployer of the model is its initial owner. A model owner is able to "
"grant the `owner` and `writer` roles. Only owners can grant a System the "
"`writer` role which allows it to update the model."
msgstr ""

#: src/cairo/authorization.md:17
msgid "`sozo` offers a convenient tool to authorize systems."
msgstr ""

#: src/cairo/authorization.md:23
msgid ""
"This command will generate a `writer` authorization for the `spawn` system "
"to update the `Moves` model."
msgstr ""

#: src/cairo/metadata.md:3
msgid ""
"Dojo supports associating offchain metadata with the world contract and "
"other deployed contracts. This can provide additional context about the "
"world, such as it's name, description, social links and other media. "
"Enabling external services to easily index and distribute worlds and "
"experiences built on them."
msgstr ""

#: src/cairo/metadata.md:6
msgid "World Metadata"
msgstr ""

#: src/cairo/metadata.md:8
msgid ""
"During migration, `sozo` will automatically manage the worlds metadata for "
"you, uploading it to ipfs and setting it in the world contract. It does so "
"by parsing the metadata defined in the projects `Scarb.toml`."
msgstr ""

#: src/cairo/metadata.md:10
msgid ""
"To set a worlds metadata, create the following section in your `Scarb.toml`:"
msgstr ""

#: src/cairo/metadata.md:12
msgid ""
"```toml\n"
"[tool.dojo.world]\n"
"name = \"example\"\n"
"description = \"example world\"\n"
"icon_uri = \"file://assets/icon.png\"\n"
"cover_uri = \"file://assets/cover.png\"\n"
"website = \"https://dojoengine.org\"\n"
"socials.x = \"https://twitter.com/dojostarknet\"\n"
"```"
msgstr ""

#: src/cairo/metadata.md:22
msgid ""
"The toolchain supports the `name`, `description`, `icon_uri`, `cover_uri`, "
"`website` and `socials` attributes by default. `_uri` attributes can point "
"to a asset in the repo using the `file://` schema or to remote resouces "
"using either `ipfs://` or `https://`. Arbitrary social links can be set by "
"setting a key value on the `socials` attribute. For example, we could add a "
"`socials.github = \"...\"`."
msgstr ""

#: src/cairo/metadata.md:24
msgid ""
"During migration, `sozo` will upload any local assets to ipfs, replace the "
"corresponding uris, upload the metadata json to ipfs, and set the "
"`metadata_uri` for the world (resource `0`)."
msgstr ""

#: src/cairo/metadata.md:26
msgid "Contract Metadata"
msgstr ""

#: src/cairo/metadata.md:28
msgid ""
"It is possible for contract owners to set a `metadata_uri` for any contract. "
"However, this specification has not yet been defined and it is not supported "
"by the toolchain at this time."
msgstr ""

#: src/cairo/migration.md:3
msgid "[0.2.0 -> 0.3.0](./migration/0.3.0.md)"
msgstr ""

#: src/cairo/migration/0.3.0.md:1
msgid "Migration Guide to 0.3.0"
msgstr ""

#: src/cairo/migration/0.3.0.md:3
msgid ""
"0.3.0 introduced some breaking changes to Systems and Models which requires "
"reworking of your worlds."
msgstr ""

#: src/cairo/migration/0.3.0.md:5
msgid "[Components](#components-to-models)"
msgstr ""

#: src/cairo/migration/0.3.0.md:6
msgid "[Systems](#systems-update)"
msgstr ""

#: src/cairo/migration/0.3.0.md:7
msgid "[Events](#events)"
msgstr ""

#: src/cairo/migration/0.3.0.md:8
msgid "[Npm](#npm)"
msgstr ""

#: src/cairo/migration/0.3.0.md:10
msgid "Components to Models"
msgstr ""

#: src/cairo/migration/0.3.0.md:12
msgid ""
"In version 0.3.0, \"components\" have been renamed to \"models\". This has "
"been done due to Cairo introducing the concept of Components natively."
msgstr ""

#: src/cairo/migration/0.3.0.md:14
msgid "You must:"
msgstr ""

#: src/cairo/migration/0.3.0.md:16
msgid "Replace `#[component]` with `#[model]`."
msgstr ""

#: src/cairo/migration/0.3.0.md:17
msgid "Update `#[derive(Component)]` to `#[derive(Model)]` throughout your code."
msgstr ""

#: src/cairo/migration/0.3.0.md:19
msgid "**Note**: Ensure all related files and imports are updated accordingly."
msgstr ""

#: src/cairo/migration/0.3.0.md:21
msgid "Changes in Model Implementation"
msgstr ""

#: src/cairo/migration/0.3.0.md:23
msgid ""
"The trait `SerdeLen` is no longer implemented for models. If you relied on "
"this previously, you should now use `SchemaIntrospection`."
msgstr ""

#: src/cairo/migration/0.3.0.md:25
msgid "Schema Introduction"
msgstr ""

#: src/cairo/migration/0.3.0.md:74
msgid "**Key Takeaways from custom types**:"
msgstr ""

#: src/cairo/migration/0.3.0.md:76
msgid "**size**: Defines the byte size of the type."
msgstr ""

#: src/cairo/migration/0.3.0.md:77
msgid ""
"**layout**: Outlines the byte structure/layout for the type. Validate and "
"adjust as necessary."
msgstr ""

#: src/cairo/migration/0.3.0.md:78
msgid ""
"**ty**: Details the specific type, attributes, and subcomponents. For enums, "
"like `Roles`, you need to specify each member and its type."
msgstr ""

#: src/cairo/migration/0.3.0.md:80
msgid "Systems Update"
msgstr ""

#: src/cairo/migration/0.3.0.md:82
msgid ""
"Systems in 0.3.0 are very similar now to Cairo Contracts. You can write your "
"systems just like regular contracts, and each dojo contract can contain "
"mulitple systems."
msgstr ""

#: src/cairo/migration/0.3.0.md:84
msgid "Important high level changes:"
msgstr ""

#: src/cairo/migration/0.3.0.md:85
msgid "Systems are now starknet contracts"
msgstr ""

#: src/cairo/migration/0.3.0.md:86
msgid "Define [Interfaces](#interface-creation) for each system contract"
msgstr ""

#: src/cairo/migration/0.3.0.md:87
msgid "New optional `#[dojo::contract]` decorator defining systems"
msgstr ""

#: src/cairo/migration/0.3.0.md:88
msgid "Multiple systems per dojo contract, rather than singular"
msgstr ""

#: src/cairo/migration/0.3.0.md:89
msgid "`execute` is no longer required system selector name"
msgstr ""

#: src/cairo/migration/0.3.0.md:92
msgid "Interface Creation"
msgstr ""

#: src/cairo/migration/0.3.0.md:94
msgid ""
"System management has been revamped. Start by defining an interface for each "
"system, which specifies its implementation:"
msgstr ""

#: src/cairo/migration/0.3.0.md:112
msgid "Ensure the trait is typed with `TContractState`."
msgstr ""

#: src/cairo/migration/0.3.0.md:114
msgid ""
"**Note**: Earlier versions required functions within the system to be named "
"`execute`. This is no longer the case."
msgstr ""

#: src/cairo/migration/0.3.0.md:116
msgid "Interface Implementation"
msgstr ""

#: src/cairo/migration/0.3.0.md:118
msgid "To implement the interface:"
msgstr ""

#: src/cairo/migration/0.3.0.md:120
msgid "Add `#[external(v0)]` before each method."
msgstr ""

#: src/cairo/migration/0.3.0.md:121
msgid ""
"Ensure to reference the created interface in the module with `use "
"super::ICreateCard;`."
msgstr ""

#: src/cairo/migration/0.3.0.md:136
msgid "// your logic here\n"
msgstr ""

#: src/cairo/migration/0.3.0.md:141
msgid ""
"This then allows the `create_card` to be called just like a regular starknet "
"function."
msgstr ""

#: src/cairo/migration/0.3.0.md:143
msgid "`#[dojo::contract]` decorator"
msgstr ""

#: src/cairo/migration/0.3.0.md:145
msgid ""
"0.3.0 introduces a new optional decorator `#[dojo::contract]` which "
"indicates to the compiler to inject imports and the world dispatcher. This "
"allows for minimal boilerplate."
msgstr ""

#: src/cairo/migration/0.3.0.md:156
msgid ""
"Events should now reside within the models. Here's an example of how to "
"migrate your events:"
msgstr ""

#: src/cairo/migration/0.3.0.md:158
msgid "**Previous Format**:"
msgstr ""

#: src/cairo/migration/0.3.0.md:167
msgid "**New Format**:"
msgstr ""

#: src/cairo/migration/0.3.0.md:182
msgid "Testing Changes"
msgstr ""

#: src/cairo/migration/0.3.0.md:184
msgid "Setup"
msgstr ""

#: src/cairo/migration/0.3.0.md:186
msgid ""
"Testing has seen significant changes with the change to systems as "
"Contracts. Instead of using `world.execute`, use the dispatcher."
msgstr ""

#: src/cairo/migration/0.3.0.md:188
msgid "Import necessary modules and traits:"
msgstr ""

#: src/cairo/migration/0.3.0.md:195
msgid "Deploy the contract and instantiate the dispatcher:"
msgstr ""

#: src/cairo/migration/0.3.0.md:204
msgid "Function Testing"
msgstr ""

#: src/cairo/migration/0.3.0.md:206
msgid ""
"With the contract deployed and the dispatcher instantiated, proceed to test "
"your functions:"
msgstr ""

#: src/cairo/migration/0.3.0.md:209
msgid "// ... (previous setup code)\n"
msgstr ""

#: src/cairo/migration/0.3.0.md:212
msgid "// ... provide necessary parameters here\n"
msgstr ""

#: src/cairo/migration/0.3.0.md:214
msgid "// Assert or validate the 'result' as per your test conditions\n"
msgstr ""

#: src/cairo/hello-dojo.md:1
msgid "Hello Dojo"
msgstr ""

#: src/cairo/hello-dojo.md:3
msgid ""
"This section assumes that you have already installed the Dojo toolchain and "
"are familiar with Cairo. If not, please refer to the [Getting "
"Started](../getting-started/quick-start.md) section."
msgstr ""

#: src/cairo/hello-dojo.md:5
msgid "Dojo as an ECS in 15 Minutes"
msgstr ""

#: src/cairo/hello-dojo.md:7
msgid ""
"Although Dojo isn't exclusively an Entity Component System (ECS) framework, "
"we recommend adopting this robust design pattern. In this context, systems "
"shape the environment's logic, while components ([models](./models.md)) "
"mirror the state of the world. By taking this route, you'll benefit from a "
"structured and modular framework that promises both flexibility and "
"scalability in a continuously evolving world. If this seems a bit intricate "
"at first, hang tight; we'll delve into the details shortly."
msgstr ""

#: src/cairo/hello-dojo.md:9
msgid ""
"To start, let's set up a project to run locally on your machine. From an "
"empty directory, execute:"
msgstr ""

#: src/cairo/hello-dojo.md:15
msgid ""
"Congratulations! You now have a local Dojo project. This command creates a "
"`dojo-starter` project in your current directory. It's the ideal starting "
"point for a new project and equips you with everything you need to begin."
msgstr ""

#: src/cairo/hello-dojo.md:17
msgid "Anatomy of a Dojo Project"
msgstr ""

#: src/cairo/hello-dojo.md:19
msgid ""
"Inspect the contents of the `dojo-starter` project, and you'll notice the "
"following structure (excluding the non-Cairo files):"
msgstr ""

#: src/cairo/hello-dojo.md:30
msgid ""
"Dojo projects bear a strong resemblance to typical Cairo projects. The "
"primary difference is the inclusion of a special attribute tag used to "
"define your data models. In this context, we'll refer to these models as "
"components."
msgstr ""

#: src/cairo/hello-dojo.md:32
msgid ""
"As we're crafting an ECS, we'll adhere to the specific terminology "
"associated with Entity Component Systems."
msgstr ""

#: src/cairo/hello-dojo.md:34
msgid "Open the `src/models.cairo` file to continue."
msgstr ""

#: src/cairo/hello-dojo.md:61
msgid ""
"Notice the `#[derive(Model, Drop, Serde)]` attributes. For a model to be "
"recognized, we _must_ include `Model`. This signals to the Dojo compiler "
"that this struct should be treated as a model."
msgstr ""

#: src/cairo/hello-dojo.md:63
msgid ""
"Our `Moves` model houses a `player` field. At the same time, we have the "
"`#[key]` attribute, it informs Dojo that this model is indexed by the "
"`player` field. If this is unfamiliar to you, we'll clarify its importance "
"later in the chapter. Essentially, it implies that you can query this "
"component using the `player` field. Our `Moves` model also contains the "
"`remaining` and `last_direction` fields"
msgstr ""

#: src/cairo/hello-dojo.md:65
msgid ""
"In a similar vein, we have a `Position` component that have a Vec2 data "
"structure. Vec holds `x` and `y` values. Once again, this component is "
"indexed by the `player` field."
msgstr ""

#: src/cairo/hello-dojo.md:67
msgid "Now, let's examine the `src/actions.cairo` file:"
msgstr ""

#: src/cairo/hello-dojo.md:70
msgid "// dojo decorator\n"
msgstr ""

#: src/cairo/hello-dojo.md:78 src/cairo/hello-dojo.md:85
msgid "// declaring custom event struct\n"
msgstr ""

#: src/cairo/hello-dojo.md:100 src/cairo/hello-dojo.md:130
msgid ""
"// Get the address of the current caller, possibly the player's address.\n"
msgstr ""

#: src/cairo/hello-dojo.md:103 src/cairo/hello-dojo.md:162
msgid "// Retrieve the player's current position from the world.\n"
msgstr ""

#: src/cairo/hello-dojo.md:106 src/cairo/hello-dojo.md:164
msgid ""
"// Retrieve the player's move data, e.g., how many moves they have left.\n"
msgstr ""

#: src/cairo/hello-dojo.md:109
msgid ""
"// Update the world state with the new data.\n"
"            // 1. Increase the player's remaining moves by 10.\n"
"            // 2. Move the player's position 10 units in both the x and y "
"direction.\n"
msgstr ""

#: src/cairo/hello-dojo.md:125
msgid "// Implementation of the move function for the ContractState struct.\n"
msgstr ""

#: src/cairo/hello-dojo.md:133
msgid ""
"// Retrieve the player's current position and moves data from the world.\n"
msgstr ""

#: src/cairo/hello-dojo.md:136
msgid "// Deduct one from the player's remaining moves.\n"
msgstr ""

#: src/cairo/hello-dojo.md:139
msgid "// Update the last direction the player moved in.\n"
msgstr ""

#: src/cairo/hello-dojo.md:142
msgid ""
"// Calculate the player's next position based on the provided direction.\n"
msgstr ""

#: src/cairo/hello-dojo.md:145
msgid "// Update the world state with the new moves data and position.\n"
msgstr ""

#: src/cairo/hello-dojo.md:148
msgid "// Emit an event to the world to notify about the player's move.\n"
msgstr ""

#: src/cairo/hello-dojo.md:159
msgid ""
"As you can see a `System` is like a dojo(starknet) contract. It imports the "
"Models we defined earlier and exposes two functions `spawn` and `move`. "
"These functions are called when a player spawns into the world and when they "
"move respectively."
msgstr ""

#: src/cairo/hello-dojo.md:169
msgid ""
"Here we use `get!` [command](./commands.md) to retrieve the `Position` and "
"`Moves` model for the `player` entity, which is the address of the caller."
msgstr ""

#: src/cairo/hello-dojo.md:171
msgid "Now the next line:"
msgstr ""

#: src/cairo/hello-dojo.md:174
msgid ""
"// Update the world state with the new data.\n"
"// 1. Increase the player's remaining moves by 10.\n"
"// 2. Move the player's position 10 units in both the x and y direction.\n"
msgstr ""

#: src/cairo/hello-dojo.md:190
msgid ""
"Here we use the `set!` [command](./commands.md) to set the `Moves` and "
"`Position` models for the `player` entity."
msgstr ""

#: src/cairo/hello-dojo.md:192
msgid "We covered a lot here in a short time. Let's recap:"
msgstr ""

#: src/cairo/hello-dojo.md:194
msgid "Explained the anatomy of a Dojo project"
msgstr ""

#: src/cairo/hello-dojo.md:195
msgid "Explained the importance of the `#[derive(Model)]`attribute"
msgstr ""

#: src/cairo/hello-dojo.md:196
msgid "Explained the `execute` function"
msgstr ""

#: src/cairo/hello-dojo.md:197
msgid "Explained the `Context` struct"
msgstr ""

#: src/cairo/hello-dojo.md:198
msgid "Touched on the `get!` and `set!` commands"
msgstr ""

#: src/cairo/hello-dojo.md:200
msgid "Run it locally!"
msgstr ""

#: src/cairo/hello-dojo.md:202
msgid ""
"Now that we've covered some theory, let's build the Dojo project! In your "
"primary terminal:"
msgstr ""

#: src/cairo/hello-dojo.md:208
msgid ""
"That compiled the components and system into an artifact that can be "
"deployed! Simple as that!"
msgstr ""

#: src/cairo/hello-dojo.md:210
msgid ""
"Now, let's deploy it to [Katana](../toolchain/katana/overview.md)! First, we "
"need to get Katana running. Open a second terminal and execute:"
msgstr ""

#: src/cairo/hello-dojo.md:216
msgid ""
"Success! [Katana](../toolchain/katana/overview.md) should now be running "
"locally on your machine. Now, let's deploy! In your primary terminal, "
"execute:"
msgstr ""

#: src/cairo/hello-dojo.md:222
msgid ""
"This will deploy the artifact to [Katana](../toolchain/katana/overview.md). "
"You should see terminal output similar to this:"
msgstr ""

#: src/cairo/hello-dojo.md:236
msgid "# Executor\n"
msgstr ""

#: src/cairo/hello-dojo.md:238
msgid "# Base Contract\n"
msgstr ""

#: src/cairo/hello-dojo.md:240
msgid "# World\n"
msgstr ""

#: src/cairo/hello-dojo.md:242
msgid "# Models (2)\n"
msgstr ""

#: src/cairo/hello-dojo.md:248 src/cairo/hello-dojo.md:353
msgid "# Contracts (1)\n"
msgstr ""

#: src/cairo/hello-dojo.md:261
msgid ""
"Your 🌎 is now deployed at "
"`0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973`!"
msgstr ""

#: src/cairo/hello-dojo.md:263
msgid "This establishes the world address for your project."
msgstr ""

#: src/cairo/hello-dojo.md:265
msgid ""
"Let's discuss the `Scarb.toml` file in the project. This file contains "
"environment variables that make running CLI commands in your project a "
"breeze. (Read more about it [here](./config.md)). Make sure your file "
"specifies the version of Dojo you have installed!. In this case version "
"`0.3.10`"
msgstr ""

#: src/cairo/hello-dojo.md:267
msgid ""
"```toml\n"
"[dependencies]\n"
"dojo = { git = \"https://github.com/dojoengine/dojo\", version = \"0.3.13\" "
"}\n"
"```"
msgstr ""

#: src/cairo/hello-dojo.md:272
msgid "Indexing"
msgstr ""

#: src/cairo/hello-dojo.md:274
msgid ""
"With your local world address established, let's delve into indexing. You "
"can index the entire world. To accomplish this we have to copy your world "
"address from the output of `sozo migrate`. Now Open a new terminal and input "
"this simple command that includes your own world address:"
msgstr ""

#: src/cairo/hello-dojo.md:280
msgid ""
"Running the command mentioned above starts a Torii server on your local "
"machine. This server uses SQLite as its database and is accessible at "
"http://0.0.0.0:8080/graphql. Torii will automatically organize your data "
"into tables, making it easy for you to perform queries using GraphQL. When "
"you run the command, you'll see terminal output that looks something like "
"this:"
msgstr ""

#: src/cairo/hello-dojo.md:302
msgid ""
"You can observe that our `Moves` and `Position` models have been "
"successfully registered. Next, let's use the GraphiQL IDE to retrieve data "
"from the `Moves` model. In your web browser, navigate to "
"`http://0.0.0.0:8080/graphql`, and enter the following query:"
msgstr ""

#: src/cairo/hello-dojo.md:305
msgid ""
"```graphql\n"
"query {\n"
"  model(id: \"Moves\") {\n"
"    id\n"
"    name\n"
"    class_hash\n"
"    transaction_hash\n"
"    created_at\n"
"  }\n"
"}\n"
"```"
msgstr ""

#: src/cairo/hello-dojo.md:317 src/toolchain/torii/graphql.md:49
#: src/toolchain/torii/graphql.md:81
msgid "After you run the query, you will receive an output like this:"
msgstr ""

#: src/cairo/hello-dojo.md:321 src/cairo/hello-dojo.md:370
#: src/cairo/hello-dojo.md:385 src/toolchain/torii/graphql.md:53
#: src/toolchain/torii/graphql.md:85 src/toolchain/torii/graphql.md:124
#: src/toolchain/torii/graphql.md:321 src/toolchain/torii/graphql.md:368
#: src/toolchain/torii/graphql.md:374 src/toolchain/torii/graphql.md:389
#: src/toolchain/torii/graphql.md:395
msgid "\"data\""
msgstr ""

#: src/cairo/hello-dojo.md:322 src/toolchain/torii/graphql.md:54
msgid "\"model\""
msgstr ""

#: src/cairo/hello-dojo.md:323 src/cairo/hello-dojo.md:372
#: src/cairo/hello-dojo.md:387 src/toolchain/torii/graphql.md:55
#: src/toolchain/torii/graphql.md:129 src/toolchain/torii/graphql.md:146
#: src/toolchain/torii/graphql.md:167 src/toolchain/torii/graphql.md:323
#: src/toolchain/torii/graphql.md:370 src/toolchain/torii/graphql.md:391
msgid "\"id\""
msgstr ""

#: src/cairo/hello-dojo.md:323 src/cairo/hello-dojo.md:324
#: src/cairo/hello-dojo.md:376 src/toolchain/torii/graphql.md:333
msgid "\"Moves\""
msgstr ""

#: src/cairo/hello-dojo.md:324 src/toolchain/torii/graphql.md:56
msgid "\"name\""
msgstr ""

#: src/cairo/hello-dojo.md:325 src/toolchain/torii/graphql.md:57
msgid "\"class_hash\""
msgstr ""

#: src/cairo/hello-dojo.md:325
msgid "\"0xb37482a660983dfbf65968caa26eab260d3e1077986454b52ac06e58ae20c4\""
msgstr ""

#: src/cairo/hello-dojo.md:326 src/toolchain/torii/graphql.md:130
#: src/toolchain/torii/graphql.md:147 src/toolchain/torii/graphql.md:168
#: src/toolchain/torii/graphql.md:383 src/toolchain/torii/graphql.md:404
msgid "\"transaction_hash\""
msgstr ""

#: src/cairo/hello-dojo.md:326
msgid "\"\""
msgstr ""

#: src/cairo/hello-dojo.md:327 src/cairo/hello-dojo.md:378
#: src/cairo/hello-dojo.md:393 src/toolchain/torii/graphql.md:329
msgid "\"created_at\""
msgstr ""

#: src/cairo/hello-dojo.md:327
msgid "\"2023-10-18 06:49:48\""
msgstr ""

#: src/cairo/hello-dojo.md:333
msgid ""
"Awesome, now let's work with subscriptions to get real-time updates. Let's "
"clean up your workspace on the GraphiQL IDE and input the following "
"subscription:"
msgstr ""

#: src/cairo/hello-dojo.md:348
msgid ""
"Once you execute the subscription, you will receive notifications whenever "
"new entities are updated or created. For now, don't make any changes to it "
"and proceed to create a new entity."
msgstr ""

#: src/cairo/hello-dojo.md:350
msgid ""
"To accomplish this, we have to go back to our primary terminal and check the "
"contracts section."
msgstr ""

#: src/cairo/hello-dojo.md:358
msgid ""
"We have to use `actions` contract address to start to create entities. In "
"your main local terminal, run the following command:"
msgstr ""

#: src/cairo/hello-dojo.md:364
msgid ""
"By running this command, you've activated the spawn system, resulting in the "
"creation of a new entity. This action establishes a local world that you can "
"interact with."
msgstr ""

#: src/cairo/hello-dojo.md:366
msgid ""
"Now, go back to your GraphiQL IDE, and you will notice that you have "
"received the subscription's results, which should look something like this:"
msgstr ""

#: src/cairo/hello-dojo.md:371 src/cairo/hello-dojo.md:386
#: src/toolchain/torii/graphql.md:322
msgid "\"entityUpdated\""
msgstr ""

#: src/cairo/hello-dojo.md:372 src/cairo/hello-dojo.md:387
#: src/toolchain/torii/graphql.md:323
msgid "\"0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20\""
msgstr ""

#: src/cairo/hello-dojo.md:373 src/cairo/hello-dojo.md:388
#: src/toolchain/torii/graphql.md:324 src/toolchain/torii/graphql.md:371
#: src/toolchain/torii/graphql.md:392
msgid "\"keys\""
msgstr ""

#: src/cairo/hello-dojo.md:374 src/cairo/hello-dojo.md:389
#: src/toolchain/sozo/common-options/profile.md:22
#: src/toolchain/torii/graphql.md:90 src/toolchain/torii/graphql.md:131
#: src/toolchain/torii/graphql.md:148 src/toolchain/torii/graphql.md:169
#: src/toolchain/torii/graphql.md:325 src/toolchain/torii/graphql.md:335
#: src/toolchain/torii/graphql.md:377 src/toolchain/torii/graphql.md:398
msgid "\"0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973\""
msgstr ""

#: src/cairo/hello-dojo.md:376 src/cairo/hello-dojo.md:391
#: src/toolchain/torii/graphql.md:327
msgid "\"model_names\""
msgstr ""

#: src/cairo/hello-dojo.md:377 src/cairo/hello-dojo.md:392
#: src/toolchain/torii/graphql.md:328
msgid "\"event_id\""
msgstr ""

#: src/cairo/hello-dojo.md:377 src/toolchain/torii/graphql.md:370
msgid ""
"\"0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0000\""
msgstr ""

#: src/cairo/hello-dojo.md:378 src/cairo/hello-dojo.md:379
#: src/cairo/hello-dojo.md:393 src/cairo/hello-dojo.md:394
msgid "\"2023-10-18 06:53:12\""
msgstr ""

#: src/cairo/hello-dojo.md:379 src/cairo/hello-dojo.md:394
#: src/toolchain/torii/graphql.md:330
msgid "\"updated_at\""
msgstr ""

#: src/cairo/hello-dojo.md:391 src/toolchain/torii/graphql.md:327
msgid "\"Moves,Position\""
msgstr ""

#: src/cairo/hello-dojo.md:392 src/toolchain/torii/graphql.md:391
msgid ""
"\"0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0001\""
msgstr ""

#: src/cairo/hello-dojo.md:400
msgid ""
"In the GraphiQL IDE, by clicking the `DOCS`\\-button on the right, you can "
"open the API documentation. This documentation is auto-generated based on "
"our schema definition and displays all API operations and data types of our "
"schema.. In order to know more about query and subscription, you can jump to "
"[GraphQL](../toolchain/torii/graphql.md) section. We've covered quite a bit! "
"Here's a recap:"
msgstr ""

#: src/cairo/hello-dojo.md:403
msgid "Built a Dojo world"
msgstr ""

#: src/cairo/hello-dojo.md:404
msgid "Deployed the project to Katana"
msgstr ""

#: src/cairo/hello-dojo.md:405
msgid "Indexed the world with Torii"
msgstr ""

#: src/cairo/hello-dojo.md:406
msgid "Ran the spawn system locally"
msgstr ""

#: src/cairo/hello-dojo.md:407
msgid "Interacted with GraphQL"
msgstr ""

#: src/cairo/hello-dojo.md:409
msgid "Next Steps"
msgstr ""

#: src/cairo/hello-dojo.md:411
msgid ""
"This overview provides a rapid end-to-end glimpse into Dojo. However, the "
"potential of these worlds is vast! Designed to manage hundreds of systems "
"and components, Dojo is equipped for expansive creativity. So, what will you "
"craft next?"
msgstr ""

#: src/cairo/entities.md:3
msgid ""
"Entities are the primary key value within the world, to which models can be "
"attached."
msgstr ""

#: src/cairo/entities.md:5
msgid ""
"Different ECS systems handle entities in various ways. In Dojo, entities are "
"treated as a primary key value within the world, to which models can be "
"attached. To illustrate this concept, consider a simple example of a "
"character in a game that has a `Moves` and a `Position` model."
msgstr ""

#: src/cairo/entities.md:7
msgid ""
"When defining the models for this entity, it is important to note that we do "
"not reference the entity directly. Instead, we simply provide two structs "
"that the entity will contain. "
msgstr ""

#: src/cairo/entities.md:26
msgid ""
"ECS Theory: Plenty has been written on ECS systems, to go deeper read "
"[ECS-FAQ](https://github.com/SanderMertens/ecs-faq)"
msgstr ""

#: src/cairo/testing.md:3
msgid ""
"Testing is a crucial part of any software development process. Dojo provides "
"a testing framework that allows you to write tests for your smart contracts. "
"Since Dojo uses a custom compiler, you need to use `sozo` to test your "
"contracts."
msgstr ""

#: src/cairo/testing.md:5
msgid "From your project directory, simply:"
msgstr ""

#: src/cairo/testing.md:11
msgid "This will search for all tests within your project and run them."
msgstr ""

#: src/cairo/testing.md:14
msgid "Writing Unit Tests"
msgstr ""

#: src/cairo/testing.md:16
msgid ""
"It is best practise to include unit tests in the same file as the "
"model/System you are writing."
msgstr ""

#: src/cairo/testing.md:18
msgid ""
"Lets show a `model` test example from the "
"[dojo-starter](https://github.com/dojoengine/dojo-starter):"
msgstr ""

#: src/cairo/testing.md:20
msgid "`models.cairo`"
msgstr ""

#: src/cairo/testing.md:23
msgid "//rest of code\n"
msgstr ""

#: src/cairo/testing.md:44
msgid ""
"In this test we are testing the `is_zero` and `is_equal` functions of the "
"`Position` model. It is good practise to test all functions of your models."
msgstr ""

#: src/cairo/testing.md:47
msgid "Writing Integration Tests"
msgstr ""

#: src/cairo/testing.md:49
msgid ""
"Integration tests are e2e tests that test the entire system. You can write "
"integration tests for your world by creating a `tests` directory in your "
"project root. Then create a file for each integration test you want to write."
msgstr ""

#: src/cairo/testing.md:51
msgid ""
"This is the example from the "
"[dojo-starter](https://github.com/dojoengine/dojo-starter):"
msgstr ""

#: src/cairo/testing.md:53
msgid "`move.cairo`"
msgstr ""

#: src/cairo/testing.md:64 src/tutorial/onchain-chess/1-action.md:177
msgid ""
"// helper setup function\n"
"    // reusable function for tests\n"
msgstr ""

#: src/cairo/testing.md:67
msgid "// components\n"
msgstr ""

#: src/cairo/testing.md:70 src/tutorial/onchain-chess/1-action.md:184
#: src/tutorial/onchain-chess/2-legal.md:116
msgid "// deploy world with models\n"
msgstr ""

#: src/cairo/testing.md:73 src/tutorial/onchain-chess/1-action.md:187
#: src/tutorial/onchain-chess/2-legal.md:119
msgid "// deploy systems contract\n"
msgstr ""

#: src/cairo/testing.md:85
msgid "// caller\n"
msgstr ""

#: src/cairo/testing.md:90
msgid "// System calls\n"
msgstr ""

#: src/cairo/testing.md:94
msgid "// check moves\n"
msgstr ""

#: src/cairo/testing.md:98
msgid "// get new_position\n"
msgstr ""

#: src/cairo/testing.md:101
msgid "// check new position x\n"
msgstr ""

#: src/cairo/testing.md:104
msgid "// check new position y\n"
msgstr ""

#: src/cairo/testing.md:110
msgid "Useful Dojo Test Functions"
msgstr ""

#: src/cairo/testing.md:112
msgid ""
"`spawn_test_world(models)` - This function will create a test world with the "
"models and systems you pass in. It will also deploy the world and register "
"the models and systems."
msgstr ""

#: src/cairo/modules.md:1
msgid "Dojo Modules"
msgstr ""

#: src/cairo/modules.md:3
msgid ""
"With standardization of Systems and Components we can create a module "
"architecture for Dojo. This allows us to create reusable modules that can be "
"used in any Dojo world."
msgstr ""

#: src/cairo/modules.md:5
msgid "Module Architecture"
msgstr ""

#: src/cairo/modules.md:7
msgid ""
"Think of modules as ERCs for Dojo. They are a standard way to create and "
"share functionality. Modules are a collection of Systems and Components that "
"can be imported into a Dojo world. Dojo is following the ERC patterns and "
"has modules already defined for ERC20, ERC721, and ERC1155."
msgstr ""

#: src/cairo/modules/erc20.md:3
msgid ""
"Dojo's ERC20 module is a standard implementation of the ERC20 token "
"standard, but it utilizes Dojo Systems and Components. This allows us to "
"leverage the excellent properties of the ERC20 standard and use it natively "
"within the Dojo environment."
msgstr ""

#: src/cairo/modules/erc20.md:5
msgid "Integration into Your World"
msgstr ""

#: src/cairo/modules/erc20.md:7
msgid ""
"To integrate the ERC20 module into your world, you must first deploy the "
"ERC20 Dojo contract. Subsequently, install the systems and components into "
"your world."
msgstr ""

#: src/client/overview.md:3
msgid ""
"Dojo is BYO client, meaning that you can use any client you want to connect "
"to the Dojo network."
msgstr ""

#: src/client/overview.md:5
msgid "[npm](./npm.md)"
msgstr ""

#: src/client/overview.md:6
msgid "[torii](torii.md)"
msgstr ""

#: src/client/overview.md:8
msgid ""
"Dojo is always looking to expand these clients, if you would like to "
"contribute reach out into the [Discord](https://discord.gg/KG9w9BmDrV) "
msgstr ""

#: src/client/npm.md:1
msgid "Javascript Libraries"
msgstr ""

#: src/client/npm.md:3
msgid ""
"Javascript is a great way to get started with Dojo. It's easy to use, and "
"you can get started in minutes."
msgstr ""

#: src/client/npm.md:5
msgid "Examples using these:"
msgstr ""

#: src/client/npm.md:7
msgid ""
"[Dojo-create-react-app](https://github.com/dojoengine/dojo-starter-react-app)"
msgstr ""

#: src/client/npm.md:8
msgid "[Dojo-starter-phaser](https://github.com/dojoengine/dojo-starter-phaser)"
msgstr ""

#: src/client/npm.md:10
msgid "@dojoengine/core"
msgstr ""

#: src/client/npm.md:12
msgid ""
"This is the lowest level library, and is used by all other downstream "
"libraries. It contains the core functionality of Dojo and exposes the "
"contract interfaces. Use it if you want to build your own library on top of "
"Dojo."
msgstr ""

#: src/client/npm.md:14
msgid ""
"[Repository](https://github.com/dojoengine/packages/tree/main/packages/core)"
msgstr ""

#: src/client/npm.md:20
msgid "@dojoengine/create-burner"
msgstr ""

#: src/client/npm.md:22
msgid ""
"Create burner is a simple way to incorporate burner wallets into your Dojo "
"app."
msgstr ""

#: src/client/npm.md:24
msgid ""
"[Repository](https://github.com/dojoengine/packages/tree/main/packages/create-burner)"
msgstr ""

#: src/client/npm.md:30
msgid "@dojoengine/utils"
msgstr ""

#: src/client/npm.md:32
msgid "These are utils for helping with interfacing dojo."
msgstr ""

#: src/client/npm.md:34
msgid ""
"[Reopsitory](https://github.com/dojoengine/packages/tree/main/packages/utils)"
msgstr ""

#: src/client/torii.md:1
msgid "Torii Client"
msgstr ""

#: src/client/torii.md:3
msgid ""
"Torii client is a rust client for interacting with Dojo worlds. It can be "
"compiled to wasm to be used in JS clients, or can used directly in Rust "
"clients or other lower level languages with bindings."
msgstr ""

#: src/client/torii.md:5
msgid "Usage in Rust projects"
msgstr ""

#: src/client/torii.md:7
msgid "**@kairy**"
msgstr ""

#: src/client/torii.md:9
msgid "Usage in JS Clients"
msgstr ""

#: src/toolchain/dojoup.md:1
msgid "`dojoup`"
msgstr ""

#: src/toolchain/dojoup.md:3
msgid "Update or revert to a specific Dojo branch with ease."
msgstr ""

#: src/toolchain/dojoup.md:5
msgid "Installing"
msgstr ""

#: src/toolchain/dojoup.md:11 src/toolchain/katana/overview.md:27
#: src/toolchain/torii/overview.md:5 src/toolchain/slot/reference.md:7
msgid "Usage"
msgstr ""

#: src/toolchain/dojoup.md:13
msgid "To install latest **stable** version:"
msgstr ""

#: src/toolchain/dojoup.md:18
msgid ""
"Note: You may have to install `jq` to use `dojoup`. You can do so with the "
"following commands:"
msgstr ""

#: src/toolchain/dojoup.md:21
msgid "# Debian\n"
msgstr ""

#: src/toolchain/dojoup.md:23
msgid "# Mac\n"
msgstr ""

#: src/toolchain/dojoup.md:28
msgid "To install a specific **version** (in this case the `nightly` version):"
msgstr ""

#: src/toolchain/dojoup.md:34
msgid ""
"To install a specific **branch** (in this case the `release/0.1.0` branch's "
"latest commit):"
msgstr ""

#: src/toolchain/dojoup.md:40
msgid ""
"To install a **fork's main branch** (in this case `tarrencev/dojo`'s main "
"branch):"
msgstr ""

#: src/toolchain/dojoup.md:46
msgid ""
"To install a **specific branch in a fork** (in this case the `patch-10` "
"branch's latest commit in `tarrencev/dojo`):"
msgstr ""

#: src/toolchain/dojoup.md:52
msgid "To install from a **specific Pull Request**:"
msgstr ""

#: src/toolchain/dojoup.md:58
msgid "To install from a **specific commit**:"
msgstr ""

#: src/toolchain/dojoup.md:64
msgid ""
"To install a local directory or repository (e.g. one located at "
"`~/git/dojo`, assuming you're in the home directory)"
msgstr ""

#: src/toolchain/dojoup.md:66
msgid ""
"Note: --branch, --repo, and --version flags are ignored during local "
"installations."
msgstr ""

#: src/toolchain/dojoup.md:74
msgid ""
"**Tip**: All flags have a single character shorthand equivalent! You can use "
"`-v` instead of `--version`, etc."
msgstr ""

#: src/toolchain/dojoup.md:78
msgid "Precompiled binaries"
msgstr ""

#: src/toolchain/dojoup.md:80
msgid ""
"Precompiled binaries are available from the [GitHub releases "
"page](https://github.com/dojoengine/dojo/releases). These are better managed "
"by using [Dojoup](#using-dojoup)."
msgstr ""

#: src/toolchain/dojoup.md:84
msgid "ℹ️ **Note**"
msgstr ""

#: src/toolchain/dojoup.md:86
msgid ""
"If you're on Windows, you will need to install and use [Git "
"BASH](https://gitforwindows.org/) or "
"[WSL](https://learn.microsoft.com/en-us/windows/wsl/install), as your "
"terminal, since Dojoup currently does not support Powershell or Cmd."
msgstr ""

#: src/toolchain/sozo/overview.md:3
msgid ""
"`sozo` is a powerful all-in-one tool for managing your Dojo projects. It "
"helps with everything from scaffolding a new project, all the way to "
"deploying and interacting with your Dojo Worlds. It includes a migration "
"planning tool, designed to streamline the updating and deployment of AWs. It "
"provides a robust command-line interface (CLI) that simplifies World "
"management tasks, enabling you to focus on the creative aspects of "
"World-building. In the future, it may include a GUI."
msgstr ""

#: src/toolchain/sozo/overview.md:5 src/toolchain/katana/overview.md:9
msgid "Features"
msgstr ""

#: src/toolchain/sozo/overview.md:7
msgid ""
"**Binary CLI**: Sozo provides an intuitive binary CLI, ensuring easy "
"management of your Worlds, whether you're updating existing ones or "
"deploying new ones."
msgstr ""

#: src/toolchain/sozo/overview.md:9 src/toolchain/katana/overview.md:15
#: src/toolchain/torii/overview.md:15 src/toolchain/slot/overview.md:5
msgid "Installation"
msgstr ""

#: src/toolchain/sozo/overview.md:11
msgid ""
"`sozo` binary can be installed via "
"[`dojoup`](../../getting-started/quick-start.md), our dedicated installation "
"package manager."
msgstr ""

#: src/toolchain/sozo/overview.md:13 src/toolchain/torii/overview.md:19
msgid "Installing from Source"
msgstr ""

#: src/toolchain/sozo/overview.md:21
msgid ""
"This will install Sozo and the required dependencies on your local system."
msgstr ""

#: src/toolchain/sozo/overview.md:23 src/toolchain/katana/overview.md:69
#: src/toolchain/torii/overview.md:29 src/toolchain/slot/overview.md:19
msgid "📚 **Reference**"
msgstr ""

#: src/toolchain/sozo/overview.md:25
msgid ""
"See the [`sozo` Reference](./reference.md) for a complete overview of all "
"the available subcommands."
msgstr ""

#: src/toolchain/sozo/reference.md:1
msgid "sozo reference"
msgstr ""

#: src/toolchain/sozo/reference.md:3
msgid "Common options"
msgstr ""

#: src/toolchain/sozo/reference.md:5
msgid "[profile](./common-options/profile.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:6
msgid "[offline](./common-options/offline.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:8
msgid "Project Commands"
msgstr ""

#: src/toolchain/sozo/reference.md:10
msgid "[init](./project-commands/init.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:11
msgid "[build](./project-commands/build.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:12
msgid "[test](./project-commands/test.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:13
msgid "[migrate](./project-commands/migrate.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:15
msgid "World Commands"
msgstr ""

#: src/toolchain/sozo/reference.md:17
msgid "[execute](./world-commands/execute.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:18
msgid "[register](./world-commands/register.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:19
msgid "[system](./world-commands/system.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:20
msgid "[component](./world-commands/component.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:21
msgid "[events](./world-commands/events.md)"
msgstr ""

#: src/toolchain/sozo/reference.md:22
msgid "[auth](./world-commands/auth.md)"
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:1
msgid "use sozo profiles"
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:3
msgid ""
"Profiles can be convenient when dealing with multiple environments (dev, "
"staging, prod)"
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:5
msgid "`--profile`  \n    Specify profile to use by name."
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:8
msgid "`--dev`  \n    Use dev profile."
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:11
msgid "`--release`  \n    Use release profile."
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:15
#: src/toolchain/sozo/common-options/offline.md:8
#: src/toolchain/sozo/project-commands/migrate.md:7
#: src/toolchain/sozo/world-commands/execute.md:7
#: src/toolchain/sozo/world-commands/system.md:5
#: src/toolchain/sozo/world-commands/component.md:5
#: src/toolchain/katana/reference.md:7 src/toolchain/torii/reference.md:7
#: src/toolchain/torii/graphql.md:13
msgid "USAGE"
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:17
msgid "Multiple profiles can be defined in Scarb.toml"
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:21
msgid "\"http://localhost:5050\""
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:23
msgid "\"0x1800000000300000180000000000030000000000003006001800006600\""
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:26
msgid "\"https://api.cartridge.gg/x/mydojoproject/katana\""
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:27
msgid "\"0x5686a647a9cdd63ade617e0baf3b364856b813b508f03903eb58a7e622d5855\""
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:28
msgid "\"0x33003003001800009900180300d206308b0070db00121318d17b5e6262150b\""
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:31
msgid "Then used with sozo commands"
msgstr ""

#: src/toolchain/sozo/common-options/profile.md:37
msgid "is equivalent to "
msgstr ""

#: src/toolchain/sozo/common-options/offline.md:2
msgid "use sozo offline"
msgstr ""

#: src/toolchain/sozo/common-options/offline.md:4
msgid ""
"`--offline`  \n"
"    Run without accessing the network.  \n"
"    \\[env: SOZO_OFFLINE=\\]"
msgstr ""

#: src/toolchain/sozo/common-options/offline.md:14
msgid "For example "
msgstr ""

#: src/toolchain/sozo/project-commands/init.md:1
msgid "sozo init"
msgstr ""

#: src/toolchain/sozo/project-commands/init.md:3
msgid ""
"`init` is used to initialize a new project. It will initialize a new project "
"in the current directory by cloning the "
"[dojo-starter](https://github.com/dojoengine/dojo-starter)."
msgstr ""

#: src/toolchain/sozo/project-commands/build.md:1
msgid "sozo build"
msgstr ""

#: src/toolchain/sozo/project-commands/build.md:3
msgid ""
"`build` is used to compile the cairo contracts, generating the necessary "
"artifacts for deployment."
msgstr ""

#: src/toolchain/sozo/project-commands/test.md:1
msgid "sozo test"
msgstr ""

#: src/toolchain/sozo/project-commands/test.md:3
msgid ""
"`test` is used to test the project's cairo contracts. It will run all tests "
"found within the project."
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:1
msgid "sozo migrate"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:3
msgid ""
"`migrate` is used to perform the migration (deployment) process, declaring "
"and deploying contracts as necessary to deploy or update the World."
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:5
msgid ""
"Changes made to the local World after the initial deployment, can easily be "
"pushed to the remote counterpart by running `sozo migrate --world "
"<WORLD_ADDRESS>` with `WORLD_ADDRESS` being the address of the remote World. "
"In the background, `migrate` will compute the diffs of the local and remote "
"World, then, start constructing a migration strategy to determine, if any, "
"which part of the local World needs to be pushed upstream."
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:13
#: src/toolchain/sozo/world-commands/execute.md:13
#: src/toolchain/sozo/world-commands/system.md:43
#: src/toolchain/sozo/world-commands/component.md:61
#: src/toolchain/katana/reference.md:152 src/toolchain/torii/reference.md:33
msgid "OPTIONS"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:15
#: src/toolchain/sozo/world-commands/execute.md:15
#: src/toolchain/katana/reference.md:154 src/toolchain/torii/reference.md:35
msgid "General Options"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:17
msgid ""
"`--name` _NAME_  \n"
"    Name of the World. At the moment, the only usage for this option is to "
"be used as a salt when deploying the World contract to avoid address "
"conflicts. This option is **required** when performing the initial migration "
"of the World."
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:20
#: src/toolchain/sozo/world-commands/execute.md:21
#: src/toolchain/sozo/world-commands/system.md:45
#: src/toolchain/sozo/world-commands/component.md:63
msgid "World Options"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:22
#: src/toolchain/sozo/world-commands/execute.md:23
#: src/toolchain/sozo/world-commands/system.md:47
#: src/toolchain/sozo/world-commands/component.md:65
msgid ""
"`--world` _WORLD_ADDRESS_  \n"
"    The address of the World contract.  \n"
"    ENV: `DOJO_WORLD_ADDRESS`"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:26
#: src/toolchain/sozo/world-commands/execute.md:27
#: src/toolchain/sozo/world-commands/system.md:51
#: src/toolchain/sozo/world-commands/component.md:69
#: src/toolchain/katana/reference.md:198
msgid "Starknet Options"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:28
#: src/toolchain/sozo/world-commands/execute.md:29
#: src/toolchain/sozo/world-commands/system.md:53
#: src/toolchain/sozo/world-commands/component.md:71
msgid ""
"`--rpc-url` _URL_  \n"
"    The Starknet RPC endpoint. \\[default: http://localhost:5050\\]  \n"
"    ENV: `STARKNET_RPC_URL`"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:32
#: src/toolchain/sozo/world-commands/execute.md:33
msgid "Account Options"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:34
#: src/toolchain/sozo/world-commands/execute.md:35
msgid ""
"`--account-address` _ACCOUNT_ADDRESS_  \n"
"    The Starknet account address.  \n"
"    ENV: `DOJO_ACCOUNT_ADDRESS`"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:38
#: src/toolchain/sozo/world-commands/execute.md:39
msgid "Signer Options - Raw"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:40
#: src/toolchain/sozo/world-commands/execute.md:41
msgid ""
"`--private-key` _PRIVATE_KEY_  \n"
"    The raw private key associated with the account contract.  \n"
"    ENV: `DOJO_PRIVATE_KEY`"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:44
#: src/toolchain/sozo/world-commands/execute.md:45
msgid "Signer Options - Keystore"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:46
#: src/toolchain/sozo/world-commands/execute.md:47
msgid "`--keystore` _PATH_  \n    Use the keystore in the given folder or file."
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:49
#: src/toolchain/sozo/world-commands/execute.md:50
msgid ""
"`--password` _PASSWORD_  \n"
"    The keystore password. Used with --keystore.  \n"
"    ENV: `DOJO_KEYSTORE_PASSWORD`"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:53
#: src/toolchain/sozo/world-commands/execute.md:54
#: src/toolchain/sozo/world-commands/system.md:57
#: src/toolchain/katana/reference.md:237 src/toolchain/katana/reference.md:245
msgid "EXAMPLES"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:55
msgid "Deploying your World for the first time to a local Katana node"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:61
msgid "Updating a remote World after making some changes"
msgstr ""

#: src/toolchain/sozo/project-commands/migrate.md:67
msgid ""
"Deploying your World using [profile "
"options](../common-options/profile-options.md)"
msgstr ""

#: src/toolchain/sozo/world-commands/execute.md:1
msgid "sozo execute"
msgstr ""

#: src/toolchain/sozo/world-commands/execute.md:3
msgid "`execute` is used to execute a World's system."
msgstr ""

#: src/toolchain/sozo/world-commands/execute.md:5
msgid ""
"Performing a system execution requires sending a transaction, therefore, "
"`execute` expects an account address as well as its respective private key "
"in order to sign the transaction before sending it."
msgstr ""

#: src/toolchain/sozo/world-commands/execute.md:17
msgid ""
"`--calldata` _CALLDATA_  \n"
"    The calldata to be passed to the system that you want to execute.  \n"
"    Comma separated values e.g., 0x12345,0x69420."
msgstr ""

#: src/toolchain/sozo/world-commands/execute.md:56
msgid ""
"Executing the _position_ system which takes two values (_x_: 0x77 and _y_: "
"0x44)"
msgstr ""

#: src/toolchain/sozo/world-commands/register.md:1
msgid "sozo register"
msgstr ""

#: src/toolchain/sozo/world-commands/register.md:3
msgid "`register` is used to register new systems and components."
msgstr ""

#: src/toolchain/sozo/world-commands/register.md:17
msgid ""
"# example: component - register a component to a world\n"
"# this will register the Moves component to the world\n"
msgstr ""

#: src/toolchain/sozo/world-commands/register.md:20
msgid ""
"# example: system - register a system to a world\n"
"# this will register the spawn system to the world\n"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:1
msgid "sozo system"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:3
msgid ""
"`system` is used to interact with a World's systems. It is useful for "
"querying about a system's information."
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:15
#: src/toolchain/sozo/world-commands/component.md:16
msgid "SUBCOMMANDS"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:17
#: src/toolchain/sozo/world-commands/component.md:18
msgid "`get`"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:19
msgid "Get the class hash of a system"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:25
#: src/toolchain/sozo/world-commands/system.md:38
#: src/toolchain/sozo/world-commands/component.md:26
#: src/toolchain/sozo/world-commands/component.md:39
#: src/toolchain/sozo/world-commands/component.md:52
msgid "Arguments"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:27
#: src/toolchain/sozo/world-commands/system.md:40
msgid "_`NAME`_  \n    The name of the system"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:30
msgid "`dependency`"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:32
msgid "Retrieve the component dependencies of a system"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:59
msgid "Get the class hash of the _spawn_ system"
msgstr ""

#: src/toolchain/sozo/world-commands/system.md:65
msgid "Get the component dependencies of the _spawn_ system"
msgstr ""

#: src/toolchain/sozo/world-commands/component.md:1
msgid "sozo component"
msgstr ""

#: src/toolchain/sozo/world-commands/component.md:3
msgid ""
"`component` is used to interact with a World's components. It is useful for "
"querying about a component's information, or a component value of an entity."
msgstr ""

#: src/toolchain/sozo/world-commands/component.md:20
msgid "Get the class hash of a component"
msgstr ""

#: src/toolchain/sozo/world-commands/component.md:28
#: src/toolchain/sozo/world-commands/component.md:41
#: src/toolchain/sozo/world-commands/component.md:54
msgid "_`NAME`_  \n    The name of the component"
msgstr ""

#: src/toolchain/sozo/world-commands/component.md:31
msgid "`schema`"
msgstr ""

#: src/toolchain/sozo/world-commands/component.md:33
msgid "Retrieve the schema for a component"
msgstr ""

#: src/toolchain/sozo/world-commands/component.md:44
msgid "`entity`"
msgstr ""

#: src/toolchain/sozo/world-commands/component.md:46
msgid "Get the component value for an entity"
msgstr ""

#: src/toolchain/sozo/world-commands/component.md:57
msgid ""
"_`KEYS`_  \n"
"    The keys of the entity that you want to query.  \n"
"    Comma separated values e.g., 0x12345,0x69420,..."
msgstr ""

#: src/toolchain/sozo/world-commands/events.md:1
msgid "sozo events"
msgstr ""

#: src/toolchain/sozo/world-commands/events.md:3
msgid "`events` is used to queries world events."
msgstr ""

#: src/toolchain/sozo/world-commands/auth.md:1
msgid "sozo auth"
msgstr ""

#: src/toolchain/sozo/world-commands/auth.md:3
msgid "`auth` is used to manage world authorization."
msgstr ""

#: src/toolchain/sozo/world-commands/auth.md:16
msgid ""
"# example: writer - auth a system with the given calldata\n"
"# This will auth the spawn system with the writer role for Position "
"component\n"
msgstr ""

#: src/toolchain/katana/overview.md:3
msgid ""
"Katana is a _blazingly fast_ sequencer, designed to support both local "
"development as well as production deployments."
msgstr ""

#: src/toolchain/katana/overview.md:5
msgid ""
"In development mode, Katana provides the tool necessary for rapid iteration, "
"including custom development RPCs for manipulating the execution context."
msgstr ""

#: src/toolchain/katana/overview.md:7
msgid ""
"In produciton mode, Katana provides a high performance sequencer optimized "
"for gaming workloads, with support for settlment and cross layer "
"communication."
msgstr ""

#: src/toolchain/katana/overview.md:11
msgid ""
"[Starknet JSON-RPC "
"v0.3.0](https://github.com/starkware-libs/starknet-specs/tree/v0.3.0) support"
msgstr ""

#: src/toolchain/katana/overview.md:12
msgid "Cross layer communication (L1 \\<\\> L2, LN \\<\\> LN+1)"
msgstr ""

#: src/toolchain/katana/overview.md:13
msgid "Custom methods for manipulating the blockchain states"
msgstr ""

#: src/toolchain/katana/overview.md:17
msgid ""
"`katana` binary is available via "
"[`dojoup`](../../getting-started/quick-start.md)."
msgstr ""

#: src/toolchain/katana/overview.md:19
msgid "Installing from source"
msgstr ""

#: src/toolchain/katana/overview.md:33
msgid ""
"```console\n"
"\n"
"\n"
"██╗  ██╗ █████╗ ████████╗ █████╗ ███╗   ██╗ █████╗\n"
"██║ ██╔╝██╔══██╗╚══██╔══╝██╔══██╗████╗  ██║██╔══██╗\n"
"█████╔╝ ███████║   ██║   ███████║██╔██╗ ██║███████║\n"
"██╔═██╗ ██╔══██║   ██║   ██╔══██║██║╚██╗██║██╔══██║\n"
"██║  ██╗██║  ██║   ██║   ██║  ██║██║ ╚████║██║  ██║\n"
"╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝\n"
"\n"
"\n"
"\n"
"PREFUNDED ACCOUNTS\n"
"==================\n"
"\n"
"| Account address |  "
"0x3ee9e18edc71a6df30ac3aca2e0b02a198fbce19b7480a63a0d71cbd76652e0\n"
"| Private key     |  "
"0x300001800000000300000180000000000030000000000003006001800006600\n"
"| Public key      |  "
"0x1b7b37a580d91bc3ad4f9933ed61f3a395e0e51c9dd5553323b8ca3942bb44e\n"
"\n"
"| Account address |  "
"0x33c627a3e5213790e246a917770ce23d7e562baa5b4d2917c23b1be6d91961c\n"
"| Private key     |  "
"0x333803103001800039980190300d206608b0070db0012135bd1fb5f6282170b\n"
"| Public key      |  "
"0x4486e2308ef3513531042acb8ead377b887af16bd4cdd8149812dfef1ba924d\n"
"\n"
"\n"
"ACCOUNTS SEED\n"
"=============\n"
"0\n"
"\n"
"\n"
"🚀 JSON-RPC server started: http://0.0.0.0:5050\n"
"\n"
"\n"
"```"
msgstr ""

#: src/toolchain/katana/overview.md:67
msgid "To enable development features, run using the `--dev` flag."
msgstr ""

#: src/toolchain/katana/overview.md:71
msgid ""
"See the [`katana` Reference](./reference.md) for an in depth reference and "
"documentation on Katana."
msgstr ""

#: src/toolchain/katana/reference.md:1
msgid "katana reference"
msgstr ""

#: src/toolchain/katana/reference.md:3
msgid "NAME"
msgstr ""

#: src/toolchain/katana/reference.md:5
msgid ""
"katana - Create a local testnet node for deploying and testing Starknet "
"smart contracts."
msgstr ""

#: src/toolchain/katana/reference.md:13 src/toolchain/torii/reference.md:13
msgid "DESCRIPTION"
msgstr ""

#: src/toolchain/katana/reference.md:15
msgid ""
"Create a local testnet node for deploying and testing Starknet smart "
"contracts. Katana supports deployment and execution of the **new** as well "
"as the **legacy** (Cairo 0) Cairo contracts."
msgstr ""

#: src/toolchain/katana/reference.md:17
msgid ""
"This section covers an extensive list of information about Mining Modes, "
"Supported RPC Methods, Katana flags and their usages. You can run multiple "
"flags at the same time."
msgstr ""

#: src/toolchain/katana/reference.md:19
msgid "Mining Modes"
msgstr ""

#: src/toolchain/katana/reference.md:21
msgid ""
"In Katana, mining modes determine how frequent blocks are mined. By default, "
"a new block is automatically mined as soon as a transaction is submitted."
msgstr ""

#: src/toolchain/katana/reference.md:23
msgid ""
"You can switch from the default mining behaviour to interval mining, where a "
"new block is created at a fixed time interval selected by the user. To "
"enable this mode of mining, use the `--block-time <MILLISECONDS>` flag, as "
"demonstrated in the following example."
msgstr ""

#: src/toolchain/katana/reference.md:26
msgid "# Produces a new block every 10 seconds\n"
msgstr ""

#: src/toolchain/katana/reference.md:30
msgid "Forking"
msgstr ""

#: src/toolchain/katana/reference.md:32
msgid ""
"Katana supports forking from a Starknet RPC provider. You can configure your "
"node to enable the forking feature by providing a valid RPC provider using "
"the `--rpc-url <URL>` flag., which would initiate Katana to fork the latest "
"block of the provided network. If you would like to fork from a specific "
"block, you can do so using `--fork-block-number <BLOCK_NUMBER>`."
msgstr ""

#: src/toolchain/katana/reference.md:34
msgid ""
"NOTE: This does not allow fetching of historical blocks but only blocks that "
"are mined by Katana. However, support for fetching historical blocks will be "
"added in the future."
msgstr ""

#: src/toolchain/katana/reference.md:37
msgid "# Forks the network at block 1200\n"
msgstr ""

#: src/toolchain/katana/reference.md:41
msgid "Messaging"
msgstr ""

#: src/toolchain/katana/reference.md:43
msgid ""
"Katana also allows users to perform L1 \\<\\-> L2 integration using the "
"messaging feature. There are two types of messaging service supported by "
"Katana:"
msgstr ""

#: src/toolchain/katana/reference.md:45
msgid "_Ethereum_"
msgstr ""

#: src/toolchain/katana/reference.md:46
msgid "_Starknet_ (**experimental**)"
msgstr ""

#: src/toolchain/katana/reference.md:48
msgid ""
"If configured to _Ethereum_ messaging, Katana will listen/send messages on "
"an Ethereum chain. This type of messaging behaves similar to the canonical "
"Starknet sequencer with the exception that messages from L2 -> L1 will be "
"sent directly to the settlement chain for consumption, instead of having to "
"wait for the corresponding blocks of the messages to be proven on the "
"settlement chain (which in reality would be a very time consuming process)."
msgstr ""

#: src/toolchain/katana/reference.md:50
msgid ""
"The _Starknet_ messaging, however, is an experimental feature that allows "
"Katana to listen/send messages on a Starknet chain. It attempts to replicate "
"the behaviour of Ethereum messaging but with a Starknet chain as the "
"settlement layer. This is achieved by having Katana listen to the Starknet "
"chain for new blocks and then sending the messages to the settlement chain "
"for consumption. This is an experimental and opinionated feature, and is not "
"recommended for production use."
msgstr ""

#: src/toolchain/katana/reference.md:56
msgid ""
"The messaging config file is a JSON file that contains the following fields:"
msgstr ""

#: src/toolchain/katana/reference.md:60
msgid ""
"/// The type of messaging service to use. Can be either \"ethereum\" or "
"\"starknet\".\n"
"\t\"chain\""
msgstr ""

#: src/toolchain/katana/reference.md:61
msgid "\"ethereum\""
msgstr ""

#: src/toolchain/katana/reference.md:62
msgid "/// The RPC-URL of the settlement chain.\n\t\"rpc_url\""
msgstr ""

#: src/toolchain/katana/reference.md:63
msgid "\"http://127.0.0.1:8545\""
msgstr ""

#: src/toolchain/katana/reference.md:64
msgid ""
"/// The messaging-contract address on the settlement chain.\n"
"\t\"contract_address\""
msgstr ""

#: src/toolchain/katana/reference.md:65
msgid "\"0x5FbDB2315678afecb367f032d93F642f64180aa3\""
msgstr ""

#: src/toolchain/katana/reference.md:66
msgid ""
"/// The address to use for settling messages. It should be a valid address "
"that\n"
"\t/// can be used to send a transaction on the settlement chain.\n"
"\t\"sender_address\""
msgstr ""

#: src/toolchain/katana/reference.md:68
msgid "\"0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\""
msgstr ""

#: src/toolchain/katana/reference.md:69
msgid "/// The private key associated to `sender_address`.\n\t\"private_key\""
msgstr ""

#: src/toolchain/katana/reference.md:70
msgid "\"0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80\""
msgstr ""

#: src/toolchain/katana/reference.md:71
msgid ""
"/// The interval, in seconds, at which the messaging service will fetch and "
"settle messages\n"
"\t/// from/to the settlement chain.\n"
"\t\"interval\""
msgstr ""

#: src/toolchain/katana/reference.md:74
msgid ""
"/// The block on settlement chain from where Katana will start fetching "
"messages.\n"
"\t\"from_block\""
msgstr ""

#: src/toolchain/katana/reference.md:79
msgid "Supported Transport Layers"
msgstr ""

#: src/toolchain/katana/reference.md:81
msgid ""
"Only HTTP connection is supported at the moment. The server listens on port "
"5050 by default, but it can be changed by running the following command:"
msgstr ""

#: src/toolchain/katana/reference.md:87
msgid "Starknet Feature Compatibility"
msgstr ""

#: src/toolchain/katana/reference.md:89
msgid "Supported Transaction Type"
msgstr ""

#: src/toolchain/katana/reference.md:91
msgid "Type"
msgstr ""

#: src/toolchain/katana/reference.md:91
msgid "Version"
msgstr ""

#: src/toolchain/katana/reference.md:93
msgid "INVOKE"
msgstr ""

#: src/toolchain/katana/reference.md:93
msgid "1"
msgstr ""

#: src/toolchain/katana/reference.md:94
msgid "DECLARE"
msgstr ""

#: src/toolchain/katana/reference.md:94
msgid "1, 2"
msgstr ""

#: src/toolchain/katana/reference.md:95
msgid "DEPLOY_ACCOUNT"
msgstr ""

#: src/toolchain/katana/reference.md:97
msgid "Supported RPC Methods"
msgstr ""

#: src/toolchain/katana/reference.md:99
msgid "Starknet Methods"
msgstr ""

#: src/toolchain/katana/reference.md:101
msgid ""
"Katana supports version **v0.3.0** of the Starknet JSON-RPC specifications. "
"The standard methods are based on "
"[this](https://github.com/starkware-libs/starknet-specs/tree/v0.3.0) "
"reference."
msgstr ""

#: src/toolchain/katana/reference.md:103
msgid "`starknet_blockNumber`"
msgstr ""

#: src/toolchain/katana/reference.md:104
msgid "`starknet_blockHashAndNumber`"
msgstr ""

#: src/toolchain/katana/reference.md:105
msgid "`starknet_getBlockWithTxs`"
msgstr ""

#: src/toolchain/katana/reference.md:106
msgid "`starknet_getBlockWithTxHashes`"
msgstr ""

#: src/toolchain/katana/reference.md:107
msgid "`starknet_getBlockTransactionCount`"
msgstr ""

#: src/toolchain/katana/reference.md:108
msgid "`starknet_getTransactionByHash`"
msgstr ""

#: src/toolchain/katana/reference.md:109
msgid "`starknet_getTransactionByBlockIdAndIndex`"
msgstr ""

#: src/toolchain/katana/reference.md:110
msgid "`starknet_getTransactionReceipt`"
msgstr ""

#: src/toolchain/katana/reference.md:111
msgid "`starknet_pendingTransactions`"
msgstr ""

#: src/toolchain/katana/reference.md:112
msgid "`starknet_getStateUpdate`"
msgstr ""

#: src/toolchain/katana/reference.md:114
msgid "`starknet_call`"
msgstr ""

#: src/toolchain/katana/reference.md:115
msgid "`starknet_estimateFee`"
msgstr ""

#: src/toolchain/katana/reference.md:117
msgid "`starknet_chainId`"
msgstr ""

#: src/toolchain/katana/reference.md:119
msgid "`starknet_getNonce`"
msgstr ""

#: src/toolchain/katana/reference.md:120
msgid "`starknet_getEvents`"
msgstr ""

#: src/toolchain/katana/reference.md:121
msgid "`starknet_getStorageAt`"
msgstr ""

#: src/toolchain/katana/reference.md:122
msgid "`starknet_getClassHashAt`"
msgstr ""

#: src/toolchain/katana/reference.md:123
msgid "`starknet_getClass`"
msgstr ""

#: src/toolchain/katana/reference.md:124
msgid "**`starknet_getClassAt`**"
msgstr ""

#: src/toolchain/katana/reference.md:126
msgid "`starknet_addInvokeTransaction`"
msgstr ""

#: src/toolchain/katana/reference.md:127
msgid "`starknet_addDeclareTransaction`"
msgstr ""

#: src/toolchain/katana/reference.md:128
msgid "`starknet_addDeployAccountTransaction`"
msgstr ""

#: src/toolchain/katana/reference.md:130
msgid "Custom Methods"
msgstr ""

#: src/toolchain/katana/reference.md:132
msgid ""
"Katana provides a convenient set of custom RPC methods to quickly and easily "
"configure the node to suit your testing environment."
msgstr ""

#: src/toolchain/katana/reference.md:134
msgid ""
"`katana_generateBlock`  \n"
"Mine a new block which includes all currently pending transactions."
msgstr ""

#: src/toolchain/katana/reference.md:137
msgid "`katana_nextBlockTimestamp`  \nGet the time for the next block."
msgstr ""

#: src/toolchain/katana/reference.md:140
msgid ""
"`katana_increaseNextBlockTimestamp`  \n"
"Increase the time for the block by a given amount of time, in seconds."
msgstr ""

#: src/toolchain/katana/reference.md:143
msgid ""
"`katana_setNextBlockTimestamp`  \n"
"Similar to `katana_increaseNextBlockTimestamp` but takes the exact timestamp "
"that you want in the next block."
msgstr ""

#: src/toolchain/katana/reference.md:146
msgid ""
"`katana_predeployedAccounts`  \n"
"Get the info for all of the predeployed accounts."
msgstr ""

#: src/toolchain/katana/reference.md:149
msgid "`katana_setStorageAt`  \nSet an exact value of a contract's storage slot."
msgstr ""

#: src/toolchain/katana/reference.md:156
msgid "`--silent`  \n     Don't print anything on startup."
msgstr ""

#: src/toolchain/katana/reference.md:159
msgid ""
"`--no-mining`  \n"
"     Disable auto and interval mining, and mine on demand instead."
msgstr ""

#: src/toolchain/katana/reference.md:162
msgid ""
"`-b, --block-time <MILLISECONDS>`  \n"
"     Block time in milliseconds for interval mining."
msgstr ""

#: src/toolchain/katana/reference.md:165
msgid ""
"`--dump-state <PATH>`  \n"
"     Dump the state of chain on exit to the given file.  \n"
"     If the value is a directory, the state will be written to "
"`<PATH>/state.bin`."
msgstr ""

#: src/toolchain/katana/reference.md:169
msgid ""
"`--load-state <PATH>`  \n"
"     Initialize the chain from a previously saved state snapshot."
msgstr ""

#: src/toolchain/katana/reference.md:172
msgid ""
"`--rpc-url <URL>`  \n"
"     The Starknet RPC provider to fork the network from."
msgstr ""

#: src/toolchain/katana/reference.md:175
msgid "`--json-log`  \n     Output logs in JSON format."
msgstr ""

#: src/toolchain/katana/reference.md:178
msgid ""
"`--fork-block-number <BLOCK_NUMBER>`  \n"
"     Fork the network at a specific block."
msgstr ""

#: src/toolchain/katana/reference.md:181
msgid ""
"`--messaging <PATH>`  \n"
"     Configure the messaging service to allow Katana to listen/send messages "
"on a settlement chain that can be either Ethereum or another Starknet "
"sequencer (experimental)."
msgstr ""

#: src/toolchain/katana/reference.md:184
msgid "`-h, --help`  \n     Print help (see a summary with '-h')."
msgstr ""

#: src/toolchain/katana/reference.md:187
msgid "`-V, --version`  \n     Print version information."
msgstr ""

#: src/toolchain/katana/reference.md:190
msgid "Server Options"
msgstr ""

#: src/toolchain/katana/reference.md:192
msgid "`-p, --port <PORT>`  \n     Port number to listen on. \\[default: 5050\\]"
msgstr ""

#: src/toolchain/katana/reference.md:195
msgid "`--host <HOST>`  \n     The IP address the server will listen on."
msgstr ""

#: src/toolchain/katana/reference.md:200
msgid ""
"`--seed <SEED>`  \n"
"     Specify the seed for randomness of accounts to be predeployed."
msgstr ""

#: src/toolchain/katana/reference.md:203
msgid ""
"`--accounts <NUM>`  \n"
"     Number of pre-funded accounts to generate. \\[default: 10\\]"
msgstr ""

#: src/toolchain/katana/reference.md:206
msgid "`--disable-fee`  \n     Disable charging fee for transactions."
msgstr ""

#: src/toolchain/katana/reference.md:209
msgid "Environment Options"
msgstr ""

#: src/toolchain/katana/reference.md:211
msgid "`--chain-id <CHAIN_ID>`  \n     The chain ID. \\[default: KATANA\\]"
msgstr ""

#: src/toolchain/katana/reference.md:214
msgid "`--gas-price <GAS_PRICE>`  \n     The gas price."
msgstr ""

#: src/toolchain/katana/reference.md:217
msgid ""
"`--validate-max-steps <VALIDATE_MAX_STEPS>`  \n"
"     The maximum number of steps available for the account validation logic."
msgstr ""

#: src/toolchain/katana/reference.md:220
msgid ""
"`--invoke-max-steps <INVOKE_MAX_STEPS>`  \n"
"     The maximum number of steps available for the account execution logic."
msgstr ""

#: src/toolchain/katana/reference.md:223
msgid "Shell Completions"
msgstr ""

#: src/toolchain/katana/reference.md:225
msgid "`katana` completions shell"
msgstr ""

#: src/toolchain/katana/reference.md:227
msgid "Generates a shell completions script for the given shell."
msgstr ""

#: src/toolchain/katana/reference.md:229
msgid "Supported shells are:"
msgstr ""

#: src/toolchain/katana/reference.md:231
msgid "bash"
msgstr ""

#: src/toolchain/katana/reference.md:232
msgid "elvish"
msgstr ""

#: src/toolchain/katana/reference.md:233
msgid "fish"
msgstr ""

#: src/toolchain/katana/reference.md:234
msgid "powershell"
msgstr ""

#: src/toolchain/katana/reference.md:235
msgid "zsh"
msgstr ""

#: src/toolchain/katana/reference.md:239
msgid ""
"Generate shell completions script for `bash` and appends it to a `.bashrc` "
"file:"
msgstr ""

#: src/toolchain/katana/reference.md:247
msgid "Create 15 dev accounts and disable transaction fee mechanism"
msgstr ""

#: src/toolchain/katana/reference.md:253
msgid "Set the chain id to `SN_GOERLI` and run the server on port 8545"
msgstr ""

#: src/toolchain/katana/reference.md:259
msgid ""
"Load previously stored state and dump the state of this session to a file on "
"shutdown"
msgstr ""

#: src/toolchain/torii/overview.md:1
msgid "Torii - Networking & Indexing"
msgstr ""

#: src/toolchain/torii/overview.md:3
msgid ""
"Torii is an automatic indexer for dojo worlds. Built in rust to be blazingly "
"fast and exceptionally scalable. Torii provides a fully typed, dynamically "
"generated GraphqQL interface and a high performance gRPC api for binding "
"clients to the world state."
msgstr ""

#: src/toolchain/torii/overview.md:7
msgid ""
"Torii leverages world introspection to bootstrap directly from an onchain "
"deployment. Simply run:"
msgstr ""

#: src/toolchain/torii/overview.md:13
msgid ""
"You'll have a GraphQL API running at `http://localhost:8080/graphql` and a "
"gRPC api at `http://localhost:8080/grpc`"
msgstr ""

#: src/toolchain/torii/overview.md:17
msgid ""
"The `torii` binary can be installed via "
"[`dojoup`](../../getting-started/quick-start.md), our dedicated installation "
"package manager."
msgstr ""

#: src/toolchain/torii/overview.md:21
msgid "If you prefer to install from the source code:"
msgstr ""

#: src/toolchain/torii/overview.md:27
msgid ""
"This will install Torii and the required dependencies on your local system."
msgstr ""

#: src/toolchain/torii/overview.md:31
msgid "See the [`torii` Reference](./reference.md) for a complete reference."
msgstr ""

#: src/toolchain/torii/reference.md:1
msgid "torii reference"
msgstr ""

#: src/toolchain/torii/reference.md:3 src/toolchain/torii/graphql.md:3
#: src/toolchain/slot/reference.md:3
msgid "Name"
msgstr ""

#: src/toolchain/torii/reference.md:5
msgid "torii - An automatic indexer and networking layer for a world contract."
msgstr ""

#: src/toolchain/torii/reference.md:15
msgid ""
"`torii` starts the indexer and exposes GraphQL/gRPC API endpoints. The "
"indexer queries the specified Starknet RPC endpoint for transaction blocks "
"and listens for transactions related to the world contract. These "
"transactions can include component/system registrations, entity state "
"updates, system calls, and events. The parsed data is then stored in a local "
"SQLite database."
msgstr ""

#: src/toolchain/torii/reference.md:17
msgid ""
"The GraphQL and gRPC API endpoints run in tandem with the indexer, providing "
"custom queries specific to the world contract for client applications."
msgstr ""

#: src/toolchain/torii/reference.md:19
msgid "Database URL"
msgstr ""

#: src/toolchain/torii/reference.md:21
msgid ""
"`torii` uses a sqlite database to store indexed data. The database can be "
"stored either in-memory or persistently on the filesystem."
msgstr ""

#: src/toolchain/torii/reference.md:23
msgid ""
"The in-memory database is ephemeral and only lasts as long as the indexer is "
"running. This is a fast and simple option to start the indexer for "
"development/testing."
msgstr ""

#: src/toolchain/torii/reference.md:24
msgid ""
"Persistent storage should be used in production. It relies on the local "
"filesystem for storage."
msgstr ""

#: src/toolchain/torii/reference.md:26
msgid ""
"Note: If using in-memory db, the memory will be garbage collected after a "
"period of inactivity, causing queries to result in errors. Workaround is to "
"use a persistent database."
msgstr ""

#: src/toolchain/torii/reference.md:29
msgid "# Persistent database storage using file indexer.db\n"
msgstr ""

#: src/toolchain/torii/reference.md:37
msgid "`-w, --world`  \n     Address of the world contract to index"
msgstr ""

#: src/toolchain/torii/reference.md:40
msgid ""
"`--rpc`  \n"
"     Starknet RPC endpoint to use \\[default: http//localhost:5050\\]"
msgstr ""

#: src/toolchain/torii/reference.md:43
msgid ""
"`-d, --database <DATABASE>`  \n"
"     Database filepath (ex: indexer.db) \\[default: :memory:\\]"
msgstr ""

#: src/toolchain/torii/reference.md:46
msgid ""
"`-s, --start-block <START_BLOCK>`  \n"
"     Specify a block to start indexing from, ignored if stored head exists "
"\\[default: 0\\]"
msgstr ""

#: src/toolchain/torii/reference.md:49
msgid ""
"`--allowed-origins <ALLOWED_ORIGINS>`  \n"
"     Specify allowed origins for api endpoints (comma-separated list of "
"allowed origins, or \"\\*\" for all) \\[default: \\*\\]"
msgstr ""

#: src/toolchain/torii/reference.md:52
msgid ""
"`--external-url <EXTERNAL_URL>`  \n"
"     The external url of the server, used for configuring the GraphQL "
"Playground in a hosted environment"
msgstr ""

#: src/toolchain/torii/reference.md:55
msgid "`-h, --help`      Print help"
msgstr ""

#: src/toolchain/torii/reference.md:58
msgid "`-V, --version`      Print version"
msgstr ""

#: src/toolchain/torii/graphql.md:1
msgid "Torii - GraphQL"
msgstr ""

#: src/toolchain/torii/graphql.md:5
msgid ""
"In Dojo, you have access to custom queries and subscriptions that are "
"specifically designed to work with the `caller` for client applications. "
"GraphQL is the technology that makes this possible."
msgstr ""

#: src/toolchain/torii/graphql.md:7
msgid ""
"GraphQL is the rising star of backend technologies. It replaces REST as an "
"API design paradigm and is becoming the new standard for exposing the data "
"and functionality of a web server. It allows you to specify exactly what "
"data you want to retrieve, and it delivers that data in a structured JSON "
"format. This flexibility in data retrieval ensures that you get the "
"information you need efficiently and in a format that's easy to work with."
msgstr ""

#: src/toolchain/torii/graphql.md:9
msgid "GraphQL Playground"
msgstr ""

#: src/toolchain/torii/graphql.md:11
msgid ""
"GraphQL Playground is a `GraphQL IDE` that allows you to interactively "
"explore the functionality of a GraphQL API by sending queries and mutations "
"to it. It’s somewhat similar to Postman which offers comparable "
"functionality for REST APIs."
msgstr ""

#: src/toolchain/torii/graphql.md:15
msgid "Pre-requisites"
msgstr ""

#: src/toolchain/torii/graphql.md:17
msgid "Make sure torii is running in your local terminal."
msgstr ""

#: src/toolchain/torii/graphql.md:23
msgid "It starts GraphQL server at `http://0.0.0.0:8080/graphql`"
msgstr ""

#: src/toolchain/torii/graphql.md:25
msgid ""
"After the torii server starts on your local machine, you're ready to make "
"query and subscription operations."
msgstr ""

#: src/toolchain/torii/graphql.md:27
msgid "Schema and query defintions"
msgstr ""

#: src/toolchain/torii/graphql.md:29
msgid ""
"Torii generates both the schema and queries at runtime specific to your "
"world. There are mainly two groups of queries, predefined queries and "
"dynamically generated custom queries."
msgstr ""

#: src/toolchain/torii/graphql.md:31
msgid ""
"Predefined queries like `entities` provide a generic entry point to the "
"entities data of the world. Custom queries on the other hand are built "
"according to the models of the world. Each model has a correpsonding "
"`{name}Models` query and retrieves the associated model data. For example: "
"`positionModels`."
msgstr ""

#: src/toolchain/torii/graphql.md:33
msgid ""
"The benefit of custom queries becomes apparent when filtering and sorting is "
"needed. They allow much more finer control of the returned dataset."
msgstr ""

#: src/toolchain/torii/graphql.md:35
msgid "Query operation"
msgstr ""

#: src/toolchain/torii/graphql.md:37
msgid ""
"In [`hello-dojo`](../../cairo/hello-dojo.md#next-steps) we fetched some data "
"from the `Moves` model. This time let's fetch only `id`, `name`, "
"`class_hash` fields from `Position` model ."
msgstr ""

#: src/toolchain/torii/graphql.md:39
msgid ""
"```graphql\n"
"query {\n"
"  model(id: \"Position\") {\n"
"    id\n"
"    name\n"
"    class_hash\n"
"  }\n"
"}\n"
"```"
msgstr ""

#: src/toolchain/torii/graphql.md:55 src/toolchain/torii/graphql.md:56
#: src/toolchain/torii/graphql.md:338
msgid "\"Position\""
msgstr ""

#: src/toolchain/torii/graphql.md:57
msgid "\"0x6ffc643cbc4b2fb9c424242b18175a5e142269b45f4463d1cd4dddb7a2e5095\""
msgstr ""

#: src/toolchain/torii/graphql.md:63
msgid ""
"Great! If you're wondering about the number of fields a `Model` has or the "
"details of a `Entities`, you can find all the information about the schema "
"definition in the `Documentation Explorer` section of the GraphQL IDE. It's "
"your go-to place for exploring the rest of the documentation."
msgstr ""

#: src/toolchain/torii/graphql.md:65
msgid "Now lets retrieve more data from `Moves` model."
msgstr ""

#: src/toolchain/torii/graphql.md:86
msgid "\"movesModels\""
msgstr ""

#: src/toolchain/torii/graphql.md:87 src/toolchain/torii/graphql.md:126
#: src/toolchain/torii/graphql.md:231
msgid "\"edges\""
msgstr ""

#: src/toolchain/torii/graphql.md:89 src/toolchain/torii/graphql.md:128
#: src/toolchain/torii/graphql.md:145 src/toolchain/torii/graphql.md:166
#: src/toolchain/torii/graphql.md:234 src/toolchain/torii/graphql.md:238
msgid "\"node\""
msgstr ""

#: src/toolchain/torii/graphql.md:90 src/toolchain/torii/graphql.md:335
msgid "\"player\""
msgstr ""

#: src/toolchain/torii/graphql.md:91 src/toolchain/torii/graphql.md:334
msgid "\"remaining\""
msgstr ""

#: src/toolchain/torii/graphql.md:92
msgid "\"last_direction\""
msgstr ""

#: src/toolchain/torii/graphql.md:92
msgid "\"None\""
msgstr ""

#: src/toolchain/torii/graphql.md:101
msgid "Transactions"
msgstr ""

#: src/toolchain/torii/graphql.md:103
msgid ""
"GraphQL additionally offers an API to fetch transactions emitted from your "
"`world`. Presently, you can retrieve `transaction data` with the potential "
"for future support of `transaction receipt`. Current API includes pagination "
"support, although filtering is not yet supported. Let's explore an example."
msgstr ""

#: src/toolchain/torii/graphql.md:120
msgid ""
"If you execute this query after you applied `sozo migrate` in your "
"[`hello-dojo`](../../cairo/hello-dojo.md) example. You will get an output "
"similar to this."
msgstr ""

#: src/toolchain/torii/graphql.md:125
msgid "\"transactions\""
msgstr ""

#: src/toolchain/torii/graphql.md:129
msgid ""
"\"0x000000000000000000000000000000000000000000000000000000000000000a:0x0000\""
msgstr ""

#: src/toolchain/torii/graphql.md:130
msgid "\"0x2da3d65e223362c72906f97663a4e7dc81ab0bbd04bbde5532a230c1e97d93e\""
msgstr ""

#: src/toolchain/torii/graphql.md:131 src/toolchain/torii/graphql.md:148
#: src/toolchain/torii/graphql.md:169
msgid "\"sender_address\""
msgstr ""

#: src/toolchain/torii/graphql.md:132 src/toolchain/torii/graphql.md:149
#: src/toolchain/torii/graphql.md:170
msgid "\"calldata\""
msgstr ""

#: src/toolchain/torii/graphql.md:133 src/toolchain/torii/graphql.md:154
#: src/toolchain/torii/graphql.md:157 src/toolchain/torii/graphql.md:158
#: src/toolchain/torii/graphql.md:171 src/toolchain/torii/graphql.md:376
#: src/toolchain/torii/graphql.md:397
msgid "\"0x1\""
msgstr ""

#: src/toolchain/torii/graphql.md:134 src/toolchain/torii/graphql.md:151
#: src/toolchain/torii/graphql.md:155
msgid "\"0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a\""
msgstr ""

#: src/toolchain/torii/graphql.md:135
msgid "\"0x2730079d734ee55315f4f141eaed376bddd8c2133523d223a344c5604e0f7f8\""
msgstr ""

#: src/toolchain/torii/graphql.md:136 src/toolchain/torii/graphql.md:153
#: src/toolchain/torii/graphql.md:174 src/toolchain/torii/graphql.md:179
#: src/toolchain/torii/graphql.md:378 src/toolchain/torii/graphql.md:381
#: src/toolchain/torii/graphql.md:399
msgid "\"0x0\""
msgstr ""

#: src/toolchain/torii/graphql.md:137 src/toolchain/torii/graphql.md:138
#: src/toolchain/torii/graphql.md:150 src/toolchain/torii/graphql.md:159
#: src/toolchain/torii/graphql.md:180 src/toolchain/torii/graphql.md:379
#: src/toolchain/torii/graphql.md:400
msgid "\"0x2\""
msgstr ""

#: src/toolchain/torii/graphql.md:139
msgid "\"0x35ec9fd22092dc0c8fc9341e94d5f361924d921c128fa46a0648f2dac519ce4\""
msgstr ""

#: src/toolchain/torii/graphql.md:140
msgid "\"0x2ffecbe8de6c7c10c785a6eb964ee6489f8dcf139000adbe2c0f12d249be7d8\""
msgstr ""

#: src/toolchain/torii/graphql.md:146
msgid ""
"\"0x0000000000000000000000000000000000000000000000000000000000000008:0x0000\""
msgstr ""

#: src/toolchain/torii/graphql.md:147
msgid "\"0x2aa02de0e3fa582b3cb6cf9e4371051f44ae2e0d6c94f5c936338ffc8c2ac12\""
msgstr ""

#: src/toolchain/torii/graphql.md:152 src/toolchain/torii/graphql.md:156
msgid "\"0x1e7875674bcb09daaf984cbf77264ac98120cb39e6d17522520defcdc347476\""
msgstr ""

#: src/toolchain/torii/graphql.md:160
msgid "\"0x2e5174b54aef0b99d4685827ffa51488447e1f5607908293d5c715d6bd22433\""
msgstr ""

#: src/toolchain/torii/graphql.md:161
msgid "\"0x6a11b5b3003a3aa0ae7f8f443e48314cc0bc51eaea7c3ed1c19beb909f5dda3\""
msgstr ""

#: src/toolchain/torii/graphql.md:167
msgid ""
"\"0x0000000000000000000000000000000000000000000000000000000000000005:0x0000\""
msgstr ""

#: src/toolchain/torii/graphql.md:168
msgid "\"0x1f03fa7dc5a673f96d53b728785a98d6ff089c182a7bb32735b150e91817e5b\""
msgstr ""

#: src/toolchain/torii/graphql.md:172
msgid "\"0x41a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf\""
msgstr ""

#: src/toolchain/torii/graphql.md:173
msgid "\"0x1987cbd17808b9a23693d4de7e246a443cfe37e6e7fbaeabd7d7e6532b07c3d\""
msgstr ""

#: src/toolchain/torii/graphql.md:175 src/toolchain/torii/graphql.md:176
msgid "\"0x6\""
msgstr ""

#: src/toolchain/torii/graphql.md:177
msgid "\"0xb3e374b8087dca92601afbb9881fed855ac0d568e3bf878a876fca5ffcb479\""
msgstr ""

#: src/toolchain/torii/graphql.md:178
msgid "\"0x41d7f42bf7a362f0420aaae66d7a91df981100a039ac116a1d9cb632c74ad27\""
msgstr ""

#: src/toolchain/torii/graphql.md:181
msgid "\"0x59f31686991d7cac25a7d4844225b9647c89e3e1e2d03460dbc61e3fbfafc59\""
msgstr ""

#: src/toolchain/torii/graphql.md:182
msgid "\"0x77638e9a645209ac1e32e143bfdbfe9caf723c4f7645fcf465c38967545ea2f\""
msgstr ""

#: src/toolchain/torii/graphql.md:187 src/toolchain/torii/graphql.md:230
msgid "\"total_count\""
msgstr ""

#: src/toolchain/torii/graphql.md:193
msgid ""
"Now feel free to play around with the query by removing any fields from the "
"selection set and observe the responses sent by the server. It is your turn "
"to create any kind of query for entities and models!"
msgstr ""

#: src/toolchain/torii/graphql.md:195
msgid "Pagination"
msgstr ""

#: src/toolchain/torii/graphql.md:197
msgid ""
"As the entities in your world grows, fetching all of that data at once can "
"become inefficient and slow."
msgstr ""

#: src/toolchain/torii/graphql.md:199
msgid ""
"Torii provides two methods to address this - cursor or offset/limit based "
"pagination. To keep the return type consistent, both methods will return a "
"[`Connection`](https://relay.dev/graphql/connections.htm#sec-Connection-Types) "
"type."
msgstr ""

#: src/toolchain/torii/graphql.md:201
msgid ""
"You can read more about graphql pagination "
"[here](https://graphql.org/learn/pagination)."
msgstr ""

#: src/toolchain/torii/graphql.md:203
msgid "Cursor"
msgstr ""

#: src/toolchain/torii/graphql.md:205
msgid ""
"Cursor based pagination is the most efficient, allowing us to query a subset "
"or slice of the entire set of data. Both forward and backward pagination are "
"supported using a combination of `first, last, before, after` input "
"arguments."
msgstr ""

#: src/toolchain/torii/graphql.md:207
msgid ""
"Forward pagination uses `first`/`after` and backward pagination uses "
"`last`/`before`. `first`/`last` are integers representing the number of "
"items to return. `after`/`before` are the cursors to paginate from."
msgstr ""

#: src/toolchain/torii/graphql.md:209
msgid "Query for first page of 2 entities"
msgstr ""

#: src/toolchain/torii/graphql.md:225
msgid "Result shows there are 5 entities and returns the first two"
msgstr ""

#: src/toolchain/torii/graphql.md:229
msgid "\"entities\""
msgstr ""

#: src/toolchain/torii/graphql.md:233 src/toolchain/torii/graphql.md:237
msgid "\"cursor\""
msgstr ""

#: src/toolchain/torii/graphql.md:233
msgid "\"Y3Vyc29yX29uZQ==\""
msgstr ""

#: src/toolchain/torii/graphql.md:237
msgid "\"Y3Vyc29yX3R3bw==\""
msgstr ""

#: src/toolchain/torii/graphql.md:245
msgid "Query 3 entities after the second node (last 3)"
msgstr ""

#: src/toolchain/torii/graphql.md:247
msgid ""
"```graphql\n"
"query {\n"
"  entities (first: 3, after: \"Y3Vyc29yX3R3bw==\") {\n"
"    ...\n"
"  }\n"
"}\n"
"```"
msgstr ""

#: src/toolchain/torii/graphql.md:255
msgid "Offset/limit"
msgstr ""

#: src/toolchain/torii/graphql.md:257
msgid ""
"Offset/limit based pagination can be more intuitive and easier to use. "
"However, for very, very large datasets they can be inefficient."
msgstr ""

#: src/toolchain/torii/graphql.md:268
msgid "Subscription operations"
msgstr ""

#: src/toolchain/torii/graphql.md:270
msgid ""
"Subscriptions are a GraphQL feature that allows a server to send data to its "
"clients when a specific event happens. Subscriptions are usually implemented "
"with WebSockets. In that setup, the server maintains a steady connection to "
"its subscribed client. This also breaks the “Request-Response-Cycle” that is "
"used for with REST APIs."
msgstr ""

#: src/toolchain/torii/graphql.md:272
msgid ""
"Instead, the client initially opens up a long-lived connection to the server "
"by sending a subscription query that specifies which event it is interested "
"in. Every time this particular event happens, the server uses the connection "
"to push the event data to the subscribed client(s)."
msgstr ""

#: src/toolchain/torii/graphql.md:274
msgid ""
"In this example, you can listen when an `Model` is registered by executing "
"this subscription"
msgstr ""

#: src/toolchain/torii/graphql.md:285
msgid ""
"Graphql also supports subscription to a targeted entity or model, for this "
"we have to pass its id as an argument"
msgstr ""

#: src/toolchain/torii/graphql.md:287
msgid ""
"In this example, our server provides a `entityUpdated` subscription, which "
"should notify clients whenever an entity with id "
"`0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20` is "
"updated. On the same subscription we can get the model(components) values of "
"the updated entity . A client can execute a subscription that looks like "
"this:"
msgstr ""

#: src/toolchain/torii/graphql.md:289
msgid ""
"```graphql\n"
"subscription {\n"
"  entityUpdated(\n"
"    id: "
"\"0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20\"\n"
"  ) {\n"
"    id\n"
"    keys\n"
"    model_names\n"
"    event_id\n"
"    created_at\n"
"    updated_at\n"
"    models {\n"
"      __typename\n"
"      ... on Moves {\n"
"        remaining\n"
"        player\n"
"      }\n"
"      ... on Position {\n"
"        vec {\n"
"          x\n"
"          y\n"
"        }\n"
"      }\n"
"    }\n"
"  }\n"
"}\n"
"```"
msgstr ""

#: src/toolchain/torii/graphql.md:317
msgid "According to your input, you will receive an output like this:"
msgstr ""

#: src/toolchain/torii/graphql.md:328
msgid ""
"\"0x0000000000000000000000000000000000000000000000000000000000000013:0x0000:0x0000\""
msgstr ""

#: src/toolchain/torii/graphql.md:329
msgid "\"2023-10-17 11:39:42\""
msgstr ""

#: src/toolchain/torii/graphql.md:330
msgid "\"2023-10-17 11:52:48\""
msgstr ""

#: src/toolchain/torii/graphql.md:331
msgid "\"models\""
msgstr ""

#: src/toolchain/torii/graphql.md:333 src/toolchain/torii/graphql.md:338
msgid "\"__typename\""
msgstr ""

#: src/toolchain/torii/graphql.md:339
msgid "\"vec\""
msgstr ""

#: src/toolchain/torii/graphql.md:340
msgid "\"x\""
msgstr ""

#: src/toolchain/torii/graphql.md:341
msgid "\"y\""
msgstr ""

#: src/toolchain/torii/graphql.md:350
msgid "Susbcription to events"
msgstr ""

#: src/toolchain/torii/graphql.md:352
msgid ""
"A valuable approach for harnessing the power of GraphQL is by actively "
"monitoring the events emitted throughout your game. This allows you to "
"extract essential information such as key values, data, and transaction "
"hashes. These events are customizable and can be filtered based on keys, "
"much like `entities query`, and they seamlessly support pagination. In the "
"subsequent example, we will demonstrate how to listen for any event emitted "
"within your program."
msgstr ""

#: src/toolchain/torii/graphql.md:364
msgid ""
"If you execute this suscription after you applied `sozo execute "
"<ACTION_CONTRACT_ADDRESS> spawn` in your "
"[`hello-dojo`](../../cairo/hello-dojo.md) example. You will get an output "
"similar to this."
msgstr ""

#: src/toolchain/torii/graphql.md:369 src/toolchain/torii/graphql.md:390
msgid "\"eventEmitted\""
msgstr ""

#: src/toolchain/torii/graphql.md:372 src/toolchain/torii/graphql.md:393
msgid "\"0x1a2f334228cee715f1f0f54053bb6b5eac54fa336e0bc1aacf7516decb0471d\""
msgstr ""

#: src/toolchain/torii/graphql.md:375
msgid "\"0x4d6f766573\""
msgstr ""

#: src/toolchain/torii/graphql.md:380
msgid "\"0x64\""
msgstr ""

#: src/toolchain/torii/graphql.md:383 src/toolchain/torii/graphql.md:404
msgid "\"0x3b7b034a087355c996abb52e363932c1135f8dd49587bc9a05902d3cf0650b\""
msgstr ""

#: src/toolchain/torii/graphql.md:396
msgid "\"0x506f736974696f6e\""
msgstr ""

#: src/toolchain/torii/graphql.md:401 src/toolchain/torii/graphql.md:402
msgid "\"0xa\""
msgstr ""

#: src/toolchain/slot/overview.md:3
msgid ""
"Slot is a toolchain developed by "
"[Cartrige.gg](https://github.com/cartridge-gg/slot) for rapidly spinning up "
"Katana and Torii instances. Play test your game in seconds."
msgstr ""

#: src/toolchain/slot/overview.md:7
msgid "Run the following command to install slot:"
msgstr ""

#: src/toolchain/slot/overview.md:13
msgid ""
"Once finished, run `slotup` to manage slot installations and follow the "
"outputted directions."
msgstr ""

#: src/toolchain/slot/overview.md:17
msgid ""
"To deploy your projects using slot, check out the tutorial [Deploy using "
"Slot](../../tutorial/deploy-using-slot/main.md)."
msgstr ""

#: src/toolchain/slot/overview.md:21
msgid ""
"See the [`slot` Reference](./reference.md) for a complete overview of all "
"the available subcommands."
msgstr ""

#: src/toolchain/slot/reference.md:1
msgid "slot reference"
msgstr ""

#: src/toolchain/slot/reference.md:5
msgid ""
"slot - a toolchain developed for rapidly spinning up Katana and Torii "
"instances."
msgstr ""

#: src/toolchain/slot/reference.md:15
msgid "`auth`  \n     Manage auth credentials for the Slot CLI."
msgstr ""

#: src/toolchain/slot/reference.md:18
msgid "[`deployments`](./deployments-commands/deployments.md)"
msgstr ""

#: src/toolchain/slot/reference.md:20
msgid "     Manage Slot deployments."
msgstr ""

#: src/toolchain/slot/reference.md:22
msgid "`help`  \n     Print this message or the help of the given subcommand(s)"
msgstr ""

#: src/toolchain/slot/deployments-commands/deployments.md:1
msgid "slot deployments"
msgstr ""

#: src/toolchain/slot/deployments-commands/deployments.md:3
msgid "It allows you the manage your slot deployments."
msgstr ""

#: src/toolchain/slot/deployments-commands/deployments.md:7
msgid "`create`     Create a new deployment."
msgstr ""

#: src/toolchain/slot/deployments-commands/deployments.md:10
msgid "`delete`     Delete a deployment."
msgstr ""

#: src/toolchain/slot/deployments-commands/deployments.md:13
msgid "`update`     Update a deployment."
msgstr ""

#: src/toolchain/slot/deployments-commands/deployments.md:16
msgid "`describe`     Describe a deployment's configuration."
msgstr ""

#: src/toolchain/slot/deployments-commands/deployments.md:19
msgid "`list`     List all deployments."
msgstr ""

#: src/toolchain/slot/deployments-commands/deployments.md:22
msgid "`logs`     Fetch logs for a deployment."
msgstr ""

#: src/toolchain/slot/deployments-commands/deployments.md:25
msgid "`help`     Print this message or the help of the given subcommand(s)"
msgstr ""

#: src/deployment/locally.md:1
msgid "Deploying Locally"
msgstr ""

#: src/deployment/locally.md:3
msgid ""
"Dojo is engineered for rapid development, boasting a lightning-fast local "
"development environment named [Katana](../toolchain/katana/overview.md). "
"Katana serves as an on-device Starknet blockchain, allowing you to "
"rigorously test your smart contracts before transitioning them to the remote "
"testnet."
msgstr ""

#: src/deployment/locally.md:5
msgid "Katana Deployments"
msgstr ""

#: src/deployment/locally.md:7
msgid "Deploying to Katana could not be easier."
msgstr ""

#: src/deployment/locally.md:9
msgid ""
"This assumes you have followed the [Quick "
"Start](../getting-started/quick-start.md) guide and have a project "
"initialized."
msgstr ""

#: src/deployment/locally.md:11
msgid "From your project directory, run:"
msgstr ""

#: src/deployment/locally.md:17
msgid "This has started a local Katana which you can now deploy on!"
msgstr ""

#: src/deployment/locally.md:19
msgid "Deploying to Katana"
msgstr ""

#: src/deployment/locally.md:21
msgid "To deploy your project to Katana, run:"
msgstr ""

#: src/deployment/locally.md:27
msgid ""
"Note - this will only work if you have compiled your contracts. If you have "
"not, run:"
msgstr ""

#: src/deployment/remote.md:1
msgid "Deployment to Remote Network"
msgstr ""

#: src/deployment/remote.md:3
msgid "_IMPORTANT: Dojo is unaudited. Use at your own risk._"
msgstr ""

#: src/deployment/remote.md:5
msgid ""
"Dojo makes it easy to deploy to remote networks, you just need to have a "
"valid account and network endpoint."
msgstr ""

#: src/deployment/remote.md:7
msgid "Scarb.toml"
msgstr ""

#: src/deployment/remote.md:9
msgid ""
"```toml\n"
"[package]\n"
"name = \"ohayoo\"\n"
"version = \"0.1.0\"\n"
"cairo-version = \"2.1.1\"\n"
"\n"
"[cairo]\n"
"sierra-replace-ids = true\n"
"\n"
"[dependencies]\n"
"dojo = { git = \"https://github.com/dojoengine/dojo.git\" }\n"
"\n"
"# # Katana\n"
"# rpc_url = \"http://localhost:5050\"\n"
"# account_address = "
"\"0x03ee9e18edc71a6df30ac3aca2e0b02a198fbce19b7480a63a0d71cbd76652e0\"\n"
"# private_key = "
"\"0x0300001800000000300000180000000000030000000000003006001800006600\"\n"
"\n"
"#Madara\n"
"rpc_url = \"https://api.cartridge.gg/x/shinai/madara\"\n"
"account_address = \"0x2\"\n"
"private_key = "
"\"0xc1cf1490de1352865301bb8705143f3ef938f97fdf892f1090dcb5ac7bcd1d\"\n"
"#world_address = "
"\"0x5b328933afdbbfd44901fd69a2764a254edbb6e992ae87cf958c70493f2d201\"\n"
"```"
msgstr ""

#: src/deployment/remote.md:33
msgid "Remote Katana"
msgstr ""

#: src/deployment/remote.md:35
msgid ""
"Katanas are able to be hosted and run as remote testnets, however this is "
"not recommended for production use."
msgstr ""

#: src/deployment/remote.md:37
msgid "**todo**: add instructions for deploying to remote katana"
msgstr ""

#: src/deployment/remote.md:40
msgid "Madara"
msgstr ""

#: src/deployment/remote.md:42
msgid ""
"[Madara](https://github.com/keep-starknet-strange/madara) is a blazingly "
"fast Starknet sequencer. Built on the robust Substrate framework and fast, "
"thanks to Rust 🦀, Madara delivers unmatched performance and scalability to "
"power your Starknet-based Validity Rollup chain."
msgstr ""

#: src/deployment/remote.md:44
msgid "A public Madara testnet is available for deployment:"
msgstr ""

#: src/deployment/remote.md:46
msgid "**Testnet RPC:** https://api.cartridge.gg/x/shinai/madara"
msgstr ""

#: src/deployment/remote.md:48
msgid "You can use the following account to deploy:"
msgstr ""

#: src/deployment/remote.md:50
msgid ""
"```toml\n"
"# ...rest of Scarb.toml\n"
"\n"
"rpc_url = \"https://api.cartridge.gg/x/shinai/madara\"\n"
"account_address = \"0x2\"\n"
"private_key = "
"\"0xc1cf1490de1352865301bb8705143f3ef938f97fdf892f1090dcb5ac7bcd1d\"\n"
"```"
msgstr ""

#: src/deployment/remote.md:59
msgid "Starknet"
msgstr ""

#: src/deployment/remote.md:61
msgid "**todo**: add instructions for deploying to remote Starknet"
msgstr ""

#: src/tutorial/onchain-chess/index.md:1
msgid "Building a Chess Game"
msgstr ""

#: src/tutorial/onchain-chess/index.md:3
msgid "_\"I just finished reading The Dojo Book. What should I do next?\"_"
msgstr ""

#: src/tutorial/onchain-chess/index.md:5
msgid ""
"The answers to this question are always \"Make something!\", sometimes "
"followed by a list of cool projects. This is a great answer for some people, "
"but others might be looking for a little more direction."
msgstr ""

#: src/tutorial/onchain-chess/index.md:7
msgid ""
"This guide is intended to fill the gap between heavily directed beginner "
"tutorials and working on your projects. The primary goal here is to get you "
"to write code. The secondary goal is to get you reading documentation."
msgstr ""

#: src/tutorial/onchain-chess/index.md:9
msgid ""
"If you haven't read the Dojo Book yet, it is highly encouraged for you to do "
"so before starting this project."
msgstr ""

#: src/tutorial/onchain-chess/index.md:11
msgid "What are we building?"
msgstr ""

#: src/tutorial/onchain-chess/index.md:13
msgid ""
"We're building an on-chain chess game contract that lets you start a new "
"game and play chess. This guide does not cover every rules of the chess "
"game. You will build step by step as follows:"
msgstr ""

#: src/tutorial/onchain-chess/index.md:15
msgid "A system contract to spawn all the chess pieces"
msgstr ""

#: src/tutorial/onchain-chess/index.md:16
msgid "A system contract to make pieces move"
msgstr ""

#: src/tutorial/onchain-chess/index.md:17
msgid "Add some functions to check a legal move"
msgstr ""

#: src/tutorial/onchain-chess/index.md:18
msgid "Play chess ♟♙ - integration test!"
msgstr ""

#: src/tutorial/onchain-chess/index.md:20
msgid ""
"The full code of tutorial is based on [this "
"repo](https://github.com/dojoengine/dojo-examples/tree/main/examples/dojo-chess)."
msgstr ""

#: src/tutorial/onchain-chess/index.md:22
msgid ""
"If this seems too hard, don't worry! This guide is for beginners. If you "
"know some basics about Cairo and Dojo, you're good. We won't make a full "
"chess game with all the rules. We're keeping it simple."
msgstr ""

#: src/tutorial/onchain-chess/index.md:24
msgid "What after this guide?"
msgstr ""

#: src/tutorial/onchain-chess/index.md:26
msgid ""
"We're making another guide to help design the frontend. This will make our "
"chess game complete."
msgstr ""

#: src/tutorial/onchain-chess/index.md:28
msgid ""
"After you finish all the four chapters, we can move on to the frontend guide."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:3
msgid ""
"_Before starting recommend following the "
"[`hello-dojo`](../../cairo/hello-dojo.md) chapter to gain a basic "
"understanding of the Dojo game._"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:5
msgid "Initializing the Project"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:7
msgid ""
"Create a new Dojo project folder. You can name your project what you want."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:13
msgid "Open the project folder."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:19
msgid "And initialize the project using sozo init."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:25
msgid "Cleaning Up the Boilerplate"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:27
msgid ""
"The project comes with a lot of boilerplate codes. Clear it all. Make sure "
"both `models.cairo` and `systems.cairo` files are empty. In this tutorial, "
"we won't be creating a `systems.cairo` nor the `src/systems` folder, you can "
"delete both (highly optional, folder structure is entirely up to you). "
"instead, we'll be creating a file named `actions_contract.cairo`, this is "
"where our game logic/contract will reside. "
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:29
msgid "Remodel your`lib.cairo`, to look like this :"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:37
msgid "Compile your project with:"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:43
msgid "Basic components"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:45
msgid ""
"While there are many ways to design a chess game using the ECS model, we'll "
"follow this approach:"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:47
msgid ""
"Every square of the chess board (e.g., A1) will be treated as an entity. If "
"a piece exists on a square, the square entity will hold that piece."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:49
msgid ""
"First, add this basic model to `models.cairo` file. If you are not familar "
"with model syntax in Dojo engine, go back to this "
"[chapter](../../cairo/models.md)."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:80
msgid "Basic systems"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:82
msgid ""
"Starting from the next chapter, you will implement the "
"`actions_contract.cairo` logic."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:84
msgid ""
"Create `actions_contract.cairo` inside the src folder. the file should "
"contain a basic contract."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:86
msgid "For example, `actions_contract.cairo` should look like this:"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:96
msgid ""
"It should be noted that systems are cairo contracts, by implication, rather "
"than implementing the game logic in systems, we are implementing it in a "
"contract."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:98
msgid "Compile your project"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:100
msgid "Now try `sozo build` to build. Faced some errors?"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:106
msgid ""
"You would probably faced some trait implementation errors, which you can "
"implement as a derive like:"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:139
msgid ""
"Complied? Great! then let's move on. If not fix other issues as above, so "
"that you can run the `sozo build` command successfully."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:141
msgid "Run test"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:143
msgid ""
"Before proceeding to the next chapter, remember that `sozo build` and `sozo "
"test` are important steps to ensure your code is correct."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:145
msgid "Run sozo test. Did you face any errors?"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:155
msgid ""
"For the no implementation error, implement the PrintTrait to run `sozo test` "
"successfully. For the not dropped error, add the Drop trait. Address other "
"errors by adding derives or implementing them on a case-by-case basis."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:157
msgid "Add more models"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:159
msgid ""
"Before you move on, add more models so we can use them in the next chapter "
"when creating the action contract."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:161
#: src/tutorial/onchain-chess/1-action.md:13
msgid "Requirements"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:163
msgid "`Color` enum with values White,Black & None"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:170
msgid "`Game` model:"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:178
msgid "`GameTurn` model:"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:184
msgid ""
"Run `sozo build` to see if your code compiles, we'll handle `test` "
"implementiation in the subsequent chapters."
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:186
msgid ""
"This tutorial is extracted from "
"[here](https://github.com/Akinbola247/chess-dojo/tree/tutorialv3)"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:235
msgid ""
"/// game id, computed as follows pedersen_hash(player1_address, "
"player2_address)\n"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:250
msgid "//printing trait for debug\n"
msgstr ""

#: src/tutorial/onchain-chess/0-setup.md:331
msgid ""
"Congratulations! You've completed the basic setup for building an on-chain "
"chess game 🎉"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:1
msgid "1. Action_Contract"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:3
msgid ""
"This chapter will address implementing `action_contract.cairo`, which spawns "
"the game & squares containing pieces and also allow players to move pieces."
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:5
msgid "What is `action_contract`?"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:7
msgid ""
"To play chess, you need, to start game, spawn the pieces, and move around "
"the board. the `action_contract` has two dominant functions `spawn_game` "
"function which spawns the game entity and places each  piece in its proper "
"position on the board and the `move` funtion which allows pieces to be moved "
"around the board."
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:15
msgid ""
"_Copy the unit tests below and paste them at the bottom of your "
"`action_contract.cairo` file._"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:17
msgid ""
"Write an interface for the `initiate_system` contract and define your "
"functions. In this case, `move` and `spawn_game` "
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:18
msgid ""
"```shell\n"
"    #[starknet::interface]\n"
"    trait IActions<ContractState> {\n"
"        fn move(\n"
"            self: @ContractState,\n"
"            curr_position: (u32, u32),\n"
"            next_position: (u32, u32),\n"
"            caller: ContractAddress, //player\n"
"            game_id: felt252\n"
"        );\n"
"        fn spawn_game(\n"
"            self: @ContractState, white_address: ContractAddress, "
"black_address: ContractAddress, \n"
"        );\n"
"    }\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:33
msgid ""
"Bring in required imports into the contract and initialize storage with the "
"`world_dispatcher` in it like this :"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:49
msgid "should be noted that `actions` is the contract name."
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:51
msgid ""
"Write a `spawn_game` function that accepts the `white address`, and `black "
"address` as input and set necessary states using `set!(...)`.Implement the "
"game entity, comprised of the `Game` model and `GameTurn` model we created "
"in the `models.cairo` and Implement the square entities from a1 to h8 "
"containing the correct `PieceType` in the `spawn_game` fn."
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:52
msgid ""
"```shell\n"
"        #[external(v0)]\n"
"    impl PlayerActionsImpl of IActions<ContractState> {\n"
"        fn spawn_game(\n"
"            self: @ContractState, white_address: ContractAddress, "
"black_address: ContractAddress\n"
"        ) {\n"
"            let world = self.world_dispatcher.read();\n"
"            let game_id = pedersen::pedersen(white_address.into(), "
"black_address.into());\n"
"            set!(\n"
"                world,\n"
"                (\n"
"                    Game {\n"
"                        game_id: game_id,\n"
"                        winner: Color::None(()),\n"
"                        white: white_address,\n"
"                        black: black_address,\n"
"                        }, GameTurn {\n"
"                        game_id: game_id, turn: Color::White(()), \n"
"                    },\n"
"                )\n"
"            );\n"
"\n"
"            set!(world, (Square { game_id: game_id, x: 0, y: 0, piece: "
"PieceType::WhiteRook }));\n"
"\n"
"            set!(world, (Square { game_id: game_id, x: 0, y: 1, piece: "
"PieceType::WhitePawn }));\n"
"\n"
"            set!(world, (Square { game_id: game_id, x: 1, y: 6, piece: "
"PieceType::BlackPawn }));\n"
"\n"
"            set!(world, (Square { game_id: game_id, x: 1, y: 0, piece: "
"PieceType::WhiteKnight }));\n"
"            \n"
"            //the rest of the positions on the board goes here.... \n"
"        }\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:85
msgid ""
"Write a `move` function that accepts the `current position`, `next "
"position`, `caller address`, and `game id`. The `move` function should look "
"like this:"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:86
msgid ""
"```shell\n"
"    fn move(\n"
"            self: @ContractState,\n"
"            curr_position: (u32, u32),\n"
"            next_position: (u32, u32),\n"
"            caller: ContractAddress, //player\n"
"            game_id: felt252\n"
"        ) {\n"
"            let world = self.world_dispatcher.read();\n"
"\n"
"            let (current_x, current_y) = curr_position;\n"
"            let (next_x, next_y) = next_position;\n"
"            current_x.print();\n"
"            current_y.print();\n"
"\n"
"            next_x.print();\n"
"            next_y.print();\n"
"\n"
"            let mut current_square = get!(world, (game_id, current_x, "
"current_y), (Square));\n"
"\n"
"            // check if next_position is out of board or not\n"
"            assert(is_out_of_board(next_position), 'Should be inside "
"board');\n"
"\n"
"            // check if this is the right piece type move\n"
"            assert(\n"
"                is_right_piece_move(current_square.piece, curr_position, "
"next_position),\n"
"                'Should be right piece move'\n"
"            );\n"
"            let target_piece = current_square.piece;\n"
"            // make current_square piece none and move piece to next_square "
"\n"
"            current_square.piece = PieceType::None(());\n"
"            let mut next_square = get!(world, (game_id, next_x, next_y), "
"(Square));\n"
"\n"
"            // check the piece already in next_suqare\n"
"            let maybe_next_square_piece = next_square.piece;\n"
"\n"
"            if maybe_next_square_piece == PieceType::None(()) {\n"
"                next_square.piece = target_piece;\n"
"            } else {\n"
"                if is_piece_is_mine(maybe_next_square_piece) {\n"
"                    panic(array!['Already same color piece exist'])\n"
"                } else {\n"
"                    next_square.piece = target_piece;\n"
"                }\n"
"            }\n"
"\n"
"            set!(world, (next_square));\n"
"            set!(world, (current_square));\n"
"        }\n"
"        //helper functions within the fn move. don't worry, we'll address "
"logic content in the next chapter \n"
"        fn is_piece_is_mine(maybe_piece: PieceType) -> bool {\n"
"            //the rest of the code ....\n"
"        }\n"
"        fn is_correct_turn(maybe_piece: PieceType, caller: ContractAddress, "
"game_id: felt252) -> bool {\n"
"            //the rest of the code ....\n"
"        }\n"
"        fn is_out_of_board(next_position: (u32, u32)) -> bool {\n"
"            //the rest of the code ....\n"
"        }\n"
"        fn is_right_piece_move(maybe_piece: PieceType, curr_position: (u32, "
"u32), next_position: (u32, u32)) -> bool {\n"
"            //the rest of the code ....\n"
"        }\n"
"    }\n"
"```"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:150
msgid "Run `sozo test` and pass all the tests."
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:152
msgid "Test Flow"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:154
msgid ""
"Spawn the test world (`spawn_test_world`) that imports the models in testing."
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:155
msgid "deploy actions contract"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:156
msgid ""
"interact with `spawn_game` function in the `actions` contract by providing "
"white and black player's wallet addresses as inputs."
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:157
msgid "Retrieve the game entity and piece entity created in `actions` contract."
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:158
msgid "Ensure the game has been correctly created."
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:159
msgid "Verify that each `Piece` is located in the correct `Square`."
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:161
msgid "Unit Tests"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:180
#: src/tutorial/onchain-chess/2-legal.md:112
msgid "// models\n"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:203
#: src/tutorial/onchain-chess/3-test.md:48
msgid "//system calls\n"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:207
msgid "//get game\n"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:212
msgid "//get a1 square\n"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:242
#: src/tutorial/onchain-chess/2-legal.md:163
msgid "Need help?"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:244
#: src/tutorial/onchain-chess/2-legal.md:165
msgid ""
"If you're stuck, don't hesitate to ask questions at the [Dojo "
"community](https://discord.gg/akd2yfuRS3)!"
msgstr ""

#: src/tutorial/onchain-chess/1-action.md:246
msgid ""
"You can find the "
"[answer](https://github.com/rkdud007/chess-dojo/blob/tutorialv3/src/actions_contract.cairo) "
"for chapter 1 here."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:1
msgid "2. Check Legal Move"
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:3
msgid "In this chapter, we'll make functions to check:"
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:5
msgid "If the next move goes outside the board."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:6
msgid "If there's a piece that can be captured."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:7
msgid "If the next move is allowed for the type of piece."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:8
msgid "If the user can allow to make a action (based on the piece's color)."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:9
msgid "... You can also add other custom check functions."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:11
msgid "Make Check Functions"
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:13
msgid ""
"We need to add some check functions in `actions` contract. These will help "
"make sure the next move is allowed."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:15
msgid "See if player is moving the right piece"
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:23
msgid "See if the next spot is still on the board."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:38
msgid ""
"See if the person trying the move is doing it at the right time and with "
"their piece color."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:46
msgid "see if it's the right move"
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:98
msgid ""
"You can also add other check functions to be extra sure the move is allowed."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:100
msgid ""
"Once you've made these check functions, you can use them in the `move` "
"function in the contract as illustrated in the previous chapter "
"[here](1-action.md). You can decide how to set them up and which ones to "
"use. We'll give an example to help:"
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:102
msgid "Testing Each Function"
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:104
msgid ""
"Since we have different check functions, we need to test each one. To make "
"this easier, let's use parts that are the same for many tests."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:106
msgid ""
"First, make a helper function called `setup_world`. This will give back an "
"`IWorldDispatcher` and `IActionsDispatcher` that we can use many times in "
"the tests."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:128
msgid "Then, our main `test_move` function will be simpler."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:138
msgid "// other codes are same\n"
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:142
msgid ""
"Now we can make tests that show errors if we try moves that aren't allowed. "
"Let's make a `test_piecetype_illegal` function. This will check if the "
"`is_right_piece_move` function, that you implemented in the move system, "
"works right."
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:156
msgid "// Knight cannot move to that square\n"
msgstr ""

#: src/tutorial/onchain-chess/2-legal.md:161
msgid ""
"Finish by making your tests. These should find wrong moves and give back "
"errors."
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:1
msgid "3 Test Contract"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:3
msgid ""
"In this chapter, we'll use everything we've learned to run a full chess game "
"scenario."
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:5
msgid "Here's what we'll do in our test:"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:7
msgid "Spawn `white_pawn_1` to (0,1)"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:8
msgid "Move `white_pawn_1` to (0,3)"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:9
msgid "Move `black_pawn_2` to (1,6)"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:10
msgid "Move `white_pawn_1` to (0,4)"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:11
msgid "Move `black_pawn_2` to (1,4)"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:12
msgid "Move `white_pawn_1` to (1,4)"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:13
msgid "Capture `black_pawn_2`"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:15
msgid ""
"To place the pieces, use our `spawn_game` function in our `actions` "
"contract. For moving them, use the `move_system` contract. Remember to check "
"if a piece can be captured when using `move_system`."
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:17
msgid "Before we get to the code, set up your integration test like this:"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:19
msgid "Copy the test below and add it to your `src/tests.cairo` file."
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:20
msgid ""
"Make a `test.cairo` in your src and update `lib.cairo` by adding the `mod "
"tests;` line."
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:22
msgid "Full Code"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:52
#: src/tutorial/onchain-chess/3-test.md:122
msgid "//White pawn is now in (0,1)\n"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:57
msgid "//Black pawn is now in (1,6)\n"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:62
#: src/tutorial/onchain-chess/3-test.md:131
msgid "//Move White Pawn to (0,3)\n"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:65
msgid "//White pawn is now in (0,3)\n"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:70
msgid "//Move black Pawn to (1,4)\n"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:73
msgid "//Black pawn is now in (1,4)\n"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:78
msgid ""
"// Move White Pawn to (1,4)\n"
"        // Capture black pawn\n"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:90
msgid "Diving into the Code"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:91
msgid "First, we'll set up the players and their colors."
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:98
msgid ""
"We should list both models with each having CLASS_HASH as elements and then "
"we deploy world to models with `spawn_test_world`"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:101
msgid "//models\n"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:105
msgid ""
"We then deploy our system contracts in our helper function in "
"`action_contract` file. we only imported it in our test file."
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:112
msgid ""
"We use `spawn_game` function in `actions_contract.cairo` to put our Square "
"pieces on the board. Each Square holds a piece. The system's `spawn_game` "
"function needs some input i.e the addresses of the players."
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:115
msgid "// spawn\n"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:119
msgid ""
"Let's check if a White pawn is at (0,1). Remember, to get a piece that "
"exists on the square, you need to use the keys of the `Square` model, which "
"are `game_id`, `x`, and `y`. Do the same check for the Black Pawn."
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:128
msgid ""
"After setting up the board, use `move` function in the contract to make "
"moves. Provide the current position, the next position, the player's "
"address, and the game id."
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:135
msgid "Keep moving pieces and checking if they're in the right places."
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:137
msgid "Congratulations!"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:139
msgid ""
"You've made the basic contracts for a chess game using the Dojo engine! This "
"tutorial was just the beginning. There are many ways to make the game "
"better, like optimizing parts, adding checks, or considering special cases. "
"If you want to do more with this chess game, try these challenges:"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:141
msgid ""
"Add a checkmate feature. Our game doesn't end now, so decide when it should!"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:142
msgid ""
"Include special moves like castling, En Passant Capture, or Pawn Promotion."
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:143
msgid ""
"Make your own chess rules! You could even create your own version of the "
"[immortal game](https://immortal.game/)"
msgstr ""

#: src/tutorial/onchain-chess/3-test.md:145
msgid ""
"Lastly, share your project with others in the [Dojo "
"community](https://discord.gg/akd2yfuRS3)!"
msgstr ""

#: src/tutorial/onchain-chess/4-utils.md:1
msgid "4. Modularize functions"
msgstr ""

#: src/tutorial/onchain-chess/4-utils.md:2
msgid ""
"In order to keep our code has dry as possible, you can modularize your "
"functions. To do this, we'll create an `utils.cairo` file and add the below:"
msgstr ""

#: src/tutorial/onchain-chess/4-utils.md:8
#: src/tutorial/onchain-chess/4-utils.md:12
#: src/tutorial/onchain-chess/4-utils.md:16
#: src/tutorial/onchain-chess/4-utils.md:22
msgid "//rest of the code here\n"
msgstr ""

#: src/tutorial/onchain-chess/4-utils.md:26
msgid ""
"In your, `action_contracts`, these functions can be imported for use as "
"follows "
msgstr ""

#: src/tutorial/onchain-chess/4-utils.md:30
msgid "That's right! you have successfully modularized your functions."
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:1
msgid "Deploy your game using Slot"
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:3
msgid ""
"Welcome to this tutorial where we'll guide you through deploying a project "
"using the Slot."
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:7
msgid ""
"Before we start, make sure you are using the latest dojo version. Run "
"`dojoup` to have the latest version installed."
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:9
msgid "Now, let's create a new folder and initialize it with sozo."
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:16
msgid ""
"First, we need to set up our configuration, starting by authenticating with "
"Cartridge. To do this, run the following command, which will then prompt a "
"new screen where you will need to go through the authentication process."
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:22
msgid ""
"Once successful, you can create a new deployment with a unique "
"`DEPLOYMENT_NAME`. To do this, run the following command:"
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:28
msgid ""
"After that, you should receive the RPC endpoint for the katana slot. Now, "
"you can use that and update your `Scarb.toml` file with the new RPC endpoint "
"as follows:"
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:30
msgid ""
"```toml\n"
"[tool.dojo.env]\n"
"rpc_url = \"YOUR_NEW_RPC_URL\"\n"
"```"
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:35
msgid ""
"Now, you can stream katana in a new terminal. Open a new terminal and run "
"the following command:"
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:41
msgid ""
"Then, copy the account address and the private key from the first account "
"into the `Scarb.toml` file and replace the existing ones as follows:"
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:43
msgid ""
"```toml\n"
"account_address = \"YOUR_NEW_ACCOUNT_ADDRESS\"\n"
"private_key = \"YOUR_NEW_PRIVATE_KEY\"\n"
"```"
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:48
msgid ""
"Note: For each new Katana slot, a different account seed is used, making all "
"the accounts unique!"
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:52
msgid ""
"Once finished with the new configurations, we are ready to build and migrate "
"the project. To build the project, run the following command:"
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:58
msgid "Now, let's migrate the project to our new katana slot:"
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:64
msgid ""
"If the migrations have been successful, you will receive the "
"`WORLD_ADDRESS`, which then you can use to interact with your world."
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:75
msgid ""
"Congratulations! You have successfully deployed your project with a Katana "
"slot."
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:79
msgid "To initiate a Torri indexer slot, execute the following command:"
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:85
msgid ""
"Once deployment is successful, you should receive the endpoints for GraphQL "
"and gRPC."
msgstr ""

#: src/tutorial/deploy-using-slot/main.md:87
msgid ""
"If you wish to stream the logs, you can run the following command in a new "
"terminal:"
msgstr ""

#: src/misc/contributors.md:1
msgid "Contributing to Dojo Book"
msgstr ""

#: src/misc/contributors.md:3
msgid ""
"As the Dojo engine progresses and develops, it is essential for the Dojo "
"book to keep pace with these advancements. Updating and refining the book "
"ensures that it remains a relevant and valuable resource for those "
"interested in understanding and utilizing the latest Dojo engine features "
"and capabilities. All help is welcome!"
msgstr ""

#: src/misc/contributors.md:5
msgid "The purpose of the book"
msgstr ""

#: src/misc/contributors.md:7
msgid ""
"The Dojo book is designed to be a comprehensive resource that caters to "
"users at various levels of experience. It aims to serve as both an "
"introductory guide for those new to Dojo and its ancillary packages, as well "
"as a reference for more experienced users seeking to deepen their "
"understanding of the engine's features and capabilities."
msgstr ""

#: src/misc/contributors.md:9
msgid "The book is split into some major chapters:"
msgstr ""

#: src/misc/contributors.md:11
msgid "Framework Theory"
msgstr ""

#: src/misc/contributors.md:13
msgid "Building a World"
msgstr ""

#: src/misc/contributors.md:15
msgid "Code of Conduct"
msgstr ""

#: src/misc/contributors.md:17
msgid ""
"The book follows the [Rust Code of "
"Conduct](https://www.rust-lang.org/policies/code-of-conduct)."
msgstr ""

#: src/misc/contributors.md:19
msgid "Ways to contribute"
msgstr ""

#: src/misc/contributors.md:21
msgid "Issues"
msgstr ""

#: src/misc/contributors.md:23
msgid ""
"If you think that some content is missing or out-of-date, feel free to open "
"an issue. If you find multiple pieces of content lacking, please open up a "
"separate issue for each."
msgstr ""

#: src/misc/contributors.md:25
msgid ""
"The issues will then be labeled so other contributors can find chunks of "
"work they are interested in more easily."
msgstr ""

#: src/misc/contributors.md:27
msgid ""
"The issue should contain what is missing, or what could be improved, in as "
"much detail as you deem necessary."
msgstr ""

#: src/misc/contributors.md:29
msgid "Pull requests"
msgstr ""

#: src/misc/contributors.md:31
msgid ""
"Feel free to contribute changes to the book by opening a pull request - "
"anything is welcome, from reformulating a sentence, fixing a typo, to adding "
"new sections or chapters."
msgstr ""

#: src/misc/contributors.md:33
msgid ""
"When your pull request is open, other contributors will take a look and may "
"request changes. Do not be discouraged!"
msgstr ""

#: src/misc/contributors.md:35
msgid "Writing style"
msgstr ""

#: src/misc/contributors.md:37
msgid ""
"This section documents a few standards for writing used throughout the book."
msgstr ""

#: src/misc/contributors.md:39
msgid "Chapters start with a second level heading"
msgstr ""

#: src/misc/contributors.md:41
msgid "We use:"
msgstr ""

#: src/misc/contributors.md:47
msgid "We do not use:"
msgstr ""

