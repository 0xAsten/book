{"documentCount":235,"nextId":235,"documentIds":{"0":"docs/pages/example.mdx#example","1":"docs/pages/getting-started.md#dojo-the-provable-game-engine","2":"docs/pages/getting-started.md#organizational-structure","3":"docs/pages/getting-started.md#how-do-i-get-involved","4":"docs/pages/cairo/authorization.md#authorization","5":"docs/pages/cairo/authorization.md#auth-architecture","6":"docs/pages/cairo/authorization.md#providing-authorization","7":"docs/pages/cairo/commands.md#commands","8":"docs/pages/cairo/commands.md#using-commands","9":"docs/pages/cairo/commands.md#the-get-command","10":"docs/pages/cairo/commands.md#the-set-command","11":"docs/pages/cairo/commands.md#the-emit-command","12":"docs/pages/cairo/commands.md#the-delete-command","13":"docs/pages/cairo/config.md#config","14":"docs/pages/cairo/entities.md#entities","15":"docs/pages/cairo/enum.md#enum","16":"docs/pages/cairo/events.md#events","17":"docs/pages/cairo/events.md#model-events","18":"docs/pages/cairo/events.md#world-events","19":"docs/pages/cairo/events.md#custom-events","20":"docs/pages/cairo/hello-dojo.md#hello-dojo","21":"docs/pages/cairo/hello-dojo.md#dojo-as-an-ecs-in-15-minutes","22":"docs/pages/cairo/hello-dojo.md#anatomy-of-a-dojo-project","23":"docs/pages/cairo/hello-dojo.md#breaking-it-down","24":"docs/pages/cairo/hello-dojo.md#system-is-a-function-in-a-contract","25":"docs/pages/cairo/hello-dojo.md#run-it-locally","26":"docs/pages/cairo/hello-dojo.md#indexing","27":"docs/pages/cairo/hello-dojo.md#next-steps","28":"docs/pages/cairo/metadata.md#metadata","29":"docs/pages/cairo/metadata.md#world-metadata","30":"docs/pages/cairo/metadata.md#contract-metadata","31":"docs/pages/cairo/migration.md#migration","32":"docs/pages/cairo/models.md#models","33":"docs/pages/cairo/models.md#models-are-structs","34":"docs/pages/cairo/models.md#the-key-attribute","35":"docs/pages/cairo/models.md#implementing-traits","36":"docs/pages/cairo/models.md#custom-setting-models","37":"docs/pages/cairo/models.md#types","38":"docs/pages/cairo/models.md#custom-types--enums","39":"docs/pages/cairo/models.md#in-practice-with-modularity-in-mind","40":"docs/pages/cairo/origami.md#what-is-origami","41":"docs/pages/cairo/overview.md#a-new-approach-to-onchain-game-development","42":"docs/pages/cairo/overview.md#delving-into-the-architecture","43":"docs/pages/cairo/overview.md#breakdown","44":"docs/pages/cairo/overview.md#position-struct---the-dojo-model","45":"docs/pages/cairo/overview.md#spawn-function---a-dojo-system","46":"docs/pages/cairo/systems.md#systems","47":"docs/pages/cairo/systems.md#what-are-systems","48":"docs/pages/cairo/systems.md#system-permissions","49":"docs/pages/cairo/systems.md#system-structure","50":"docs/pages/cairo/systems.md#breaking-it-down","51":"docs/pages/cairo/systems.md#system-is-a-function-in-a-contract","52":"docs/pages/cairo/systems.md#spawn-function","53":"docs/pages/cairo/systems.md#the-dojocontract-decorator","54":"docs/pages/cairo/testing.md#testing","55":"docs/pages/cairo/testing.md#writing-unit-tests","56":"docs/pages/cairo/testing.md#writing-integration-tests","57":"docs/pages/cairo/testing.md#useful-dojo-test-functions","58":"docs/pages/cairo/world.md#the-world-contract","59":"docs/pages/cairo/world.md#events","60":"docs/pages/cairo/world.md#full-world-api","61":"docs/pages/cairo/world.md#uuid","62":"docs/pages/client/dojojs.md#dojojs","63":"docs/pages/client/dojojs.md#dojoenginecore","64":"docs/pages/client/dojojs.md#dojoenginecreate-burner","65":"docs/pages/client/dojojs.md#dojoengineutils","66":"docs/pages/client/dojojs.md#dojoenginereact","67":"docs/pages/client/dojojs.md#dojoenginetorii-client","68":"docs/pages/client/dojojs.md#dojoenginetorii-wasm","69":"docs/pages/client/overview.md#overview","70":"docs/pages/client/torii.md#torii-client","71":"docs/pages/client/torii.md#usage-in-rust-projects","72":"docs/pages/community/get-started.md#get-started","73":"docs/pages/community/get-started.md#ecosystem--studios-powered-by-dojo","74":"docs/pages/community/get-started.md#realms-world","75":"docs/pages/community/get-started.md#briq-world","76":"docs/pages/community/get-started.md#cartridge","77":"docs/pages/community/get-started.md#zkorp","78":"docs/pages/community/get-started.md#templates--libraries","79":"docs/pages/community/get-started.md#awesome-projects","80":"docs/pages/deployment/locally.md#local-deployment-with-katana","81":"docs/pages/deployment/locally.md#easy-katana-deployments","82":"docs/pages/deployment/locally.md#step-by-step-guide-to-deploy-on-katana","83":"docs/pages/deployment/remote.md#deployment-to-remote-network","84":"docs/pages/deployment/remote.md#deploy-to-public-starknet","85":"docs/pages/deployment/remote.md#deploy-to-remote-katana","86":"docs/pages/deployment/remote.md#deploy-to-remote-madara","87":"docs/pages/getting-started/contributing.md#contributing-to-the-core","88":"docs/pages/getting-started/contributing.md#how-to-contribute","89":"docs/pages/getting-started/from-source.md#building-from-source","90":"docs/pages/getting-started/from-source.md#prerequisites","91":"docs/pages/getting-started/from-source.md#building","92":"docs/pages/getting-started/quick-start.md#quick-start","93":"docs/pages/getting-started/quick-start.md#install-dojoup","94":"docs/pages/getting-started/quick-start.md#next-steps","95":"docs/pages/getting-started/setup.md#development-setup","96":"docs/pages/getting-started/setup.md#prerequisites","97":"docs/pages/getting-started/setup.md#guide","98":"docs/pages/getting-started/setup.md#clone","99":"docs/pages/getting-started/setup.md#linux--mac","100":"docs/pages/getting-started/setup.md#1-install-rust-and-dependencies","101":"docs/pages/getting-started/setup.md#2-install-scarb-package-manager","102":"docs/pages/getting-started/setup.md#3-add-the-cairo-10-vscode-extension","103":"docs/pages/getting-started/setup.md#windows","104":"docs/pages/getting-started/setup.md#container","105":"docs/pages/misc/contributors.md#contributing-to-dojo-book","106":"docs/pages/misc/contributors.md#the-purpose-of-the-book","107":"docs/pages/misc/contributors.md#code-of-conduct","108":"docs/pages/misc/contributors.md#ways-to-contribute","109":"docs/pages/misc/contributors.md#issues","110":"docs/pages/misc/contributors.md#pull-requests","111":"docs/pages/misc/contributors.md#writing-style","112":"docs/pages/misc/contributors.md#chapters-start-with-a-second-level-heading","113":"docs/pages/theory/autonomous-worlds.md#autonomous-worlds","114":"docs/pages/theory/autonomous-worlds.md#homework","115":"docs/pages/theory/cairo.md#provable-games","116":"docs/pages/theory/cairo.md#cairo","117":"docs/pages/theory/cairo.md#essential-reading","118":"docs/pages/theory/cairo.md#starknet-as-an-l2","119":"docs/pages/theory/cairo.md#starknet-as-an-appchain","120":"docs/pages/theory/faqs.md#faqs","121":"docs/pages/theory/faqs.md#who-owns-dojo","122":"docs/pages/theory/faqs.md#why-dojo","123":"docs/pages/theory/faqs.md#what-is-the-dojo-roadmap","124":"docs/pages/theory/faqs.md#what-is-an-onchain-game","125":"docs/pages/theory/faqs.md#what-is-an-autonomous-world","126":"docs/pages/theory/faqs.md#what-is-cairo","127":"docs/pages/theory/faqs.md#what-is-a-provable-game","128":"docs/pages/theory/faqs.md#can-dojo-implement-client-side-proofs","129":"docs/pages/theory/faqs.md#can-i-deploy-dojo-on-starknet","130":"docs/pages/theory/what-is-dojo.md#what-is-dojo","131":"docs/pages/theory/what-is-dojo.md#stop-building-infrastructure-start-building-games","132":"docs/pages/theory/what-is-dojo.md#entity-component-system-ecs","133":"docs/pages/theory/what-is-dojo.md#what-dojo-doesnt-give-you","134":"docs/pages/toolchain/dojoup.md#dojoup","135":"docs/pages/toolchain/dojoup.md#installing","136":"docs/pages/toolchain/dojoup.md#usage","137":"docs/pages/toolchain/dojoup.md#note---branch---repo-and---version-flags-are-ignored-during-local-installations","138":"docs/pages/toolchain/dojoup.md#precompiled-binaries","139":"docs/pages/cairo/migration/0.3.0.md#migration-guide-to-030","140":"docs/pages/cairo/migration/0.3.0.md#components-to-models","141":"docs/pages/cairo/migration/0.3.0.md#changes-in-model-implementation","142":"docs/pages/cairo/migration/0.3.0.md#schema-introduction","143":"docs/pages/cairo/migration/0.3.0.md#systems-update","144":"docs/pages/cairo/migration/0.3.0.md#interface-creation","145":"docs/pages/cairo/migration/0.3.0.md#interface-implementation","146":"docs/pages/cairo/migration/0.3.0.md#dojocontract-decorator","147":"docs/pages/cairo/migration/0.3.0.md#events","148":"docs/pages/cairo/migration/0.3.0.md#testing-changes","149":"docs/pages/cairo/migration/0.3.0.md#setup","150":"docs/pages/cairo/migration/0.3.0.md#function-testing","151":"docs/pages/cairo/migration/0.4.0.md#migration-guide-to-040","152":"docs/pages/client/sdk/c.md#dojo-c","153":"docs/pages/client/sdk/dojojs.md#dojojs","154":"docs/pages/toolchain/katana/development.md#development","155":"docs/pages/toolchain/slot/overview.md#slot","156":"docs/pages/toolchain/slot/overview.md#installation","157":"docs/pages/toolchain/slot/overview.md#deploy-using-slot","158":"docs/pages/toolchain/slot/reference.md#slot-reference","159":"docs/pages/toolchain/slot/reference.md#name","160":"docs/pages/toolchain/slot/reference.md#usage","161":"docs/pages/toolchain/slot/reference.md#commands","162":"docs/pages/toolchain/sozo/development.md#development","163":"docs/pages/toolchain/sozo/overview.md#sozo","164":"docs/pages/toolchain/sozo/overview.md#features","165":"docs/pages/toolchain/sozo/overview.md#installation","166":"docs/pages/toolchain/sozo/overview.md#installing-from-source","167":"docs/pages/toolchain/sozo/reference.md#sozo-reference","168":"docs/pages/toolchain/sozo/reference.md#common-options","169":"docs/pages/toolchain/sozo/reference.md#project-commands","170":"docs/pages/toolchain/sozo/reference.md#world-commands","171":"docs/pages/toolchain/torii/graphql.md#torii---graphql","172":"docs/pages/toolchain/torii/graphql.md#name","173":"docs/pages/toolchain/torii/graphql.md#graphql-playground","174":"docs/pages/toolchain/torii/graphql.md#usage","175":"docs/pages/toolchain/torii/graphql.md#pre-requisites","176":"docs/pages/toolchain/torii/graphql.md#schema-and-query-defintions","177":"docs/pages/toolchain/torii/graphql.md#query-operation","178":"docs/pages/toolchain/torii/graphql.md#transactions","179":"docs/pages/toolchain/torii/graphql.md#pagination","180":"docs/pages/toolchain/torii/graphql.md#cursor","181":"docs/pages/toolchain/torii/graphql.md#offsetlimit","182":"docs/pages/toolchain/torii/graphql.md#subscription-operations","183":"docs/pages/toolchain/torii/graphql.md#susbcription-to-events","184":"docs/pages/toolchain/torii/grpc.md#grpc","185":"docs/pages/toolchain/torii/overview.md#torii","186":"docs/pages/toolchain/torii/overview.md#torii-server","187":"docs/pages/toolchain/torii/overview.md#torii-client","188":"docs/pages/toolchain/torii/overview.md#usage","189":"docs/pages/toolchain/torii/overview.md#installation","190":"docs/pages/toolchain/torii/overview.md#installing-from-source","191":"docs/pages/toolchain/torii/reference.md#torii-reference","192":"docs/pages/toolchain/torii/reference.md#name","193":"docs/pages/toolchain/torii/reference.md#usage","194":"docs/pages/toolchain/torii/reference.md#description","195":"docs/pages/toolchain/torii/reference.md#database-url","196":"docs/pages/toolchain/torii/reference.md#options","197":"docs/pages/toolchain/torii/reference.md#general-options","198":"docs/pages/tutorial/deploy-using-slot/main.md#deploy-your-game-using-slot","199":"docs/pages/tutorial/deploy-using-slot/main.md#torii","200":"docs/pages/tutorial/onchain-chess/0-setup.md#0-setup","201":"docs/pages/tutorial/onchain-chess/0-setup.md#initializing-the-project","202":"docs/pages/tutorial/onchain-chess/0-setup.md#cleaning-up-the-boilerplate","203":"docs/pages/tutorial/onchain-chess/0-setup.md#basic-models","204":"docs/pages/tutorial/onchain-chess/0-setup.md#basic-systems","205":"docs/pages/tutorial/onchain-chess/0-setup.md#compile-your-project","206":"docs/pages/tutorial/onchain-chess/0-setup.md#implement-traits-for-models","207":"docs/pages/tutorial/onchain-chess/0-setup.md#requirements","208":"docs/pages/tutorial/onchain-chess/2-move.md#2-move-function","209":"docs/pages/tutorial/onchain-chess/2-move.md#test-flow","210":"docs/pages/tutorial/onchain-chess/2-move.md#unit-tests","211":"docs/pages/tutorial/onchain-chess/2-move.md#diving-into-the-code","212":"docs/pages/tutorial/onchain-chess/2-move.md#setup_world","213":"docs/pages/tutorial/onchain-chess/2-move.md#test_spawn","214":"docs/pages/tutorial/onchain-chess/2-move.md#test_move","215":"docs/pages/tutorial/onchain-chess/2-move.md#need-help","216":"docs/pages/tutorial/onchain-chess/3-test.md#3-test-contract","217":"docs/pages/tutorial/onchain-chess/3-test.md#full-code","218":"docs/pages/tutorial/onchain-chess/3-test.md#congratulations","219":"docs/pages/tutorial/onchain-chess/README.md#building-a-chess-game","220":"docs/pages/tutorial/onchain-chess/README.md#what-are-we-building","221":"docs/pages/tutorial/onchain-chess/README.md#what-after-this-guide","222":"docs/pages/toolchain/slot/deployments-commands/deployments.md#slot-deployments","223":"docs/pages/toolchain/slot/deployments-commands/deployments.md#commands","224":"docs/pages/toolchain/sozo/common-options/offline.md#offline","225":"docs/pages/toolchain/sozo/common-options/offline.md#use-sozo-offline","226":"docs/pages/toolchain/sozo/common-options/offline.md#usage","227":"docs/pages/toolchain/sozo/common-options/profile.md#use-sozo-profiles","228":"docs/pages/toolchain/sozo/common-options/profile.md#usage","229":"docs/pages/toolchain/sozo/project-commands/build.md#sozo-build","230":"docs/pages/toolchain/sozo/project-commands/init.md#sozo-init","231":"docs/pages/toolchain/sozo/project-commands/test.md#sozo-test","232":"docs/pages/toolchain/sozo/world-commands/auth.md#sozo-auth","233":"docs/pages/toolchain/sozo/world-commands/events.md#sozo-events","234":"docs/pages/toolchain/sozo/world-commands/register.md#sozo-register"},"fieldIds":{"title":0,"titles":1,"text":2},"fieldLength":{"0":[1,1,6],"1":[5,1,89],"2":[2,6,34],"3":[6,6,10],"4":[1,1,64],"5":[2,2,29],"6":[2,2,43],"7":[1,1,81],"8":[2,2,17],"9":[3,2,85],"10":[3,2,42],"11":[3,2,33],"12":[3,2,15],"13":[1,1,84],"14":[1,1,86],"15":[1,1,88],"16":[1,1,54],"17":[2,2,63],"18":[2,2,49],"19":[2,2,83],"20":[2,1,24],"21":[7,2,106],"22":[5,9,244],"23":[3,8,1],"24":[6,11,116],"25":[4,8,162],"26":[1,8,274],"27":[2,8,35],"28":[1,1,42],"29":[2,2,96],"30":[2,2,29],"31":[1,1,6],"32":[1,1,39],"33":[3,2,66],"34":[3,4,93],"35":[2,4,58],"36":[3,4,86],"37":[1,4,22],"38":[4,4,75],"39":[6,2,142],"40":[4,1,28],"41":[7,1,39],"42":[4,8,115],"43":[1,8,12],"44":[5,9,42],"45":[5,9,38],"46":[1,1,57],"47":[4,2,45],"48":[2,2,23],"49":[2,2,103],"50":[3,1,1],"51":[6,6,21],"52":[2,6,30],"53":[4,4,123],"54":[1,1,45],"55":[3,2,66],"56":[3,2,105],"57":[4,5,21],"58":[3,1,75],"59":[1,4,23],"60":[3,4,85],"61":[2,4,28],"62":[2,1,21],"63":[3,3,38],"64":[4,3,19],"65":[3,3,13],"66":[3,3,10],"67":[4,3,13],"68":[4,3,11],"69":[1,1,31],"70":[2,1,29],"71":[4,3,2],"72":[2,1,23],"73":[6,1,1],"74":[2,7,3],"75":[2,7,3],"76":[1,7,3],"77":[1,7,2],"78":[3,1,33],"79":[2,1,113],"80":[4,1,37],"81":[3,5,43],"82":[7,5,49],"83":[4,1,87],"84":[4,5,19],"85":[3,5,25],"86":[4,5,8],"87":[4,1,17],"88":[3,4,33],"89":[3,1,18],"90":[1,4,39],"91":[1,4,49],"92":[2,1,23],"93":[2,3,57],"94":[2,3,10],"95":[2,1,32],"96":[1,3,4],"97":[1,2,1],"98":[1,3,8],"99":[3,3,1],"100":[5,6,42],"101":[5,6,23],"102":[8,6,11],"103":[1,3,3],"104":[1,3,3],"105":[4,1,39],"106":[5,5,59],"107":[3,5,9],"108":[3,5,1],"109":[1,7,57],"110":[2,7,40],"111":[2,5,13],"112":[7,7,7],"113":[2,1,205],"114":[1,3,33],"115":[2,1,84],"116":[1,2,109],"117":[2,4,6],"118":[4,3,95],"119":[4,3,62],"120":[1,1,1],"121":[4,2,22],"122":[3,2,27],"123":[6,2,28],"124":[6,2,32],"125":[6,2,33],"126":[4,2,34],"127":[6,2,86],"128":[7,2,33],"129":[7,2,27],"130":[4,1,81],"131":[5,4,18],"132":[5,8,81],"133":[7,8,29],"134":[1,1,11],"135":[1,1,9],"136":[1,1,69],"137":[12,3,22],"138":[2,2,44],"139":[5,1,20],"140":[3,6,46],"141":[4,6,20],"142":[2,6,95],"143":[2,6,52],"144":[2,8,60],"145":[2,8,60],"146":[4,8,29],"147":[1,6,39],"148":[2,6,1],"149":[1,8,46],"150":[2,8,33],"151":[5,1,2],"152":[2,1,3],"153":[2,1,1],"154":[1,1,1],"155":[1,1,23],"156":[1,1,25],"157":[3,1,24],"158":[2,1,1],"159":[1,3,13],"160":[1,3,4],"161":[1,3,18],"162":[1,1,1],"163":[1,1,62],"164":[1,1,24],"165":[1,1,13],"166":[3,2,38],"167":[2,1,1],"168":[2,3,3],"169":[2,3,5],"170":[2,3,7],"171":[2,1,1],"172":[1,3,73],"173":[2,4,33],"174":[1,3,1],"175":[2,4,38],"176":[4,3,69],"177":[2,3,84],"178":[1,5,113],"179":[1,5,48],"180":[1,6,64],"181":[2,6,33],"182":[2,3,135],"183":[3,5,102],"184":[1,1,38],"185":[1,1,43],"186":[2,2,15],"187":[2,2,19],"188":[1,2,35],"189":[1,1,14],"190":[3,2,33],"191":[2,1,1],"192":[1,3,12],"193":[1,3,3],"194":[1,3,55],"195":[2,4,66],"196":[1,3,1],"197":[2,4,75],"198":[5,1,175],"199":[1,5,50],"200":[2,1,17],"201":[3,2,24],"202":[4,2,87],"203":[2,2,109],"204":[2,2,46],"205":[3,2,26],"206":[4,2,22],"207":[1,6,108],"208":[3,1,105],"209":[2,3,45],"210":[2,3,102],"211":[4,3,1],"212":[2,7,47],"213":[2,7,95],"214":[2,7,62],"215":[3,3,16],"216":[3,1,74],"217":[2,3,92],"218":[2,3,83],"219":[4,1,80],"220":[5,4,80],"221":[5,4,29],"222":[2,1,9],"223":[1,3,31],"224":[1,1,1],"225":[3,1,10],"226":[1,3,7],"227":[3,1,21],"228":[1,4,46],"229":[2,1,15],"230":[2,1,20],"231":[2,1,19],"232":[2,1,42],"233":[2,1,8],"234":[2,1,34]},"averageFieldLength":[2.6808510638297873,3.1659574468085108,43.5063829787234],"storedFields":{"0":{"href":"/example#example","html":"</header>\n<p>This is an example page.</p>","isPage":true,"text":"\nThis is an example page.","title":"Example","titles":[]},"1":{"href":"/getting-started#dojo-the-provable-game-engine","html":"</header>\n<p>Dojo is a provable game engine built using <a href=\"https://github.com/starkware-libs/cairo\">Cairo</a>. It establishes a standard for game development via smart contracts, blending best practices with streamlined development and deployment tools. With Dojo by your side, you can evolve from initial concept to a fully realized game in days, not weeks.</p>\n<p>This book is dedicated to familiarizing you with the Dojo engine and the potential of Provable games. A special section on the <a href=\"/theory/autonomous-worlds.md\">Theory</a> elucidates this emergent concept of autonomous worlds and Provable games.</p>\n<ul>\n<li><a href=\"/getting-started/quick-start.md\">Quickstart</a></li>\n<li><a href=\"/theory/what-is-dojo.md\">What is Dojo? </a></li>\n<li><a href=\"/cairo/overview.md\">Explore the Architecture</a></li>\n</ul>\n<blockquote>\n<p>Dojo is an open-source onchain gaming project currently in its early development phase, and warmly welcomes contributors. For additional resources, join the community on <a href=\"https://discord.gg/vUN4Xq9Qv6\">Discord</a> and check out the <a href=\"/misc/contributors.md\">contribution guide</a>.</p>\n</blockquote>\n<hr/>\n","isPage":true,"text":"\nDojo is a provable game engine built using Cairo. It establishes a standard for game development via smart contracts, blending best practices with streamlined development and deployment tools. With Dojo by your side, you can evolve from initial concept to a fully realized game in days, not weeks.\nThis book is dedicated to familiarizing you with the Dojo engine and the potential of Provable games. A special section on the Theory elucidates this emergent concept of autonomous worlds and Provable games.\n\nQuickstart\nWhat is Dojo? \nExplore the Architecture\n\n\nDojo is an open-source onchain gaming project currently in its early development phase, and warmly welcomes contributors. For additional resources, join the community on Discord and check out the contribution guide.\n\n\n","title":"Dojo The Provable Game Engine","titles":[]},"2":{"href":"/getting-started#organizational-structure","html":"\n<p>Dojo is an open-source initiative, licensed under Apache 2.0, dedicated to promoting and advancing the concept of Autonomous Worlds (AWs). It is spearheaded by <a href=\"https://cartridge.gg/\">Cartridge</a>, <a href=\"https://bibliothecadao.xyz/\">Realms &amp; BibliothecaDAO</a>, <a href=\"https://briq.construction/\">briq</a> and many more <a href=\"https://github.com/orgs/dojoengine/people\">contributors</a>.</p>\n","isPage":false,"text":"\nDojo is an open-source initiative, licensed under Apache 2.0, dedicated to promoting and advancing the concept of Autonomous Worlds (AWs). It is spearheaded by Cartridge, Realms &amp; BibliothecaDAO, briq and many more contributors.\n","title":"Organizational Structure","titles":["Dojo The Provable Game Engine",null]},"3":{"href":"/getting-started#how-do-i-get-involved","html":"\n<p>Check out our <a href=\"https://github.com/dojoengine\">Github</a>, our <a href=\"https://twitter.com/dojostarknet\">Twitter</a>, <a href=\"https://discord.gg/vUN4Xq9Qv6\">Discord</a> and <a href=\"https://book.dojoengine.org/misc/contributors.html\">contribution guide</a></p>","isPage":false,"text":"\nCheck out our Github, our Twitter, Discord and contribution guide","title":"How do I get involved?","titles":["Dojo The Provable Game Engine",null]},"4":{"href":"/cairo/authorization#authorization","html":"\n<blockquote>\n<p>Authorization is crucial to a world, just like how authorization is crucial to any smart contract.</p>\n</blockquote>\n<p>As discussed in the <a href=\"/cairo/world.md\">World</a> chapter, Autonomous Worlds (AWs) function as sovereign chains nested within a public blockchain. These Worlds are also open to the public. This structure allows anyone to enhance a World by deploying models or systems. However, this openness also introduces security considerations. Similar to Ethereum, interacting with a model&#x27;s state within a System requires the appropriate authorization from the model owner.</p>\n","isPage":true,"text":"\n\nAuthorization is crucial to a world, just like how authorization is crucial to any smart contract.\n\nAs discussed in the World chapter, Autonomous Worlds (AWs) function as sovereign chains nested within a public blockchain. These Worlds are also open to the public. This structure allows anyone to enhance a World by deploying models or systems. However, this openness also introduces security considerations. Similar to Ethereum, interacting with a model&#x27;s state within a System requires the appropriate authorization from the model owner.\n","title":"Authorization","titles":[null]},"5":{"href":"/cairo/authorization#auth-architecture","html":"\n<p>Every time a <code>set!</code> is called in a <code>System</code>, the world checks if the <code>System</code> has authorization to update the model state. Only when the <code>System</code> possesses the necessary authorization, the <code>set!</code> is executed. The following diagram illustrates the authorization architecture.</p>\n<p><img src=\"/dojo-auth.png\" alt=\"Authorization Architecture\"/></p>\n","isPage":false,"text":"\nEvery time a set! is called in a System, the world checks if the System has authorization to update the model state. Only when the System possesses the necessary authorization, the set! is executed. The following diagram illustrates the authorization architecture.\n\n","title":"Auth Architecture","titles":[null,"Authorization"]},"6":{"href":"/cairo/authorization#providing-authorization","html":"\n<blockquote>\n<p>The deployer of the model is its initial owner. A model owner is able to grant the <code>owner</code> and <code>writer</code> roles. Only owners can grant a System the <code>writer</code> role which allows it to update the model.</p>\n</blockquote>\n<p><code>sozo</code> offers a convenient tool to authorize systems.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark-dimmed\"><code data-language=\"shell\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> auth writer Moves spawn</span></span></code></pre></figure>\n<p>This command will generate a <code>writer</code> authorization for the <code>spawn</code> system to update the <code>Moves</code> model.</p>","isPage":false,"text":"\n\nThe deployer of the model is its initial owner. A model owner is able to grant the owner and writer roles. Only owners can grant a System the writer role which allows it to update the model.\n\nsozo offers a convenient tool to authorize systems.\nsozo auth writer Moves spawn\nThis command will generate a writer authorization for the spawn system to update the Moves model.","title":"Providing Authorization","titles":[null,"Authorization"]},"7":{"href":"/cairo/commands#commands","html":"\n<strong><em>TL;DR</em></strong>\n<ul>\n<li>Commands are shorthand ways to write function calls</li>\n<li>Commands abstract complex queries into shorthands</li>\n<li>Commands are similar to rust macros</li>\n</ul>\n<p>Understanding commands is key to understanding Dojo. You will leverage them heavily within the systems you design.</p>\n<p>Commands in Dojo are generalized functions that are expanded at compile time to facilitate system execution. They provide a convenient way for systems to interact with the world state by abstracting common operations, such as retrieving or updating models, and generating unique IDs. By leveraging these commands, developers can streamline their system implementations and improve code readability.</p>\n","isPage":true,"text":"\nTL;DR\n\nCommands are shorthand ways to write function calls\nCommands abstract complex queries into shorthands\nCommands are similar to rust macros\n\nUnderstanding commands is key to understanding Dojo. You will leverage them heavily within the systems you design.\nCommands in Dojo are generalized functions that are expanded at compile time to facilitate system execution. They provide a convenient way for systems to interact with the world state by abstracting common operations, such as retrieving or updating models, and generating unique IDs. By leveraging these commands, developers can streamline their system implementations and improve code readability.\n","title":"Commands","titles":[null]},"8":{"href":"/cairo/commands#using-commands","html":"\n<p>Commands are used within systems to interact with the world state. They are called using the following syntax:</p>\n","isPage":false,"text":"\nCommands are used within systems to interact with the world state. They are called using the following syntax:\n","title":"Using commands","titles":[null,"Commands"]},"9":{"href":"/cairo/commands#the-get-command","html":"\n<p>The <code>get!</code> command is used to retrieve models from the world state:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>// world = calling world</span></span>\n<span data-line=\"\"><span>// caller = key of the entity that called the system</span></span>\n<span data-line=\"\"><span>// (Position, Moves) = tuple of models to retrieve</span></span>\n<span data-line=\"\"><span>let (position, moves) = get!(world, caller, (Position, Moves));</span></span></code></pre></figure>\n<p>Here we are retrieving the <code>Position</code> and <code>Moves</code> models from the world state. We are also using the <code>caller</code> to retrieve the models for the current entity.</p>\n<p>You can then use <code>position</code> and <code>moves</code> as you would as any other Cairo struct.</p>\n<p>In the case that your model defines several keys as the <a href=\"/cairo/models.md#the-key-attribute\">resource example</a>, you must provide a value for each key.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>let player = get_caller_address();</span></span>\n<span data-line=\"\"><span>let location = 0x1234;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>let resource = get!(world, (player, location), (Resource));</span></span></code></pre></figure>\n<p>If you use the <code>get!</code> command on a model that has never been set before, all the fields that are not <code>#[key]</code> are equal to 0 in the returned model, which is the default value in the storage.</p>\n","isPage":false,"text":"\nThe get! command is used to retrieve models from the world state:\n// world = calling world\n// caller = key of the entity that called the system\n// (Position, Moves) = tuple of models to retrieve\nlet (position, moves) = get!(world, caller, (Position, Moves));\nHere we are retrieving the Position and Moves models from the world state. We are also using the caller to retrieve the models for the current entity.\nYou can then use position and moves as you would as any other Cairo struct.\nIn the case that your model defines several keys as the resource example, you must provide a value for each key.\nlet player = get_caller_address();\nlet location = 0x1234;\n \nlet resource = get!(world, (player, location), (Resource));\nIf you use the get! command on a model that has never been set before, all the fields that are not #[key] are equal to 0 in the returned model, which is the default value in the storage.\n","title":"The get! command","titles":[null,"Commands"]},"10":{"href":"/cairo/commands#the-set-command","html":"\n<p>The <code>set!</code> command is used to update models state.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>set !(world, (</span></span>\n<span data-line=\"\"><span>    Moves {</span></span>\n<span data-line=\"\"><span>        player: caller, remaining: 10</span></span>\n<span data-line=\"\"><span>    },</span></span>\n<span data-line=\"\"><span>    Position {</span></span>\n<span data-line=\"\"><span>        player: caller, x: position.x + 10, y: position.y + 10</span></span>\n<span data-line=\"\"><span>    },</span></span>\n<span data-line=\"\"><span>));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>// If the structs are already defined it can also be written as:</span></span>\n<span data-line=\"\"><span>set!(world, (moves, position));</span></span></code></pre></figure>\n<p>Here we are updating the <code>Moves</code> and <code>Position</code> models in the world state using the <code>caller</code> as the entity id.</p>\n","isPage":false,"text":"\nThe set! command is used to update models state.\nset !(world, (\n    Moves {\n        player: caller, remaining: 10\n    },\n    Position {\n        player: caller, x: position.x + 10, y: position.y + 10\n    },\n));\n \n// If the structs are already defined it can also be written as:\nset!(world, (moves, position));\nHere we are updating the Moves and Position models in the world state using the caller as the entity id.\n","title":"The set! command","titles":[null,"Commands"]},"11":{"href":"/cairo/commands#the-emit-command","html":"\n<p>The <code>emit!</code> command is used to emit custom events. These events are indexed by <a href=\"/toolchain/torii/overview.md\">Torii</a>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>emit!(world, Moved { address: caller, direction });</span></span></code></pre></figure>\n<p>This will emit these values which could be captured by a client or you could query these via <a href=\"/toolchain/torii/overview.md\">Torii</a>.</p>\n","isPage":false,"text":"\nThe emit! command is used to emit custom events. These events are indexed by Torii.\nemit!(world, Moved { address: caller, direction });\nThis will emit these values which could be captured by a client or you could query these via Torii.\n","title":"The emit! command","titles":[null,"Commands"]},"12":{"href":"/cairo/commands#the-delete-command","html":"\n<p>The <code>delete!</code> command deletes a model from the db.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>delete!(world, Moved { address: caller, direction });</span></span></code></pre></figure>","isPage":false,"text":"\nThe delete! command deletes a model from the db.\ndelete!(world, Moved { address: caller, direction });","title":"The delete! command","titles":[null,"Commands"]},"13":{"href":"/cairo/config#config","html":"</header>\n<p>Dojo worlds are defined in their <code>Scarb.toml</code> files. This is just a regular <a href=\"https://docs.swmansion.com/scarb/\">Scarb</a> file which is an excellent Cairo package manager and project manager.</p>\n<p>Full example of a <code>Scarb.toml</code> file:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">package</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">cairo-version = </span><span style=\"color:#96D0FF\">&quot;2.4.0&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">name = </span><span style=\"color:#96D0FF\">&quot;dojo_examples&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">version = </span><span style=\"color:#96D0FF\">&quot;0.4.0&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">cairo</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">sierra-replace-ids = </span><span style=\"color:#6CB6FF\">true</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">dependencies</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># IMPORTANT: Dojo should be pinned to a specific version or else your world might not compile.</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">dojo = { git = </span><span style=\"color:#96D0FF\">&quot;https://github.com/dojoengine/dojo&quot;</span><span style=\"color:#ADBAC7\">, version = </span><span style=\"color:#96D0FF\">&quot;0.4.1&quot;</span><span style=\"color:#ADBAC7\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[[</span><span style=\"color:#F69D50\">target</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">]]</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">tool</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">initializer_class_hash = </span><span style=\"color:#96D0FF\">&quot;0xbeef&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">tool</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">env</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">rpc_url = </span><span style=\"color:#96D0FF\">&quot;http://localhost:5050/&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># Default account for katana with seed = 0</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">account_address = </span><span style=\"color:#96D0FF\">&quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">private_key = </span><span style=\"color:#96D0FF\">&quot;0x1800000000300000180000000000030000000000003006001800006600&quot;</span></span></code></pre></figure>","isPage":true,"text":"\nDojo worlds are defined in their Scarb.toml files. This is just a regular Scarb file which is an excellent Cairo package manager and project manager.\nFull example of a Scarb.toml file:\n[package]\ncairo-version = &quot;2.4.0&quot;\nname = &quot;dojo_examples&quot;\nversion = &quot;0.4.0&quot;\n \n[cairo]\nsierra-replace-ids = true\n \n[dependencies]\n# IMPORTANT: Dojo should be pinned to a specific version or else your world might not compile.\ndojo = { git = &quot;https://github.com/dojoengine/dojo&quot;, version = &quot;0.4.1&quot; }\n \n[[target.dojo]]\n \n[tool.dojo]\ninitializer_class_hash = &quot;0xbeef&quot;\n \n[tool.dojo.env]\nrpc_url = &quot;http://localhost:5050/&quot;\n# Default account for katana with seed = 0\naccount_address = &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;\nprivate_key = &quot;0x1800000000300000180000000000030000000000003006001800006600&quot;","title":"Config","titles":[]},"14":{"href":"/cairo/entities#entities","html":"\n<blockquote>\n<p>Entities are the primary key value within the world, to which models can be attached.</p>\n</blockquote>\n<p>Different ECS systems handle entities in various ways. In Dojo, entities are treated as a primary key value within the world, to which models can be attached. To illustrate this concept, consider a simple example of a character in a game that has a <code>Moves</code> and a <code>Position</code> model.</p>\n<p>When defining the models for this entity, it is important to note that we do not reference the entity directly. Instead, we simply provide two structs that the entity will contain.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Models, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Moves {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    player: ContractAddress,</span></span>\n<span data-line=\"\"><span>    remaining: u8,</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(Models, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Health {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    player: ContractAddress,</span></span>\n<span data-line=\"\"><span>    x: u32,</span></span>\n<span data-line=\"\"><span>    y: u32</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<blockquote>\n<p>ECS Theory: Plenty has been written on ECS systems, to go deeper read <a href=\"https://github.com/SanderMertens/ecs-faq\">ECS-FAQ</a></p>\n</blockquote>","isPage":true,"text":"\n\nEntities are the primary key value within the world, to which models can be attached.\n\nDifferent ECS systems handle entities in various ways. In Dojo, entities are treated as a primary key value within the world, to which models can be attached. To illustrate this concept, consider a simple example of a character in a game that has a Moves and a Position model.\nWhen defining the models for this entity, it is important to note that we do not reference the entity directly. Instead, we simply provide two structs that the entity will contain.\n#[derive(Models, Drop, Serde)]\nstruct Moves {\n    #[key]\n    player: ContractAddress,\n    remaining: u8,\n}\n \n#[derive(Models, Drop, Serde)]\nstruct Health {\n    #[key]\n    player: ContractAddress,\n    x: u32,\n    y: u32\n}\n\nECS Theory: Plenty has been written on ECS systems, to go deeper read ECS-FAQ\n","title":"Entities","titles":[null]},"15":{"href":"/cairo/enum#enum","html":"\n<p>Enums are very useful in game design, as they simplify the creation of clean, complex logic.</p>\n<p>You can define an enum as follows:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"> </span>\n<span data-line=\"\"><span>// This enum simply defines the states of a game.</span></span>\n<span data-line=\"\"><span>#[derive(Serde, Copy, Drop, Introspect, PartialEq, Print)]</span></span>\n<span data-line=\"\"><span>enum GameStatus {</span></span>\n<span data-line=\"\"><span>    NotStarted: (),</span></span>\n<span data-line=\"\"><span>    Lobby: (),</span></span>\n<span data-line=\"\"><span>    InProgress: (),</span></span>\n<span data-line=\"\"><span>    Finished: (),</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>// We define an into trait</span></span>\n<span data-line=\"\"><span>impl GameStatusFelt252 of Into&lt;GameStatus, felt252&gt; {</span></span>\n<span data-line=\"\"><span>    fn into(self: GameStatus) -&gt; felt252 {</span></span>\n<span data-line=\"\"><span>        match self {</span></span>\n<span data-line=\"\"><span>            GameStatus::NotStarted =&gt; 0,</span></span>\n<span data-line=\"\"><span>            GameStatus::Lobby =&gt; 1,</span></span>\n<span data-line=\"\"><span>            GameStatus::InProgress =&gt; 2,</span></span>\n<span data-line=\"\"><span>            GameStatus::Finished =&gt; 3,</span></span>\n<span data-line=\"\"><span>        }</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>Then within a trait you can create something like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Model, Copy, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Game {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    game_id: u32,</span></span>\n<span data-line=\"\"><span>    status: GameStatus,</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[generate_trait]</span></span>\n<span data-line=\"\"><span>impl GameImpl of GameTrait {</span></span>\n<span data-line=\"\"><span>    fn assert_in_progress(self: Game) {</span></span>\n<span data-line=\"\"><span>        assert(self.status == GameStatus::InProgress, &quot;Game not started&quot;);</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>    fn assert_lobby(self: Game) {</span></span>\n<span data-line=\"\"><span>        assert(self.status == GameStatus::Lobby, &quot;Game not in lobby&quot;);</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>    fn assert_not_started(self: Game) {</span></span>\n<span data-line=\"\"><span>        assert(self.status == GameStatus::NotStarted, &quot;Game already started&quot;);</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<blockquote>\n<p>Read more about Cairo enums <a href=\"https://book.cairo-lang.org/ch06-00-enums-and-pattern-matching.html\">here</a></p>\n</blockquote>","isPage":true,"text":"\nEnums are very useful in game design, as they simplify the creation of clean, complex logic.\nYou can define an enum as follows:\n \n// This enum simply defines the states of a game.\n#[derive(Serde, Copy, Drop, Introspect, PartialEq, Print)]\nenum GameStatus {\n    NotStarted: (),\n    Lobby: (),\n    InProgress: (),\n    Finished: (),\n}\n \n// We define an into trait\nimpl GameStatusFelt252 of Into&lt;GameStatus, felt252&gt; {\n    fn into(self: GameStatus) -&gt; felt252 {\n        match self {\n            GameStatus::NotStarted =&gt; 0,\n            GameStatus::Lobby =&gt; 1,\n            GameStatus::InProgress =&gt; 2,\n            GameStatus::Finished =&gt; 3,\n        }\n    }\n}\nThen within a trait you can create something like this:\n#[derive(Model, Copy, Drop, Serde)]\nstruct Game {\n    #[key]\n    game_id: u32,\n    status: GameStatus,\n}\n \n#[generate_trait]\nimpl GameImpl of GameTrait {\n    fn assert_in_progress(self: Game) {\n        assert(self.status == GameStatus::InProgress, &quot;Game not started&quot;);\n    }\n    fn assert_lobby(self: Game) {\n        assert(self.status == GameStatus::Lobby, &quot;Game not in lobby&quot;);\n    }\n    fn assert_not_started(self: Game) {\n        assert(self.status == GameStatus::NotStarted, &quot;Game already started&quot;);\n    }\n}\n\nRead more about Cairo enums here\n","title":"Enum","titles":[null]},"16":{"href":"/cairo/events#events","html":"\n<p>Events play a pivotal role in decoding the dynamics of a Dojo world. Every time there&#x27;s an update to a <code>Model</code>, the <code>World</code> contract emits these events. What&#x27;s even more exciting is that you can craft your own custom events to fit specific needs! Moreover, thanks to <a href=\"/toolchain/torii/overview.md\">Torii</a>, all these events are seamlessly indexed, ensuring easy and efficient querying.</p>\n","isPage":true,"text":"\nEvents play a pivotal role in decoding the dynamics of a Dojo world. Every time there&#x27;s an update to a Model, the World contract emits these events. What&#x27;s even more exciting is that you can craft your own custom events to fit specific needs! Moreover, thanks to Torii, all these events are seamlessly indexed, ensuring easy and efficient querying.\n","title":"Events","titles":[null]},"17":{"href":"/cairo/events#model-events","html":"\n<p>Consider this example of a <code>Moves</code> model:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>struct Moves {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    player: Address,</span></span>\n<span data-line=\"\"><span>    remaining: u32,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>When this model is updated, the <code>World</code> contract will emit an event with the following structure:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Drop, starknet::Event)]</span></span>\n<span data-line=\"\"><span>struct StoreSetRecord {</span></span>\n<span data-line=\"\"><span>    table: felt252, // Moves</span></span>\n<span data-line=\"\"><span>    keys: Span&lt;felt252&gt;, // [player]</span></span>\n<span data-line=\"\"><span>    offset: u8, // offset for the value in the table</span></span>\n<span data-line=\"\"><span>    value: Span&lt;felt252&gt;, // [remaining]</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>This will then be captured by <a href=\"/toolchain/torii/overview.md\">Torii</a> and indexed for querying. This will allow you to then reconstruct the state of your world.</p>\n<p>Similarly, when a model is deleted, the <code>World</code> contract will emit an event with the following structure:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Drop, starknet::Event)]</span></span>\n<span data-line=\"\"><span>struct StoreDelRecord {</span></span>\n<span data-line=\"\"><span>    table: felt252,</span></span>\n<span data-line=\"\"><span>    keys: Span&lt;felt252&gt;,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n","isPage":false,"text":"\nConsider this example of a Moves model:\nstruct Moves {\n    #[key]\n    player: Address,\n    remaining: u32,\n}\nWhen this model is updated, the World contract will emit an event with the following structure:\n#[derive(Drop, starknet::Event)]\nstruct StoreSetRecord {\n    table: felt252, // Moves\n    keys: Span&lt;felt252&gt;, // [player]\n    offset: u8, // offset for the value in the table\n    value: Span&lt;felt252&gt;, // [remaining]\n}\nThis will then be captured by Torii and indexed for querying. This will allow you to then reconstruct the state of your world.\nSimilarly, when a model is deleted, the World contract will emit an event with the following structure:\n#[derive(Drop, starknet::Event)]\nstruct StoreDelRecord {\n    table: felt252,\n    keys: Span&lt;felt252&gt;,\n}\n","title":"Model Events","titles":[null,"Events"]},"18":{"href":"/cairo/events#world-events","html":"\n<p>The <code>World</code> contract also emits events when it&#x27;s initialized and when new models and contracts are registered. These events are emitted with the following structures:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Drop, starknet::Event)]</span></span>\n<span data-line=\"\"><span>struct WorldSpawned {</span></span>\n<span data-line=\"\"><span>    address: ContractAddress,</span></span>\n<span data-line=\"\"><span>    caller: ContractAddress</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Drop, starknet::Event)]</span></span>\n<span data-line=\"\"><span>struct ModelRegistered {</span></span>\n<span data-line=\"\"><span>    name: felt252,</span></span>\n<span data-line=\"\"><span>    class_hash: ClassHash,</span></span>\n<span data-line=\"\"><span>    prev_class_hash: ClassHash</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Drop, starknet::Event)]</span></span>\n<span data-line=\"\"><span>struct ContractDeployed {</span></span>\n<span data-line=\"\"><span>    salt: felt252,</span></span>\n<span data-line=\"\"><span>    class_hash: ClassHash,</span></span>\n<span data-line=\"\"><span>    address: ContractAddress,</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(Drop, starknet::Event)]</span></span>\n<span data-line=\"\"><span>struct ContractUpgraded {</span></span>\n<span data-line=\"\"><span>    class_hash: ClassHash,</span></span>\n<span data-line=\"\"><span>    address: ContractAddress,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>These events are also captured by <a href=\"/toolchain/torii/overview.md\">Torii</a> and indexed for querying.</p>\n","isPage":false,"text":"\nThe World contract also emits events when it&#x27;s initialized and when new models and contracts are registered. These events are emitted with the following structures:\n#[derive(Drop, starknet::Event)]\nstruct WorldSpawned {\n    address: ContractAddress,\n    caller: ContractAddress\n}\n#[derive(Drop, starknet::Event)]\nstruct ModelRegistered {\n    name: felt252,\n    class_hash: ClassHash,\n    prev_class_hash: ClassHash\n}\n#[derive(Drop, starknet::Event)]\nstruct ContractDeployed {\n    salt: felt252,\n    class_hash: ClassHash,\n    address: ContractAddress,\n}\n \n#[derive(Drop, starknet::Event)]\nstruct ContractUpgraded {\n    class_hash: ClassHash,\n    address: ContractAddress,\n}\nThese events are also captured by Torii and indexed for querying.\n","title":"World Events","titles":[null,"Events"]},"19":{"href":"/cairo/events#custom-events","html":"\n<p>Within your game, emitting custom events can be highly beneficial. Fortunately, there&#x27;s a handy <code>emit!</code> command that lets you release events directly from your world. These events are indexed by <a href=\"/toolchain/torii/overview.md\">Torii</a>.</p>\n<p>Use it like so:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>emit!(world, Moved { address, direction });</span></span></code></pre></figure>\n<p>Include this in your contract and it will emit an event with the following structure:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Drop, starknet::Event)]</span></span>\n<span data-line=\"\"><span>struct Moved {</span></span>\n<span data-line=\"\"><span>    address: felt252,</span></span>\n<span data-line=\"\"><span>    direction: felt252,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>Now a full example using a custom event:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>fn move(ctx: Context, direction: Direction) {</span></span>\n<span data-line=\"\"><span>    let (mut position, mut moves) = get !(world, caller, (Position, Moves));</span></span>\n<span data-line=\"\"><span>    moves.remaining -= 1;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    let next = next_position(position, direction);</span></span>\n<span data-line=\"\"><span>    set !(world, (moves, next));</span></span>\n<span data-line=\"\"><span>    emit !(world, Moved { address: caller, direction });</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<blockquote>\n<p>Note: Read about the <code>get!</code> and <code>set!</code> macros in <a href=\"/cairo/commands.md\">Commands</a>.</p>\n</blockquote>","isPage":false,"text":"\nWithin your game, emitting custom events can be highly beneficial. Fortunately, there&#x27;s a handy emit! command that lets you release events directly from your world. These events are indexed by Torii.\nUse it like so:\nemit!(world, Moved { address, direction });\nInclude this in your contract and it will emit an event with the following structure:\n#[derive(Drop, starknet::Event)]\nstruct Moved {\n    address: felt252,\n    direction: felt252,\n}\nNow a full example using a custom event:\nfn move(ctx: Context, direction: Direction) {\n    let (mut position, mut moves) = get !(world, caller, (Position, Moves));\n    moves.remaining -= 1;\n \n    let next = next_position(position, direction);\n    set !(world, (moves, next));\n    emit !(world, Moved { address: caller, direction });\n}\n\nNote: Read about the get! and set! macros in Commands.\n","title":"Custom Events","titles":[null,"Events"]},"20":{"href":"/cairo/hello-dojo#hello-dojo","html":"</header>\n<blockquote>\n<p>This section assumes that you have already installed the Dojo toolchain and are familiar with Cairo. If not, please refer to the <a href=\"/getting-started/quick-start.md\">Getting Started</a> section.</p>\n</blockquote>\n","isPage":true,"text":"\n\nThis section assumes that you have already installed the Dojo toolchain and are familiar with Cairo. If not, please refer to the Getting Started section.\n\n","title":"Hello Dojo","titles":[]},"21":{"href":"/cairo/hello-dojo#dojo-as-an-ecs-in-15-minutes","html":"\n<p>Although Dojo isn&#x27;t exclusively an Entity Component System (ECS) framework, we recommend adopting this robust design pattern. In this context, systems shape the environment&#x27;s logic, while components (<a href=\"/cairo/models.md\">models</a>) mirror the state of the world. By taking this route, you&#x27;ll benefit from a structured and modular framework that promises both flexibility and scalability in a continuously evolving world. If this seems a bit intricate at first, hang tight; we&#x27;ll delve into the details shortly.</p>\n<p>To start, let&#x27;s set up a project to run locally on your machine. From an empty directory, execute:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">sozo init</span></span></code></pre></figure>\n<p>Congratulations! You now have a local Dojo project. This command creates a <code>dojo-starter</code> project in your current directory. It&#x27;s the ideal starting point for a new project and equips you with everything you need to begin.</p>\n","isPage":false,"text":"\nAlthough Dojo isn&#x27;t exclusively an Entity Component System (ECS) framework, we recommend adopting this robust design pattern. In this context, systems shape the environment&#x27;s logic, while components (models) mirror the state of the world. By taking this route, you&#x27;ll benefit from a structured and modular framework that promises both flexibility and scalability in a continuously evolving world. If this seems a bit intricate at first, hang tight; we&#x27;ll delve into the details shortly.\nTo start, let&#x27;s set up a project to run locally on your machine. From an empty directory, execute:\nsozo init\nCongratulations! You now have a local Dojo project. This command creates a dojo-starter project in your current directory. It&#x27;s the ideal starting point for a new project and equips you with everything you need to begin.\n","title":"Dojo as an ECS in 15 Minutes","titles":["Hello Dojo"]},"22":{"href":"/cairo/hello-dojo#anatomy-of-a-dojo-project","html":"\n<p>Inspect the contents of the <code>dojo-starter</code> project, and you&#x27;ll notice the following structure (excluding the non-Cairo files):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">src</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  -</span><span style=\"color:#96D0FF\"> lib.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    -</span><span style=\"color:#96D0FF\"> systems.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      -</span><span style=\"color:#96D0FF\"> actions.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    -</span><span style=\"color:#96D0FF\"> models.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      -</span><span style=\"color:#96D0FF\"> position.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      -</span><span style=\"color:#96D0FF\"> moves.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    -</span><span style=\"color:#96D0FF\"> tests.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      -</span><span style=\"color:#96D0FF\"> test_world.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">Scarb.toml</span></span></code></pre></figure>\n<p>Dojo projects bear a strong resemblance to typical Cairo projects. The primary difference is the inclusion of a special attribute tag used to define your data models. In this context, we&#x27;ll refer to these models as components.</p>\n<p>As we&#x27;re crafting an ECS, we&#x27;ll adhere to the specific terminology associated with Entity Component Systems.</p>\n<p>Open the <code>src/models/moves.cairo</code> file to continue.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Model, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Moves {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    player: ContractAddress,</span></span>\n<span data-line=\"\"><span>    remaining: u8,</span></span>\n<span data-line=\"\"><span>    last_direction: Direction</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span>...rest of code</span></span></code></pre></figure>\n<p>Notice the <code>#[derive(Model, Drop, Serde)]</code> attributes. For a model to be recognized, we <em>must</em> include <code>Model</code>. This signals to the Dojo compiler that this struct should be treated as a model.</p>\n<p>Our <code>Moves</code> model houses a <code>player</code> field. At the same time, we have the <code>#[key]</code> attribute, it informs Dojo that this model is indexed by the <code>player</code> field. If this is unfamiliar to you, we&#x27;ll clarify its importance later in the chapter. Essentially, it implies that you can query this model using the <code>player</code> field. Our <code>Moves</code> model also contains the <code>remaining</code> and <code>last_direction</code> fields</p>\n<p>Open the <code>src/models/position.cairo</code> file to continue.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Model, Copy, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Position {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    player: ContractAddress,</span></span>\n<span data-line=\"\"><span>    vec: Vec2,</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(Copy, Drop, Serde, Introspect)]</span></span>\n<span data-line=\"\"><span>struct Vec2 {</span></span>\n<span data-line=\"\"><span>    x: u32,</span></span>\n<span data-line=\"\"><span>    y: u32</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"><span>...rest of code</span></span></code></pre></figure>\n<p>In a similar vein, we have a <code>Position</code> model that have a Vec2 data structure. Vec holds <code>x</code> and <code>y</code> values. Once again, this model is indexed by the <code>player</code> field.</p>\n<p>Now, let&#x27;s examine the <code>src/systems/actions.cairo</code> file:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>// define the interface</span></span>\n<span data-line=\"\"><span>#[starknet::interface]</span></span>\n<span data-line=\"\"><span>trait IActions&lt;TContractState&gt; {</span></span>\n<span data-line=\"\"><span>    fn spawn(self: @TContractState);</span></span>\n<span data-line=\"\"><span>    fn move(self: @TContractState, direction: dojo_starter::models::moves::Direction);</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>// dojo decorator</span></span>\n<span data-line=\"\"><span>#[dojo::contract]</span></span>\n<span data-line=\"\"><span>mod actions {</span></span>\n<span data-line=\"\"><span>    use super::IActions;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    use starknet::{ContractAddress, get_caller_address};</span></span>\n<span data-line=\"\"><span>    use dojo_starter::models::{position::{Position, Vec2}, moves::{Moves, Direction}};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    // declaring custom event struct</span></span>\n<span data-line=\"\"><span>    #[event]</span></span>\n<span data-line=\"\"><span>    #[derive(Drop, starknet::Event)]</span></span>\n<span data-line=\"\"><span>    enum Event {</span></span>\n<span data-line=\"\"><span>        Moved: Moved,</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    // declaring custom event struct</span></span>\n<span data-line=\"\"><span>    #[derive(Drop, starknet::Event)]</span></span>\n<span data-line=\"\"><span>    struct Moved {</span></span>\n<span data-line=\"\"><span>        player: ContractAddress,</span></span>\n<span data-line=\"\"><span>        direction: Direction</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    // define functions in your contracts like this:</span></span>\n<span data-line=\"\"><span>    fn next_position(mut position: Position, direction: Direction) -&gt; Position {</span></span>\n<span data-line=\"\"><span>        match direction {</span></span>\n<span data-line=\"\"><span>            Direction::None =&gt; { return position; },</span></span>\n<span data-line=\"\"><span>            Direction::Left =&gt; { position.vec.x -= 1; },</span></span>\n<span data-line=\"\"><span>            Direction::Right =&gt; { position.vec.x += 1; },</span></span>\n<span data-line=\"\"><span>            Direction::Up =&gt; { position.vec.y -= 1; },</span></span>\n<span data-line=\"\"><span>            Direction::Down =&gt; { position.vec.y += 1; },</span></span>\n<span data-line=\"\"><span>        };</span></span>\n<span data-line=\"\"><span>        position</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    // impl: implement functions specified in trait</span></span>\n<span data-line=\"\"><span>    #[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span>    impl ActionsImpl of IActions&lt;ContractState&gt; {</span></span>\n<span data-line=\"\"><span>        // ContractState is defined by system decorator expansion</span></span>\n<span data-line=\"\"><span>        fn spawn(self: @ContractState) {</span></span>\n<span data-line=\"\"><span>            // Access the world dispatcher for reading.</span></span>\n<span data-line=\"\"><span>            let world = self.world_dispatcher.read();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // Get the address of the current caller, possibly the player&#x27;s address.</span></span>\n<span data-line=\"\"><span>            let player = get_caller_address();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // Retrieve the player&#x27;s current position from the world.</span></span>\n<span data-line=\"\"><span>            let position = get!(world, player, (Position));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // Retrieve the player&#x27;s move data, e.g., how many moves they have left.</span></span>\n<span data-line=\"\"><span>            let moves = get!(world, player, (Moves));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // Update the world state with the new data.</span></span>\n<span data-line=\"\"><span>            // 1. Set players moves to 10</span></span>\n<span data-line=\"\"><span>            // 2. Move the player&#x27;s position 100 units in both the x and y direction.</span></span>\n<span data-line=\"\"><span>            set!(</span></span>\n<span data-line=\"\"><span>                world,</span></span>\n<span data-line=\"\"><span>                (</span></span>\n<span data-line=\"\"><span>                    Moves { player, remaining: 100, last_direction: Direction::None },</span></span>\n<span data-line=\"\"><span>                    Position { player, vec: Vec2 { x: 10, y: 10 } },</span></span>\n<span data-line=\"\"><span>                )</span></span>\n<span data-line=\"\"><span>            );</span></span>\n<span data-line=\"\"><span>        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>        // Implementation of the move function for the ContractState struct.</span></span>\n<span data-line=\"\"><span>        fn move(self: @ContractState, direction: Direction) {</span></span>\n<span data-line=\"\"><span>            // Access the world dispatcher for reading.</span></span>\n<span data-line=\"\"><span>            let world = self.world_dispatcher.read();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // Get the address of the current caller, possibly the player&#x27;s address.</span></span>\n<span data-line=\"\"><span>            let player = get_caller_address();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // Retrieve the player&#x27;s current position and moves data from the world.</span></span>\n<span data-line=\"\"><span>            let (mut position, mut moves) = get!(world, player, (Position, Moves));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // Deduct one from the player&#x27;s remaining moves.</span></span>\n<span data-line=\"\"><span>            moves.remaining -= 1;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // Update the last direction the player moved in.</span></span>\n<span data-line=\"\"><span>            moves.last_direction = direction;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // Calculate the player&#x27;s next position based on the provided direction.</span></span>\n<span data-line=\"\"><span>            let next = next_position(position, direction);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // Update the world state with the new moves data and position.</span></span>\n<span data-line=\"\"><span>            set!(world, (moves, next));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // Emit an event to the world to notify about the player&#x27;s move.</span></span>\n<span data-line=\"\"><span>            emit!(world, Moved { player, direction });</span></span>\n<span data-line=\"\"><span>        }</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n","isPage":false,"text":"\nInspect the contents of the dojo-starter project, and you&#x27;ll notice the following structure (excluding the non-Cairo files):\nsrc\n  - lib.cairo\n    - systems.cairo\n      - actions.cairo\n    - models.cairo\n      - position.cairo\n      - moves.cairo\n    - tests.cairo\n      - test_world.cairo\nScarb.toml\nDojo projects bear a strong resemblance to typical Cairo projects. The primary difference is the inclusion of a special attribute tag used to define your data models. In this context, we&#x27;ll refer to these models as components.\nAs we&#x27;re crafting an ECS, we&#x27;ll adhere to the specific terminology associated with Entity Component Systems.\nOpen the src/models/moves.cairo file to continue.\n#[derive(Model, Drop, Serde)]\nstruct Moves {\n    #[key]\n    player: ContractAddress,\n    remaining: u8,\n    last_direction: Direction\n}\n...rest of code\nNotice the #[derive(Model, Drop, Serde)] attributes. For a model to be recognized, we must include Model. This signals to the Dojo compiler that this struct should be treated as a model.\nOur Moves model houses a player field. At the same time, we have the #[key] attribute, it informs Dojo that this model is indexed by the player field. If this is unfamiliar to you, we&#x27;ll clarify its importance later in the chapter. Essentially, it implies that you can query this model using the player field. Our Moves model also contains the remaining and last_direction fields\nOpen the src/models/position.cairo file to continue.\n#[derive(Model, Copy, Drop, Serde)]\nstruct Position {\n    #[key]\n    player: ContractAddress,\n    vec: Vec2,\n}\n \n#[derive(Copy, Drop, Serde, Introspect)]\nstruct Vec2 {\n    x: u32,\n    y: u32\n}\n...rest of code\nIn a similar vein, we have a Position model that have a Vec2 data structure. Vec holds x and y values. Once again, this model is indexed by the player field.\nNow, let&#x27;s examine the src/systems/actions.cairo file:\n// define the interface\n#[starknet::interface]\ntrait IActions&lt;TContractState&gt; {\n    fn spawn(self: @TContractState);\n    fn move(self: @TContractState, direction: dojo_starter::models::moves::Direction);\n}\n \n// dojo decorator\n#[dojo::contract]\nmod actions {\n    use super::IActions;\n \n    use starknet::{ContractAddress, get_caller_address};\n    use dojo_starter::models::{position::{Position, Vec2}, moves::{Moves, Direction}};\n \n    // declaring custom event struct\n    #[event]\n    #[derive(Drop, starknet::Event)]\n    enum Event {\n        Moved: Moved,\n    }\n \n    // declaring custom event struct\n    #[derive(Drop, starknet::Event)]\n    struct Moved {\n        player: ContractAddress,\n        direction: Direction\n    }\n \n    // define functions in your contracts like this:\n    fn next_position(mut position: Position, direction: Direction) -&gt; Position {\n        match direction {\n            Direction::None =&gt; { return position; },\n            Direction::Left =&gt; { position.vec.x -= 1; },\n            Direction::Right =&gt; { position.vec.x += 1; },\n            Direction::Up =&gt; { position.vec.y -= 1; },\n            Direction::Down =&gt; { position.vec.y += 1; },\n        };\n        position\n    }\n \n \n    // impl: implement functions specified in trait\n    #[abi(embed_v0)]\n    impl ActionsImpl of IActions&lt;ContractState&gt; {\n        // ContractState is defined by system decorator expansion\n        fn spawn(self: @ContractState) {\n            // Access the world dispatcher for reading.\n            let world = self.world_dispatcher.read();\n \n            // Get the address of the current caller, possibly the player&#x27;s address.\n            let player = get_caller_address();\n \n            // Retrieve the player&#x27;s current position from the world.\n            let position = get!(world, player, (Position));\n \n            // Retrieve the player&#x27;s move data, e.g., how many moves they have left.\n            let moves = get!(world, player, (Moves));\n \n            // Update the world state with the new data.\n            // 1. Set players moves to 10\n            // 2. Move the player&#x27;s position 100 units in both the x and y direction.\n            set!(\n                world,\n                (\n                    Moves { player, remaining: 100, last_direction: Direction::None },\n                    Position { player, vec: Vec2 { x: 10, y: 10 } },\n                )\n            );\n        }\n \n        // Implementation of the move function for the ContractState struct.\n        fn move(self: @ContractState, direction: Direction) {\n            // Access the world dispatcher for reading.\n            let world = self.world_dispatcher.read();\n \n            // Get the address of the current caller, possibly the player&#x27;s address.\n            let player = get_caller_address();\n \n            // Retrieve the player&#x27;s current position and moves data from the world.\n            let (mut position, mut moves) = get!(world, player, (Position, Moves));\n \n            // Deduct one from the player&#x27;s remaining moves.\n            moves.remaining -= 1;\n \n            // Update the last direction the player moved in.\n            moves.last_direction = direction;\n \n            // Calculate the player&#x27;s next position based on the provided direction.\n            let next = next_position(position, direction);\n \n            // Update the world state with the new moves data and position.\n            set!(world, (moves, next));\n \n            // Emit an event to the world to notify about the player&#x27;s move.\n            emit!(world, Moved { player, direction });\n        }\n    }\n}\n","title":"Anatomy of a Dojo Project","titles":["Hello Dojo","Dojo as an ECS in 15 Minutes",null]},"23":{"href":"/cairo/hello-dojo#breaking-it-down","html":"\n","isPage":false,"text":"\n","title":"Breaking it down","titles":["Hello Dojo","Dojo as an ECS in 15 Minutes"]},"24":{"href":"/cairo/hello-dojo#system-is-a-function-in-a-contract","html":"\n<p>As you can see a <code>System</code> is like a regular function of a dojo(starknet) contract. It imports the Models we defined earlier and exposes two functions <code>spawn</code> and <code>move</code>. These functions are called when a player spawns into the world and when they move respectively.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>// Retrieve the player&#x27;s current position from the world.</span></span>\n<span data-line=\"\"><span>let position = get!(world, player, (Position));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>// Retrieve the player&#x27;s move data, e.g., how many moves they have left.</span></span>\n<span data-line=\"\"><span>let moves = get!(world, player, (Moves));</span></span></code></pre></figure>\n<p>Here we use <code>get!</code> <a href=\"/cairo/commands.md\">command</a> to retrieve the <code>Position</code> and <code>Moves</code> model for the <code>player</code> entity, which is the address of the caller.</p>\n<p>Now the next line:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>// Update the world state with the new data.</span></span>\n<span data-line=\"\"><span>// 1. Increase the player&#x27;s remaining moves by 10.</span></span>\n<span data-line=\"\"><span>// 2. Move the player&#x27;s position 10 units in both the x and y direction.</span></span>\n<span data-line=\"\"><span>set!(</span></span>\n<span data-line=\"\"><span>    world,</span></span>\n<span data-line=\"\"><span>    (</span></span>\n<span data-line=\"\"><span>        Moves {</span></span>\n<span data-line=\"\"><span>            player, remaining: moves.remaining + 10, last_direction: Direction::None</span></span>\n<span data-line=\"\"><span>        },</span></span>\n<span data-line=\"\"><span>        Position {</span></span>\n<span data-line=\"\"><span>            player, vec: Vec2 { x: position.vec.x + 10, y: position.vec.y + 10}</span></span>\n<span data-line=\"\"><span>        },</span></span>\n<span data-line=\"\"><span>    )</span></span>\n<span data-line=\"\"><span>);</span></span></code></pre></figure>\n<p>Here we use the <code>set!</code> <a href=\"/cairo/commands.md\">command</a> to set the <code>Moves</code> and <code>Position</code> models for the <code>player</code> entity.</p>\n<p>We covered a lot here in a short time. Let&#x27;s recap:</p>\n<ul>\n<li>Explained the anatomy of a Dojo project</li>\n<li>Explained the importance of the <code>#[derive(Model)]</code>attribute</li>\n<li>Explained the <code>spawn</code> and <code>move</code> functions</li>\n<li>Explained the <code>Moves</code> and <code>Position</code> struct</li>\n<li>Touched on the <code>get!</code> and <code>set!</code> commands</li>\n</ul>\n","isPage":false,"text":"\nAs you can see a System is like a regular function of a dojo(starknet) contract. It imports the Models we defined earlier and exposes two functions spawn and move. These functions are called when a player spawns into the world and when they move respectively.\n// Retrieve the player&#x27;s current position from the world.\nlet position = get!(world, player, (Position));\n \n// Retrieve the player&#x27;s move data, e.g., how many moves they have left.\nlet moves = get!(world, player, (Moves));\nHere we use get! command to retrieve the Position and Moves model for the player entity, which is the address of the caller.\nNow the next line:\n// Update the world state with the new data.\n// 1. Increase the player&#x27;s remaining moves by 10.\n// 2. Move the player&#x27;s position 10 units in both the x and y direction.\nset!(\n    world,\n    (\n        Moves {\n            player, remaining: moves.remaining + 10, last_direction: Direction::None\n        },\n        Position {\n            player, vec: Vec2 { x: position.vec.x + 10, y: position.vec.y + 10}\n        },\n    )\n);\nHere we use the set! command to set the Moves and Position models for the player entity.\nWe covered a lot here in a short time. Let&#x27;s recap:\n\nExplained the anatomy of a Dojo project\nExplained the importance of the #[derive(Model)]attribute\nExplained the spawn and move functions\nExplained the Moves and Position struct\nTouched on the get! and set! commands\n\n","title":"System is a function in a contract","titles":["Hello Dojo","Dojo as an ECS in 15 Minutes","Breaking it down"]},"25":{"href":"/cairo/hello-dojo#run-it-locally","html":"\n<p>Now that we&#x27;ve covered some theory, let&#x27;s build the Dojo project! In your primary terminal:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>\n<p>That compiled the models and system into an artifact that can be deployed! Simple as that!</p>\n<p>Now, let&#x27;s deploy it to <a href=\"/toolchain/katana/overview.md\">Katana</a>! First, we need to get Katana running. Open a second terminal and execute:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">katana</span><span style=\"color:#6CB6FF\"> --disable-fee</span></span></code></pre></figure>\n<p>Success! <a href=\"/toolchain/katana/overview.md\">Katana</a> should now be running locally on your machine. Now, let&#x27;s deploy! In your primary terminal, execute:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> migrate</span></span></code></pre></figure>\n<p>This will deploy the artifact to <a href=\"/toolchain/katana/overview.md\">Katana</a>. You should see terminal output similar to this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">Migration</span><span style=\"color:#96D0FF\"> account: </span><span style=\"color:#6CB6FF\">0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">World</span><span style=\"color:#96D0FF\"> name: dojo_examples</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#ADBAC7\">] 🌎 Building World state....</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  &gt;</span><span style=\"color:#F69D50\"> No</span><span style=\"color:#96D0FF\"> remote World found</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#6CB6FF\">2</span><span style=\"color:#ADBAC7\">] 🧰 Evaluating Worlds diff....</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  &gt;</span><span style=\"color:#F69D50\"> Total</span><span style=\"color:#96D0FF\"> diffs found: </span><span style=\"color:#6CB6FF\">5</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#6CB6FF\">3</span><span style=\"color:#ADBAC7\">] 📦 Preparing </span><span style=\"color:#F47067\">for</span><span style=\"color:#ADBAC7\"> migration....</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  &gt;</span><span style=\"color:#F69D50\"> Total</span><span style=\"color:#96D0FF\"> items to be migrated </span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">5</span><span style=\"color:#ADBAC7\">)</span><span style=\"color:#96D0FF\">: New </span><span style=\"color:#6CB6FF\">5</span><span style=\"color:#96D0FF\"> Update </span><span style=\"color:#6CB6FF\">0</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\"># Executor</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  &gt;</span><span style=\"color:#F69D50\"> Contract</span><span style=\"color:#96D0FF\"> address: </span><span style=\"color:#6CB6FF\">0x59f31686991d7cac25a7d4844225b9647c89e3e1e2d03460dbc61e3fbfafc59</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># Base Contract</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  &gt;</span><span style=\"color:#F69D50\"> Class</span><span style=\"color:#96D0FF\"> Hash: </span><span style=\"color:#6CB6FF\">0x77638e9a645209ac1e32e143bfdbfe9caf723c4f7645fcf465c38967545ea2f</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># World</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  &gt;</span><span style=\"color:#F69D50\"> Contract</span><span style=\"color:#96D0FF\"> address: </span><span style=\"color:#6CB6FF\">0x5010c31f127114c6198df8a5239e2b7a5151e1156fb43791e37e7385faa8138</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># Models (2)</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">Moves</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  &gt;</span><span style=\"color:#F69D50\"> Class</span><span style=\"color:#96D0FF\"> hash: </span><span style=\"color:#6CB6FF\">0x509a65bd8cc5516176a694a3b3c809011f1f0680959c567b3189e60ddab7ce1</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">Position</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  &gt;</span><span style=\"color:#F69D50\"> Class</span><span style=\"color:#96D0FF\"> hash: </span><span style=\"color:#6CB6FF\">0x52a1da1853c194683ca5d6d154452d0654d23f2eacd4267c555ff2338e144d6</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  &gt;</span><span style=\"color:#F69D50\"> Registered</span><span style=\"color:#96D0FF\"> at: </span><span style=\"color:#6CB6FF\">0x82d996aab290f086314745685c6f05bd69730d46589339763202de5264b1b6</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># Contracts (1)</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">actions</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  &gt;</span><span style=\"color:#F69D50\"> Contract</span><span style=\"color:#96D0FF\"> address: </span><span style=\"color:#6CB6FF\">0x31571485922572446df9e3198a891e10d3a48e544544317dbcbb667e15848cd</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">🎉</span><span style=\"color:#96D0FF\"> Successfully migrated World at address </span><span style=\"color:#6CB6FF\">0x5010c31f127114c6198df8a5239e2b7a5151e1156fb43791e37e7385faa8138</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">✨</span><span style=\"color:#96D0FF\"> Updating manifest.json...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">✨</span><span style=\"color:#96D0FF\"> Done.</span></span>\n<span data-line=\"\"> </span></code></pre></figure>\n<p>Your 🌎 is now deployed at <code>0x5010c31f127114c6198df8a5239e2b7a5151e1156fb43791e37e7385faa8138</code>!</p>\n<p>This establishes the world address for your project.</p>\n<p>Let&#x27;s discuss the <code>Scarb.toml</code> file in the project. This file contains environment variables that make running CLI commands in your project a breeze (read more about it <a href=\"/cairo/config.md\">here</a>). Make sure your file specifies the version of Dojo you have installed! In this case version <code>0.4.4</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">dependencies</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">dojo = { git = </span><span style=\"color:#96D0FF\">&quot;https://github.com/dojoengine/dojo&quot;</span><span style=\"color:#ADBAC7\">, version = </span><span style=\"color:#96D0FF\">&quot;0.4.4&quot;</span><span style=\"color:#ADBAC7\"> }</span></span></code></pre></figure>\n","isPage":false,"text":"\nNow that we&#x27;ve covered some theory, let&#x27;s build the Dojo project! In your primary terminal:\nsozo build\nThat compiled the models and system into an artifact that can be deployed! Simple as that!\nNow, let&#x27;s deploy it to Katana! First, we need to get Katana running. Open a second terminal and execute:\nkatana --disable-fee\nSuccess! Katana should now be running locally on your machine. Now, let&#x27;s deploy! In your primary terminal, execute:\nsozo migrate\nThis will deploy the artifact to Katana. You should see terminal output similar to this:\n \nMigration account: 0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973\n \nWorld name: dojo_examples\n \n[1] 🌎 Building World state....\n  &gt; No remote World found\n[2] 🧰 Evaluating Worlds diff....\n  &gt; Total diffs found: 5\n[3] 📦 Preparing for migration....\n  &gt; Total items to be migrated (5): New 5 Update 0\n \n# Executor\n  &gt; Contract address: 0x59f31686991d7cac25a7d4844225b9647c89e3e1e2d03460dbc61e3fbfafc59\n# Base Contract\n  &gt; Class Hash: 0x77638e9a645209ac1e32e143bfdbfe9caf723c4f7645fcf465c38967545ea2f\n# World\n  &gt; Contract address: 0x5010c31f127114c6198df8a5239e2b7a5151e1156fb43791e37e7385faa8138\n# Models (2)\nMoves\n  &gt; Class hash: 0x509a65bd8cc5516176a694a3b3c809011f1f0680959c567b3189e60ddab7ce1\nPosition\n  &gt; Class hash: 0x52a1da1853c194683ca5d6d154452d0654d23f2eacd4267c555ff2338e144d6\n  &gt; Registered at: 0x82d996aab290f086314745685c6f05bd69730d46589339763202de5264b1b6\n# Contracts (1)\nactions\n  &gt; Contract address: 0x31571485922572446df9e3198a891e10d3a48e544544317dbcbb667e15848cd\n \n🎉 Successfully migrated World at address 0x5010c31f127114c6198df8a5239e2b7a5151e1156fb43791e37e7385faa8138\n \n✨ Updating manifest.json...\n \n✨ Done.\n \nYour 🌎 is now deployed at 0x5010c31f127114c6198df8a5239e2b7a5151e1156fb43791e37e7385faa8138!\nThis establishes the world address for your project.\nLet&#x27;s discuss the Scarb.toml file in the project. This file contains environment variables that make running CLI commands in your project a breeze (read more about it here). Make sure your file specifies the version of Dojo you have installed! In this case version 0.4.4.\n[dependencies]\ndojo = { git = &quot;https://github.com/dojoengine/dojo&quot;, version = &quot;0.4.4&quot; }\n","title":"Run it locally!","titles":["Hello Dojo","Dojo as an ECS in 15 Minutes"]},"26":{"href":"/cairo/hello-dojo#indexing","html":"\n<p>With your local world address established, let&#x27;s delve into indexing. You can index the entire world. To accomplish this we have to copy your <code>world address</code> from the output of <code>sozo migrate</code>. Now Open a new terminal and input this simple command that includes your own world address:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">torii</span><span style=\"color:#6CB6FF\"> --world</span><span style=\"color:#6CB6FF\"> 0x5010c31f127114c6198df8a5239e2b7a5151e1156fb43791e37e7385faa8138</span></span></code></pre></figure>\n<p>Running the command mentioned above starts a <a href=\"/toolchain/torii/overview.md\">Torii</a> server on your local machine. This server uses SQLite as its database and is accessible at <a href=\"http://0.0.0.0:8080/graphql\">http://0.0.0.0:8080/graphql</a>. <a href=\"/toolchain/torii/overview.md\">Torii</a> will automatically organize your data into tables, making it easy for you to perform queries using GraphQL. When you run the command, you&#x27;ll see terminal output that looks something like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.184233Z</span><span style=\"color:#96D0FF\">  INFO torii::server: 🚀 Torii listening at http://0.0.0.0:8080</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.184244Z</span><span style=\"color:#96D0FF\">  INFO torii::server: Graphql playground: http://0.0.0.0:8080/graphql</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.185648Z</span><span style=\"color:#96D0FF\">  INFO torii_core::engine: processed block: </span><span style=\"color:#6CB6FF\">0</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.186129Z</span><span style=\"color:#96D0FF\">  INFO torii_core::engine: processed block: </span><span style=\"color:#6CB6FF\">1</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.186720Z</span><span style=\"color:#96D0FF\">  INFO torii_core::engine: processed block: </span><span style=\"color:#6CB6FF\">2</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.187202Z</span><span style=\"color:#96D0FF\">  INFO torii_core::engine: processed block: </span><span style=\"color:#6CB6FF\">3</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.187674Z</span><span style=\"color:#96D0FF\">  INFO torii_core::engine: processed block: </span><span style=\"color:#6CB6FF\">4</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.188215Z</span><span style=\"color:#96D0FF\">  INFO torii_core::engine: processed block: </span><span style=\"color:#6CB6FF\">5</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.188611Z</span><span style=\"color:#96D0FF\">  INFO torii_core::engine: processed block: </span><span style=\"color:#6CB6FF\">6</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.188985Z</span><span style=\"color:#96D0FF\">  INFO torii_core::engine: processed block: </span><span style=\"color:#6CB6FF\">7</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.199592Z</span><span style=\"color:#96D0FF\">  INFO torii_core::processors::register_model: Registered model: Moves</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.210032Z</span><span style=\"color:#96D0FF\">  INFO torii_core::processors::register_model: Registered model: Position</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.210571Z</span><span style=\"color:#96D0FF\">  INFO torii_core::engine: processed block: </span><span style=\"color:#6CB6FF\">8</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.211678Z</span><span style=\"color:#96D0FF\">  INFO torii_core::engine: processed block: </span><span style=\"color:#6CB6FF\">9</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">2023-10-18T06:49:48.212335Z</span><span style=\"color:#96D0FF\">  INFO torii_core::engine: processed block: </span><span style=\"color:#6CB6FF\">10</span></span>\n<span data-line=\"\"> </span></code></pre></figure>\n<p>You can observe that our <code>Moves</code> and <code>Position</code> models have been successfully registered.\nNext, let&#x27;s use the GraphiQL IDE to retrieve data from the <code>Moves</code> model. In your web browser, navigate to <code>http://0.0.0.0:8080/graphql</code>, and enter the following query:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">query</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  model</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">id</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Moves&quot;</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    name</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    classHash</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    transactionHash</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    createdAt</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>After you run the query, you will receive an output like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;model&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Moves&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;name&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Moves&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;classHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x64495ca6dc1dc328972697b30468cea364bcb7452bbb6e4aaad3e4b3f190147&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;transactionHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;createdAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2023-12-15 18:07:22&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Awesome, now let&#x27;s work with subscriptions to get real-time updates. Let&#x27;s clean up your workspace on the GraphiQL IDE and input the following subscription:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#DCBDFB\">subscription</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  entityUpdated</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    keys</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    eventId</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    createdAt</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    updatedAt</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Once you execute the subscription, you will receive notifications whenever new entities are updated or created. For now, don&#x27;t make any changes to it and proceed to create a new entity.</p>\n<p>To accomplish this, we have to go back to our primary terminal and check the contracts section.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># Contracts (1)</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">actions</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">  &gt;</span><span style=\"color:#F69D50\"> Contract</span><span style=\"color:#96D0FF\"> address: </span><span style=\"color:#6CB6FF\">0x31571485922572446df9e3198a891e10d3a48e544544317dbcbb667e15848cd</span></span></code></pre></figure>\n<p>We have to use <code>actions</code> contract address to start to create entities. In your main local terminal, run the following command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> execute </span><span style=\"color:#6CB6FF\">0x31571485922572446df9e3198a891e10d3a48e544544317dbcbb667e15848cd</span><span style=\"color:#96D0FF\"> spawn</span></span></code></pre></figure>\n<p>By running this command, you&#x27;ve activated the spawn system, resulting in the creation of a new entity. This action establishes a local world that you can interact with.</p>\n<p>Now, go back to your GraphiQL IDE, and you will notice that you have received the subscription&#x27;s results, which should look something like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;entityUpdated&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;keys&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;eventId&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x000000000000000000000000000000000000000000000000000000000000000e:0x0000:0x0000&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;createdAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2023-12-15 18:07:22&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;updatedAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2023-12-15 18:10:56&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">--------------------------------------------------------------------------------------------------------</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;entityUpdated&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;keys&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;eventId&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x000000000000000000000000000000000000000000000000000000000000000e:0x0000:0x0001&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;createdAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2023-12-15 18:07:22&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;updatedAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2023-12-15 18:10:56&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>In the GraphiQL IDE, by clicking the <code>DOCS</code>-button on the right, you can open the API documentation. This documentation is auto-generated based on our schema definition and displays all API operations and data types of our schema.. In order to know more about query and subscription, you can jump to <a href=\"/toolchain/torii/graphql.md\">GraphQL</a> section.\nWe&#x27;ve covered quite a bit! Here&#x27;s a recap:</p>\n<ul>\n<li>Built a Dojo world</li>\n<li>Deployed the project to Katana</li>\n<li>Indexed the world with Torii</li>\n<li>Ran the spawn system locally</li>\n<li>Interacted with GraphQL</li>\n</ul>\n","isPage":false,"text":"\nWith your local world address established, let&#x27;s delve into indexing. You can index the entire world. To accomplish this we have to copy your world address from the output of sozo migrate. Now Open a new terminal and input this simple command that includes your own world address:\ntorii --world 0x5010c31f127114c6198df8a5239e2b7a5151e1156fb43791e37e7385faa8138\nRunning the command mentioned above starts a Torii server on your local machine. This server uses SQLite as its database and is accessible at http://0.0.0.0:8080/graphql. Torii will automatically organize your data into tables, making it easy for you to perform queries using GraphQL. When you run the command, you&#x27;ll see terminal output that looks something like this:\n2023-10-18T06:49:48.184233Z  INFO torii::server: 🚀 Torii listening at http://0.0.0.0:8080\n2023-10-18T06:49:48.184244Z  INFO torii::server: Graphql playground: http://0.0.0.0:8080/graphql\n \n2023-10-18T06:49:48.185648Z  INFO torii_core::engine: processed block: 0\n2023-10-18T06:49:48.186129Z  INFO torii_core::engine: processed block: 1\n2023-10-18T06:49:48.186720Z  INFO torii_core::engine: processed block: 2\n2023-10-18T06:49:48.187202Z  INFO torii_core::engine: processed block: 3\n2023-10-18T06:49:48.187674Z  INFO torii_core::engine: processed block: 4\n2023-10-18T06:49:48.188215Z  INFO torii_core::engine: processed block: 5\n2023-10-18T06:49:48.188611Z  INFO torii_core::engine: processed block: 6\n2023-10-18T06:49:48.188985Z  INFO torii_core::engine: processed block: 7\n2023-10-18T06:49:48.199592Z  INFO torii_core::processors::register_model: Registered model: Moves\n2023-10-18T06:49:48.210032Z  INFO torii_core::processors::register_model: Registered model: Position\n2023-10-18T06:49:48.210571Z  INFO torii_core::engine: processed block: 8\n2023-10-18T06:49:48.211678Z  INFO torii_core::engine: processed block: 9\n2023-10-18T06:49:48.212335Z  INFO torii_core::engine: processed block: 10\n \nYou can observe that our Moves and Position models have been successfully registered.\nNext, let&#x27;s use the GraphiQL IDE to retrieve data from the Moves model. In your web browser, navigate to http://0.0.0.0:8080/graphql, and enter the following query:\nquery {\n  model(id: &quot;Moves&quot;) {\n    id\n    name\n    classHash\n    transactionHash\n    createdAt\n  }\n}\nAfter you run the query, you will receive an output like this:\n{\n  &quot;data&quot;: {\n    &quot;model&quot;: {\n      &quot;id&quot;: &quot;Moves&quot;,\n      &quot;name&quot;: &quot;Moves&quot;,\n      &quot;classHash&quot;: &quot;0x64495ca6dc1dc328972697b30468cea364bcb7452bbb6e4aaad3e4b3f190147&quot;,\n      &quot;transactionHash&quot;: &quot;&quot;,\n      &quot;createdAt&quot;: &quot;2023-12-15 18:07:22&quot;\n    }\n  }\n}\nAwesome, now let&#x27;s work with subscriptions to get real-time updates. Let&#x27;s clean up your workspace on the GraphiQL IDE and input the following subscription:\nsubscription {\n  entityUpdated {\n    id\n    keys\n    eventId\n    createdAt\n    updatedAt\n  }\n}\nOnce you execute the subscription, you will receive notifications whenever new entities are updated or created. For now, don&#x27;t make any changes to it and proceed to create a new entity.\nTo accomplish this, we have to go back to our primary terminal and check the contracts section.\n# Contracts (1)\nactions\n  &gt; Contract address: 0x31571485922572446df9e3198a891e10d3a48e544544317dbcbb667e15848cd\nWe have to use actions contract address to start to create entities. In your main local terminal, run the following command:\nsozo execute 0x31571485922572446df9e3198a891e10d3a48e544544317dbcbb667e15848cd spawn\nBy running this command, you&#x27;ve activated the spawn system, resulting in the creation of a new entity. This action establishes a local world that you can interact with.\nNow, go back to your GraphiQL IDE, and you will notice that you have received the subscription&#x27;s results, which should look something like this:\n{\n  &quot;data&quot;: {\n    &quot;entityUpdated&quot;: {\n      &quot;id&quot;: &quot;0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20&quot;,\n      &quot;keys&quot;: [\n        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;\n      ],\n      &quot;eventId&quot;: &quot;0x000000000000000000000000000000000000000000000000000000000000000e:0x0000:0x0000&quot;,\n      &quot;createdAt&quot;: &quot;2023-12-15 18:07:22&quot;,\n      &quot;updatedAt&quot;: &quot;2023-12-15 18:10:56&quot;\n    }\n  }\n}\n--------------------------------------------------------------------------------------------------------\n{\n  &quot;data&quot;: {\n    &quot;entityUpdated&quot;: {\n      &quot;id&quot;: &quot;0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20&quot;,\n      &quot;keys&quot;: [\n        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;\n      ],\n      &quot;eventId&quot;: &quot;0x000000000000000000000000000000000000000000000000000000000000000e:0x0000:0x0001&quot;,\n      &quot;createdAt&quot;: &quot;2023-12-15 18:07:22&quot;,\n      &quot;updatedAt&quot;: &quot;2023-12-15 18:10:56&quot;\n    }\n  }\n}\nIn the GraphiQL IDE, by clicking the DOCS-button on the right, you can open the API documentation. This documentation is auto-generated based on our schema definition and displays all API operations and data types of our schema.. In order to know more about query and subscription, you can jump to GraphQL section.\nWe&#x27;ve covered quite a bit! Here&#x27;s a recap:\n\nBuilt a Dojo world\nDeployed the project to Katana\nIndexed the world with Torii\nRan the spawn system locally\nInteracted with GraphQL\n\n","title":"Indexing","titles":["Hello Dojo","Dojo as an ECS in 15 Minutes"]},"27":{"href":"/cairo/hello-dojo#next-steps","html":"\n<p>This overview provides a rapid end-to-end glimpse into Dojo. However, the potential of these worlds is vast! Designed to manage hundreds of systems and components, Dojo is equipped for expansive creativity. So, what will you craft next?</p>","isPage":false,"text":"\nThis overview provides a rapid end-to-end glimpse into Dojo. However, the potential of these worlds is vast! Designed to manage hundreds of systems and components, Dojo is equipped for expansive creativity. So, what will you craft next?","title":"Next Steps","titles":["Hello Dojo","Dojo as an ECS in 15 Minutes"]},"28":{"href":"/cairo/metadata#metadata","html":"\n<p>Dojo supports associating offchain metadata with the world contract and other deployed contracts. This can provide additional context about the world, such as it&#x27;s name, description, social links and other media. Enabling external services to easily index and distribute worlds and experiences built on them.</p>\n","isPage":true,"text":"\nDojo supports associating offchain metadata with the world contract and other deployed contracts. This can provide additional context about the world, such as it&#x27;s name, description, social links and other media. Enabling external services to easily index and distribute worlds and experiences built on them.\n","title":"Metadata","titles":[null]},"29":{"href":"/cairo/metadata#world-metadata","html":"\n<p>During migration, <code>sozo</code> will automatically manage the worlds metadata for you, uploading it to ipfs and setting it in the world contract. It does so by parsing the metadata defined in the projects <code>Scarb.toml</code>.</p>\n<p>To set a worlds metadata, create the following section in your <code>Scarb.toml</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">tool</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">world</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">name = </span><span style=\"color:#96D0FF\">&quot;example&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">description = </span><span style=\"color:#96D0FF\">&quot;example world&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">icon_uri = </span><span style=\"color:#96D0FF\">&quot;file://assets/icon.png&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">cover_uri = </span><span style=\"color:#96D0FF\">&quot;file://assets/cover.png&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">website = </span><span style=\"color:#96D0FF\">&quot;https://dojoengine.org&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">socials.x = </span><span style=\"color:#96D0FF\">&quot;https://twitter.com/dojostarknet&quot;</span></span></code></pre></figure>\n<p>The toolchain supports the <code>name</code>, <code>description</code>, <code>icon_uri</code>, <code>cover_uri</code>, <code>website</code> and <code>socials</code> attributes by default. <code>_uri</code> attributes can point to a asset in the repo using the <code>file://</code> schema or to remote resouces using either <code>ipfs://</code> or <code>https://</code>. Arbitrary social links can be set by setting a key value on the <code>socials</code> attribute. For example, we could add a <code>socials.github = &quot;...&quot;</code>.</p>\n<p>During migration, <code>sozo</code> will upload any local assets to ipfs, replace the corresponding uris, upload the metadata json to ipfs, and set the <code>metadata_uri</code> for the world (resource <code>0</code>).</p>\n","isPage":false,"text":"\nDuring migration, sozo will automatically manage the worlds metadata for you, uploading it to ipfs and setting it in the world contract. It does so by parsing the metadata defined in the projects Scarb.toml.\nTo set a worlds metadata, create the following section in your Scarb.toml:\n[tool.dojo.world]\nname = &quot;example&quot;\ndescription = &quot;example world&quot;\nicon_uri = &quot;file://assets/icon.png&quot;\ncover_uri = &quot;file://assets/cover.png&quot;\nwebsite = &quot;https://dojoengine.org&quot;\nsocials.x = &quot;https://twitter.com/dojostarknet&quot;\nThe toolchain supports the name, description, icon_uri, cover_uri, website and socials attributes by default. _uri attributes can point to a asset in the repo using the file:// schema or to remote resouces using either ipfs:// or https://. Arbitrary social links can be set by setting a key value on the socials attribute. For example, we could add a socials.github = &quot;...&quot;.\nDuring migration, sozo will upload any local assets to ipfs, replace the corresponding uris, upload the metadata json to ipfs, and set the metadata_uri for the world (resource 0).\n","title":"World Metadata","titles":[null,"Metadata"]},"30":{"href":"/cairo/metadata#contract-metadata","html":"\n<p>It is possible for contract owners to set a <code>metadata_uri</code> for any contract. However, this specification has not yet been defined and it is not supported by the toolchain at this time.</p>","isPage":false,"text":"\nIt is possible for contract owners to set a metadata_uri for any contract. However, this specification has not yet been defined and it is not supported by the toolchain at this time.","title":"Contract Metadata","titles":[null,"Metadata"]},"31":{"href":"/cairo/migration#migration","html":"\n<p><a href=\"/cairo/migration/0.3.0.md\">0.2.0 -&gt; 0.3.0</a></p>\n<p><a href=\"/cairo/migration/0.3.0.md\">0.3.0 -&gt; 0.4.0</a></p>","isPage":true,"text":"\n0.2.0 -&gt; 0.3.0\n0.3.0 -&gt; 0.4.0","title":"Migration","titles":[null]},"32":{"href":"/cairo/models#models","html":"\n<blockquote>\n<p>Models = Data</p>\n</blockquote>\n<strong><em>TL;DR</em></strong>\n<ul>\n<li>Models store structured data in your world.</li>\n<li>Models are Cairo structs with additional features.</li>\n<li>Models can implement traits.</li>\n<li>Use the <code>#[derive(Model)]</code> decorator to define them.</li>\n<li>Custom enums and types are supported.</li>\n<li>Define the primary key using the <code>#[key]</code> attribute.</li>\n</ul>\n","isPage":true,"text":"\n\nModels = Data\n\nTL;DR\n\nModels store structured data in your world.\nModels are Cairo structs with additional features.\nModels can implement traits.\nUse the #[derive(Model)] decorator to define them.\nCustom enums and types are supported.\nDefine the primary key using the #[key] attribute.\n\n","title":"Models","titles":[null]},"33":{"href":"/cairo/models#models-are-structs","html":"\n<p>Models are structs annotated with the <code>#[derive(Model)]</code> attribute. Consider these models as a key-value store, where the <code>#[key]</code> attribute is utilized to define the primary key. While models can contain any number of fields, adhering to best practices in Entity-Component-System (ECS) design involves maintaining small, isolated models.</p>\n<p>This approach fosters modularity and composability, enabling you to reuse models across various entity types.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Model, Copy, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Moves {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    player: ContractAddress,</span></span>\n<span data-line=\"\"><span>    remaining: u8,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n","isPage":false,"text":"\nModels are structs annotated with the #[derive(Model)] attribute. Consider these models as a key-value store, where the #[key] attribute is utilized to define the primary key. While models can contain any number of fields, adhering to best practices in Entity-Component-System (ECS) design involves maintaining small, isolated models.\nThis approach fosters modularity and composability, enabling you to reuse models across various entity types.\n#[derive(Model, Copy, Drop, Serde)]\nstruct Moves {\n    #[key]\n    player: ContractAddress,\n    remaining: u8,\n}\n","title":"Models are Structs","titles":[null,"Models"]},"34":{"href":"/cairo/models#the-key-attribute","html":"\n<p>The <code>#[key]</code> attribute indicates to Dojo that this model is indexed by the <code>player</code> field. A field that is identified as a <code>#[key]</code> is not stored. It is used by the dojo database system to uniquely identify the storage location that contains your model.</p>\n<p>You need to define at least one key for each model, as this is how you query the model. However, you can create composite keys by defining multiple fields as keys. If you define multiple keys, they must <strong>all</strong> be provided to query the model.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Model, Copy, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Resource {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    player: ContractAddress,</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    location: ContractAddress,</span></span>\n<span data-line=\"\"><span>    balance: u8,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>In this case you then would set the model with both the player and location fields:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>set!(</span></span>\n<span data-line=\"\"><span>    world,</span></span>\n<span data-line=\"\"><span>    (</span></span>\n<span data-line=\"\"><span>        Resource {</span></span>\n<span data-line=\"\"><span>            player: caller,</span></span>\n<span data-line=\"\"><span>            location: 12,</span></span>\n<span data-line=\"\"><span>            balance: 10</span></span>\n<span data-line=\"\"><span>        },</span></span>\n<span data-line=\"\"><span>    )</span></span>\n<span data-line=\"\"><span>);</span></span></code></pre></figure>\n<p>To retrieve a model with a composite key using the <a href=\"/cairo/commands.md#the-get-command\">get!</a> command, you must provide a value for each key as follow:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>let player = get_caller_address();</span></span>\n<span data-line=\"\"><span>let location = 0x1234;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>let resource = get!(world, (player, location), (Resource));</span></span></code></pre></figure>\n","isPage":false,"text":"\nThe #[key] attribute indicates to Dojo that this model is indexed by the player field. A field that is identified as a #[key] is not stored. It is used by the dojo database system to uniquely identify the storage location that contains your model.\nYou need to define at least one key for each model, as this is how you query the model. However, you can create composite keys by defining multiple fields as keys. If you define multiple keys, they must all be provided to query the model.\n#[derive(Model, Copy, Drop, Serde)]\nstruct Resource {\n    #[key]\n    player: ContractAddress,\n    #[key]\n    location: ContractAddress,\n    balance: u8,\n}\nIn this case you then would set the model with both the player and location fields:\nset!(\n    world,\n    (\n        Resource {\n            player: caller,\n            location: 12,\n            balance: 10\n        },\n    )\n);\nTo retrieve a model with a composite key using the get! command, you must provide a value for each key as follow:\nlet player = get_caller_address();\nlet location = 0x1234;\n \nlet resource = get!(world, (player, location), (Resource));\n","title":"The #[key] attribute","titles":[null,"Models","Models are Structs"]},"35":{"href":"/cairo/models#implementing-traits","html":"\n<p>Models can implement traits. This is useful for defining common functionality across models. For example, you may want to define a <code>Position</code> model that implements a <code>PositionTrait</code> trait. This trait could define functions such as <code>is_zero</code> and <code>is_equal</code> which could be used when accessing the model.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>trait PositionTrait {</span></span>\n<span data-line=\"\"><span>    fn is_zero(self: Position) -&gt; bool;</span></span>\n<span data-line=\"\"><span>    fn is_equal(self: Position, b: Position) -&gt; bool;</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>impl PositionImpl of PositionTrait {</span></span>\n<span data-line=\"\"><span>    fn is_zero(self: Position) -&gt; bool {</span></span>\n<span data-line=\"\"><span>        if self.x - self.y == 0 {</span></span>\n<span data-line=\"\"><span>            return true;</span></span>\n<span data-line=\"\"><span>        }</span></span>\n<span data-line=\"\"><span>        false</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    fn is_equal(self: Position, b: Position) -&gt; bool {</span></span>\n<span data-line=\"\"><span>        self.x == b.x &amp;&amp; self.y == b.y</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n","isPage":false,"text":"\nModels can implement traits. This is useful for defining common functionality across models. For example, you may want to define a Position model that implements a PositionTrait trait. This trait could define functions such as is_zero and is_equal which could be used when accessing the model.\ntrait PositionTrait {\n    fn is_zero(self: Position) -&gt; bool;\n    fn is_equal(self: Position, b: Position) -&gt; bool;\n}\n \nimpl PositionImpl of PositionTrait {\n    fn is_zero(self: Position) -&gt; bool {\n        if self.x - self.y == 0 {\n            return true;\n        }\n        false\n    }\n \n    fn is_equal(self: Position, b: Position) -&gt; bool {\n        self.x == b.x &amp;&amp; self.y == b.y\n    }\n}\n","title":"Implementing Traits","titles":[null,"Models","Models are Structs"]},"36":{"href":"/cairo/models#custom-setting-models","html":"\n<p>Suppose we need a place to keep a global value with the flexibility to modify it in the future. Take, for instance, a global <code>combat_cool_down</code> parameter that defines the duration required for an entity to be primed for another attack. To achieve this, we can craft a model dedicated to storing this value, while also allowing for its modification via a decentralized governance model.</p>\n<p>To establish these models, you&#x27;d follow the usual creation method. However, when initializing them, employ a constant identifier, such as GAME_SETTINGS_ID.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>const GAME_SETTINGS_ID: u32 = 9999999999999;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(model, Copy, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct GameSettings {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    game_settings_id: u32,</span></span>\n<span data-line=\"\"><span>    combat_cool_down: u32,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n","isPage":false,"text":"\nSuppose we need a place to keep a global value with the flexibility to modify it in the future. Take, for instance, a global combat_cool_down parameter that defines the duration required for an entity to be primed for another attack. To achieve this, we can craft a model dedicated to storing this value, while also allowing for its modification via a decentralized governance model.\nTo establish these models, you&#x27;d follow the usual creation method. However, when initializing them, employ a constant identifier, such as GAME_SETTINGS_ID.\nconst GAME_SETTINGS_ID: u32 = 9999999999999;\n \n#[derive(model, Copy, Drop, Serde)]\nstruct GameSettings {\n    #[key]\n    game_settings_id: u32,\n    combat_cool_down: u32,\n}\n","title":"Custom Setting models","titles":[null,"Models","Models are Structs"]},"37":{"href":"/cairo/models#types","html":"\n<p>Support model types:</p>\n<ul>\n<li><code>u8</code></li>\n<li><code>u16</code></li>\n<li><code>u32</code></li>\n<li><code>u64</code></li>\n<li><code>u128</code></li>\n<li><code>u256</code></li>\n<li><code>ContractAddress</code></li>\n<li>Enums</li>\n<li>Custom Types</li>\n</ul>\n<p>It is currently not possible to use Arrays.</p>\n","isPage":false,"text":"\nSupport model types:\n\nu8\nu16\nu32\nu64\nu128\nu256\nContractAddress\nEnums\nCustom Types\n\nIt is currently not possible to use Arrays.\n","title":"Types","titles":[null,"Models","Models are Structs"]},"38":{"href":"/cairo/models#custom-types--enums","html":"\n<p>For models containing complex types, it&#x27;s crucial to implement the <code>SchemaIntrospection</code> trait.</p>\n<p>Consider the model below:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>struct Card {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    token_id: u256,</span></span>\n<span data-line=\"\"><span>    /// The card&#x27;s designated role.</span></span>\n<span data-line=\"\"><span>    role: Roles,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>For complex types, like <code>Roles</code> in the above example, you need to implement <code>SchemaIntrospection</code>. Here&#x27;s how:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>impl RolesSchemaIntrospectionImpl for SchemaIntrospection&lt;Roles&gt; {</span></span>\n<span data-line=\"\"><span>    #[inline(always)]</span></span>\n<span data-line=\"\"><span>    fn size() -&gt; usize {</span></span>\n<span data-line=\"\"><span>        1 // Represents the byte size of the enum.</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    #[inline(always)]</span></span>\n<span data-line=\"\"><span>    fn layout(ref layout: Array&lt;u8&gt;) {</span></span>\n<span data-line=\"\"><span>        layout.append(8); // Specifies the layout byte size;</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    #[inline(always)]</span></span>\n<span data-line=\"\"><span>    fn ty() -&gt; Ty {</span></span>\n<span data-line=\"\"><span>        Ty::Enum(</span></span>\n<span data-line=\"\"><span>            Enum {</span></span>\n<span data-line=\"\"><span>                name: &#x27;Roles&#x27;,</span></span>\n<span data-line=\"\"><span>                attrs: array![].span(),</span></span>\n<span data-line=\"\"><span>                children: array![</span></span>\n<span data-line=\"\"><span>                    (&#x27;Goalkeeper&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),</span></span>\n<span data-line=\"\"><span>                    (&#x27;Defender&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),</span></span>\n<span data-line=\"\"><span>                    (&#x27;Midfielder&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),</span></span>\n<span data-line=\"\"><span>                    (&#x27;Attacker&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),</span></span>\n<span data-line=\"\"><span>                ]</span></span>\n<span data-line=\"\"><span>                .span()</span></span>\n<span data-line=\"\"><span>            }</span></span>\n<span data-line=\"\"><span>        )</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n","isPage":false,"text":"\nFor models containing complex types, it&#x27;s crucial to implement the SchemaIntrospection trait.\nConsider the model below:\nstruct Card {\n    #[key]\n    token_id: u256,\n    /// The card&#x27;s designated role.\n    role: Roles,\n}\nFor complex types, like Roles in the above example, you need to implement SchemaIntrospection. Here&#x27;s how:\nimpl RolesSchemaIntrospectionImpl for SchemaIntrospection&lt;Roles&gt; {\n    #[inline(always)]\n    fn size() -&gt; usize {\n        1 // Represents the byte size of the enum.\n    }\n \n    #[inline(always)]\n    fn layout(ref layout: Array&lt;u8&gt;) {\n        layout.append(8); // Specifies the layout byte size;\n    }\n \n    #[inline(always)]\n    fn ty() -&gt; Ty {\n        Ty::Enum(\n            Enum {\n                name: &#x27;Roles&#x27;,\n                attrs: array![].span(),\n                children: array![\n                    (&#x27;Goalkeeper&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                    (&#x27;Defender&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                    (&#x27;Midfielder&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                    (&#x27;Attacker&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                ]\n                .span()\n            }\n        )\n    }\n}\n","title":"Custom Types + Enums","titles":[null,"Models","Models are Structs"]},"39":{"href":"/cairo/models#in-practice-with-modularity-in-mind","html":"\n<p>Consider a tangible analogy: Humans and Goblins. While they possess intrinsic differences, they share common traits, such as having a position and health. However, humans possess an additional model. Furthermore, we introduce a Counter model, a distinct feature that tallies the numbers of humans and goblins.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Model, Copy, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Potions {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    entity_id: u32,</span></span>\n<span data-line=\"\"><span>    quantity: u8,</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(Model, Copy, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Health {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    entity_id: u32,</span></span>\n<span data-line=\"\"><span>    health: u8,</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(Model, Copy, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Position {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    entity_id: u32,</span></span>\n<span data-line=\"\"><span>    x: u32,</span></span>\n<span data-line=\"\"><span>    y: u32</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>// Special counter model</span></span>\n<span data-line=\"\"><span>#[derive(Model, Copy, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Counter {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    counter: u32,</span></span>\n<span data-line=\"\"><span>    goblin_count: u32,</span></span>\n<span data-line=\"\"><span>    human_count: u32,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>So the Human will have a <code>Potions</code>, <code>Health</code> and <code>Position</code> model, and the Goblin will have a <code>Health</code> and <code>Position</code> model. By doing we save having to create Health and Position models for each entity type.</p>\n<p>So then a contract would look like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[dojo::contract]</span></span>\n<span data-line=\"\"><span>mod spawnHuman {</span></span>\n<span data-line=\"\"><span>    use array::ArrayTrait;</span></span>\n<span data-line=\"\"><span>    use box::BoxTrait;</span></span>\n<span data-line=\"\"><span>    use traits::Into;</span></span>\n<span data-line=\"\"><span>    use dojo::world::Context;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    use dojo_examples::models::Position;</span></span>\n<span data-line=\"\"><span>    use dojo_examples::models::Health;</span></span>\n<span data-line=\"\"><span>    use dojo_examples::models::Potions;</span></span>\n<span data-line=\"\"><span>    use dojo_examples::models::Counter;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    // we can set the counter value as a const, then query it easily! This pattern is useful for settings.</span></span>\n<span data-line=\"\"><span>    const COUNTER_ID: u32 = 9999999999999;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    // impl: implement functions specified in trait</span></span>\n<span data-line=\"\"><span>    #[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span>    impl GoblinActionsImpl of IGoblinActions&lt;ContractState&gt; {</span></span>\n<span data-line=\"\"><span>        fn goblin_actions(self: @ContractState, entity_id: u32) {</span></span>\n<span data-line=\"\"><span>            let world = self.world_dispatcher.read();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            let counter = get!(world, COUNTER_ID, (Counter));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            let human_count = counter.human_count + 1;</span></span>\n<span data-line=\"\"><span>            let goblin_count = counter.goblin_count + 1;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // spawn a human</span></span>\n<span data-line=\"\"><span>            set!(</span></span>\n<span data-line=\"\"><span>                world,</span></span>\n<span data-line=\"\"><span>                (</span></span>\n<span data-line=\"\"><span>                    Health {</span></span>\n<span data-line=\"\"><span>                        entity_id: human_count, health: 100</span></span>\n<span data-line=\"\"><span>                        },</span></span>\n<span data-line=\"\"><span>                    Position {</span></span>\n<span data-line=\"\"><span>                        entity_id: human_count, x: position.x + 10, y: position.y + 10,</span></span>\n<span data-line=\"\"><span>                        },</span></span>\n<span data-line=\"\"><span>                    Potions {</span></span>\n<span data-line=\"\"><span>                        entity_id: human_count, quantity: 10</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>                    },</span></span>\n<span data-line=\"\"><span>                )</span></span>\n<span data-line=\"\"><span>            );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // spawn a goblin</span></span>\n<span data-line=\"\"><span>            set!(</span></span>\n<span data-line=\"\"><span>                world,</span></span>\n<span data-line=\"\"><span>                (</span></span>\n<span data-line=\"\"><span>                    Health {</span></span>\n<span data-line=\"\"><span>                        entity_id: goblin_count, health: 100</span></span>\n<span data-line=\"\"><span>                        },</span></span>\n<span data-line=\"\"><span>                    Position {</span></span>\n<span data-line=\"\"><span>                        entity_id: goblin_count, x: position.x + 10, y: position.y + 10,</span></span>\n<span data-line=\"\"><span>                        },</span></span>\n<span data-line=\"\"><span>                )</span></span>\n<span data-line=\"\"><span>            );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // increment the counter</span></span>\n<span data-line=\"\"><span>            set!(</span></span>\n<span data-line=\"\"><span>                world,</span></span>\n<span data-line=\"\"><span>                (</span></span>\n<span data-line=\"\"><span>                    Counter {</span></span>\n<span data-line=\"\"><span>                        counter: COUNTER_ID, human_count: human_count, goblin_count: goblin_count</span></span>\n<span data-line=\"\"><span>                    },</span></span>\n<span data-line=\"\"><span>                )</span></span>\n<span data-line=\"\"><span>            );</span></span>\n<span data-line=\"\"><span>        }</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<blockquote>\n<p>A complete example can be found in the <a href=\"https://github.com/dojoengine/dojo-starter\">Dojo Starter</a></p>\n</blockquote>","isPage":false,"text":"\nConsider a tangible analogy: Humans and Goblins. While they possess intrinsic differences, they share common traits, such as having a position and health. However, humans possess an additional model. Furthermore, we introduce a Counter model, a distinct feature that tallies the numbers of humans and goblins.\n#[derive(Model, Copy, Drop, Serde)]\nstruct Potions {\n    #[key]\n    entity_id: u32,\n    quantity: u8,\n}\n \n#[derive(Model, Copy, Drop, Serde)]\nstruct Health {\n    #[key]\n    entity_id: u32,\n    health: u8,\n}\n \n#[derive(Model, Copy, Drop, Serde)]\nstruct Position {\n    #[key]\n    entity_id: u32,\n    x: u32,\n    y: u32\n}\n \n// Special counter model\n#[derive(Model, Copy, Drop, Serde)]\nstruct Counter {\n    #[key]\n    counter: u32,\n    goblin_count: u32,\n    human_count: u32,\n}\nSo the Human will have a Potions, Health and Position model, and the Goblin will have a Health and Position model. By doing we save having to create Health and Position models for each entity type.\nSo then a contract would look like this:\n#[dojo::contract]\nmod spawnHuman {\n    use array::ArrayTrait;\n    use box::BoxTrait;\n    use traits::Into;\n    use dojo::world::Context;\n \n    use dojo_examples::models::Position;\n    use dojo_examples::models::Health;\n    use dojo_examples::models::Potions;\n    use dojo_examples::models::Counter;\n \n    // we can set the counter value as a const, then query it easily! This pattern is useful for settings.\n    const COUNTER_ID: u32 = 9999999999999;\n \n    // impl: implement functions specified in trait\n    #[abi(embed_v0)]\n    impl GoblinActionsImpl of IGoblinActions&lt;ContractState&gt; {\n        fn goblin_actions(self: @ContractState, entity_id: u32) {\n            let world = self.world_dispatcher.read();\n \n            let counter = get!(world, COUNTER_ID, (Counter));\n \n            let human_count = counter.human_count + 1;\n            let goblin_count = counter.goblin_count + 1;\n \n            // spawn a human\n            set!(\n                world,\n                (\n                    Health {\n                        entity_id: human_count, health: 100\n                        },\n                    Position {\n                        entity_id: human_count, x: position.x + 10, y: position.y + 10,\n                        },\n                    Potions {\n                        entity_id: human_count, quantity: 10\n \n                    },\n                )\n            );\n \n            // spawn a goblin\n            set!(\n                world,\n                (\n                    Health {\n                        entity_id: goblin_count, health: 100\n                        },\n                    Position {\n                        entity_id: goblin_count, x: position.x + 10, y: position.y + 10,\n                        },\n                )\n            );\n \n            // increment the counter\n            set!(\n                world,\n                (\n                    Counter {\n                        counter: COUNTER_ID, human_count: human_count, goblin_count: goblin_count\n                    },\n                )\n            );\n        }\n    }\n}\n\nA complete example can be found in the Dojo Starter\n","title":"In practice with modularity in mind","titles":[null,"Models"]},"40":{"href":"/cairo/origami#what-is-origami","html":"\n<p>Origami is the native dojo collection of primitives that can be imported into your game.</p>\n<p>It contains:</p>\n<ul>\n<li>algebra</li>\n<li>defi</li>\n<li>hex map</li>\n<li>random</li>\n<li>security</li>\n<li>erc tokens</li>\n</ul>\n<p>Find the <a href=\"https://github.com/dojoengine/origami\">Origami repo</a></p>","isPage":true,"text":"\nOrigami is the native dojo collection of primitives that can be imported into your game.\nIt contains:\n\nalgebra\ndefi\nhex map\nrandom\nsecurity\nerc tokens\n\nFind the Origami repo","title":"What is Origami?","titles":[null]},"41":{"href":"/cairo/overview#a-new-approach-to-onchain-game-development","html":"\n<p>Dojo provides an advanced abstraction layer over Cairo, mirroring React&#x27;s relationship with JavaScript. Its specialized architecture simplifies game design and development.</p>\n<p>By leveraging Dojo, developers can use succinct <a href=\"/cairo/commands.md\">commands</a> that transform into comprehensive queries at compile time.</p>\n","isPage":true,"text":"\nDojo provides an advanced abstraction layer over Cairo, mirroring React&#x27;s relationship with JavaScript. Its specialized architecture simplifies game design and development.\nBy leveraging Dojo, developers can use succinct commands that transform into comprehensive queries at compile time.\n","title":"A New Approach to Onchain Game Development","titles":[null]},"42":{"href":"/cairo/overview#delving-into-the-architecture","html":"\n<p>Dojo efficiently encapsulates boilerplate contracts within the compiler, letting developers concentrate on the distinct aspects of their game or app.</p>\n<p>Consider this as the most basic Dojo world setup:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>- src</span></span>\n<span data-line=\"\"><span>  - main.cairo</span></span>\n<span data-line=\"\"><span>  - lib.cairo</span></span>\n<span data-line=\"\"><span>- Scarb.toml</span></span></code></pre></figure>\n<p>While seemingly simple, behind the scenes Dojo compiler generates foundational contracts, setting the stage for you to focus purely on data and logic.</p>\n<p>Lets take a look at the <code>main.cairo</code>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>use starknet::ContractAddress;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>// dojo data models</span></span>\n<span data-line=\"\"><span>#[derive(Model, Copy, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Position {</span></span>\n<span data-line=\"\"><span>    #[key] // primary key</span></span>\n<span data-line=\"\"><span>    player: ContractAddress,</span></span>\n<span data-line=\"\"><span>    vec: Vec2,</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>// regular cairo struct</span></span>\n<span data-line=\"\"><span>#[derive(Copy, Drop, Serde, Introspect)]</span></span>\n<span data-line=\"\"><span>struct Vec2 {</span></span>\n<span data-line=\"\"><span>    x: u32,</span></span>\n<span data-line=\"\"><span>    y: u32</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>// interface</span></span>\n<span data-line=\"\"><span>#[starknet::interface]</span></span>\n<span data-line=\"\"><span>trait IPlayerActions&lt;TContractState&gt; {</span></span>\n<span data-line=\"\"><span>    fn spawn(self: @TContractState);</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>// contract</span></span>\n<span data-line=\"\"><span>#[dojo::contract]</span></span>\n<span data-line=\"\"><span>mod player_actions {</span></span>\n<span data-line=\"\"><span>    use starknet::{ContractAddress, get_caller_address};</span></span>\n<span data-line=\"\"><span>    use super::{Position, Vec2};</span></span>\n<span data-line=\"\"><span>    use super::IPlayerActions;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    #[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span>    impl PlayerActionsImpl of IPlayerActions&lt;ContractState&gt; {</span></span>\n<span data-line=\"\"><span>        //</span></span>\n<span data-line=\"\"><span>        // This is how we interact with the world contract.</span></span>\n<span data-line=\"\"><span>        //</span></span>\n<span data-line=\"\"><span>        fn spawn(self: @ContractState) {</span></span>\n<span data-line=\"\"><span>            // Access the world dispatcher for reading.</span></span>\n<span data-line=\"\"><span>            let world = self.world_dispatcher.read();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // get player address</span></span>\n<span data-line=\"\"><span>            let player = get_caller_address();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // dojo command - get player position</span></span>\n<span data-line=\"\"><span>            let position = get!(world, player, (Position));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // dojo command - set player position</span></span>\n<span data-line=\"\"><span>            set!(world, (Position { player, vec: Vec2 { x: 10, y: 10 } }));</span></span>\n<span data-line=\"\"><span>        }</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n","isPage":false,"text":"\nDojo efficiently encapsulates boilerplate contracts within the compiler, letting developers concentrate on the distinct aspects of their game or app.\nConsider this as the most basic Dojo world setup:\n- src\n  - main.cairo\n  - lib.cairo\n- Scarb.toml\nWhile seemingly simple, behind the scenes Dojo compiler generates foundational contracts, setting the stage for you to focus purely on data and logic.\nLets take a look at the main.cairo:\nuse starknet::ContractAddress;\n \n// dojo data models\n#[derive(Model, Copy, Drop, Serde)]\nstruct Position {\n    #[key] // primary key\n    player: ContractAddress,\n    vec: Vec2,\n}\n \n// regular cairo struct\n#[derive(Copy, Drop, Serde, Introspect)]\nstruct Vec2 {\n    x: u32,\n    y: u32\n}\n \n// interface\n#[starknet::interface]\ntrait IPlayerActions&lt;TContractState&gt; {\n    fn spawn(self: @TContractState);\n}\n \n// contract\n#[dojo::contract]\nmod player_actions {\n    use starknet::{ContractAddress, get_caller_address};\n    use super::{Position, Vec2};\n    use super::IPlayerActions;\n \n    #[abi(embed_v0)]\n    impl PlayerActionsImpl of IPlayerActions&lt;ContractState&gt; {\n        //\n        // This is how we interact with the world contract.\n        //\n        fn spawn(self: @ContractState) {\n            // Access the world dispatcher for reading.\n            let world = self.world_dispatcher.read();\n \n            // get player address\n            let player = get_caller_address();\n \n            // dojo command - get player position\n            let position = get!(world, player, (Position));\n \n            // dojo command - set player position\n            set!(world, (Position { player, vec: Vec2 { x: 10, y: 10 } }));\n        }\n    }\n}\n","title":"Delving into the Architecture","titles":[null,"A New Approach to Onchain Game Development",null]},"43":{"href":"/cairo/overview#breakdown","html":"\n<p>Dojo contract is just a regular Cairo contract, with some dojo specifics.</p>\n","isPage":false,"text":"\nDojo contract is just a regular Cairo contract, with some dojo specifics.\n","title":"Breakdown","titles":[null,"A New Approach to Onchain Game Development"]},"44":{"href":"/cairo/overview#position-struct---the-dojo-model","html":"\n<p>In a Dojo world, state is defined using models. These are structs marked with the <code>#[derive(Model)]</code> attribute, functioning similarly to a key-pair store. The primary key for a model is indicated using the <code>#[key]</code> attribute; for instance, the <code>player</code> field serves as the primary key in this context.</p>\n<p>Read more about models <a href=\"/cairo/models.md\">here</a>.</p>\n","isPage":false,"text":"\nIn a Dojo world, state is defined using models. These are structs marked with the #[derive(Model)] attribute, functioning similarly to a key-pair store. The primary key for a model is indicated using the #[key] attribute; for instance, the player field serves as the primary key in this context.\nRead more about models here.\n","title":"Position struct - the dojo model","titles":[null,"A New Approach to Onchain Game Development","Breakdown"]},"45":{"href":"/cairo/overview#spawn-function---a-dojo-system","html":"\n<p>In the <code>spawn</code> function, we just call <code>self.world_dispatcher</code>. This provides a gateway to the world contract. This facilitates the effortless utilization of the get! and set! commands, allowing seamless interaction with the world contract.</p>\n<p>Commands, a significant innovation in Dojo, are further explored <a href=\"/cairo/commands.md\">here</a>.</p>","isPage":false,"text":"\nIn the spawn function, we just call self.world_dispatcher. This provides a gateway to the world contract. This facilitates the effortless utilization of the get! and set! commands, allowing seamless interaction with the world contract.\nCommands, a significant innovation in Dojo, are further explored here.","title":"spawn function - a dojo system","titles":[null,"A New Approach to Onchain Game Development","Breakdown"]},"46":{"href":"/cairo/systems#systems","html":"\n<blockquote>\n<p><strong>IMPORTANT:</strong> Before defining your systems, prioritize permissions. Plan carefully to ensure proper access and security.</p>\n</blockquote>\n<strong><em>TL;DR</em></strong>\n<ul>\n<li>Systems function as contract methods.</li>\n<li>Contracts containing Systems gain permissions to write to models.</li>\n<li>Systems pass a <code>world</code> address as their first parameter unless utilizing the <a href=\"#the-dojocontract-decorator\"><code>#[dojo::contract]</code></a> decorator.</li>\n<li>Systems engage the world contract to alter models&#x27; state.</li>\n<li>The world contract is invoked through systems.</li>\n<li>Systems ought to be concise and specific.</li>\n<li>In most scenarios, systems are stateless.</li>\n</ul>\n","isPage":true,"text":"\n\nIMPORTANT: Before defining your systems, prioritize permissions. Plan carefully to ensure proper access and security.\n\nTL;DR\n\nSystems function as contract methods.\nContracts containing Systems gain permissions to write to models.\nSystems pass a world address as their first parameter unless utilizing the #[dojo::contract] decorator.\nSystems engage the world contract to alter models&#x27; state.\nThe world contract is invoked through systems.\nSystems ought to be concise and specific.\nIn most scenarios, systems are stateless.\n\n","title":"Systems","titles":[null]},"47":{"href":"/cairo/systems#what-are-systems","html":"\n<p>Within dojo we define systems as functions within a Dojo Contract that act on the world.</p>\n<p>Systems play a pivotal role in your world&#x27;s logic, directly mutating its component states. It&#x27;s important to understand that to enact these mutations, a system needs explicit permission from the <a href=\"/cairo/models.md\"><code>models</code></a> owner.</p>\n","isPage":false,"text":"\nWithin dojo we define systems as functions within a Dojo Contract that act on the world.\nSystems play a pivotal role in your world&#x27;s logic, directly mutating its component states. It&#x27;s important to understand that to enact these mutations, a system needs explicit permission from the models owner.\n","title":"What are Systems?","titles":[null,"Systems"]},"48":{"href":"/cairo/systems#system-permissions","html":"\n<p>Since the whole contract is given write access to the model, it is important to be careful when defining systems. A simple way to think about it is:</p>\n<p><img src=\"/permissions.png\" alt=\"System Permissions\"/></p>\n","isPage":false,"text":"\nSince the whole contract is given write access to the model, it is important to be careful when defining systems. A simple way to think about it is:\n\n","title":"System Permissions","titles":[null,"Systems"]},"49":{"href":"/cairo/systems#system-structure","html":"\n<p>Every system function starts with a <a href=\"/cairo/world.md\"><code>world</code></a> address as its initial parameter. This design permits these functions to alter the world&#x27;s state. Notably, this structure also makes systems adaptable and reusable across multiple worlds!</p>\n<p>Let&#x27;s look at the simplest possible system which mutates the state of the <code>Moves</code> component.</p>\n<blockquote>\n<p>NOTE: This is not using the #[dojo::contract] attribute meaning it was to accept the world as a parameter.</p>\n</blockquote>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[starknet::contract]</span></span>\n<span data-line=\"\"><span>mod player_actions {</span></span>\n<span data-line=\"\"><span>    use starknet::{ContractAddress, get_caller_address};</span></span>\n<span data-line=\"\"><span>    use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};</span></span>\n<span data-line=\"\"><span>    use dojo_examples::components::{Position, Moves, Direction, Vec2};</span></span>\n<span data-line=\"\"><span>    use dojo_examples::utils::next_position;</span></span>\n<span data-line=\"\"><span>    use super::IPlayerActions;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    // no storage</span></span>\n<span data-line=\"\"><span>    #[storage]</span></span>\n<span data-line=\"\"><span>    struct Storage {}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    // implementation of the PlayerActions interface</span></span>\n<span data-line=\"\"><span>    #[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span>    impl PlayerActionsImpl of IPlayerActions&lt;ContractState&gt; {</span></span>\n<span data-line=\"\"><span>        fn spawn(self: @ContractState, world: IWorldDispatcher) {</span></span>\n<span data-line=\"\"><span>            let player = get_caller_address();</span></span>\n<span data-line=\"\"><span>            let position = get!(world, player, (Position));</span></span>\n<span data-line=\"\"><span>            set!(</span></span>\n<span data-line=\"\"><span>                world,</span></span>\n<span data-line=\"\"><span>                (</span></span>\n<span data-line=\"\"><span>                    Moves {</span></span>\n<span data-line=\"\"><span>                        player,</span></span>\n<span data-line=\"\"><span>                        remaining: 10,</span></span>\n<span data-line=\"\"><span>                        last_direction: Direction::None(())</span></span>\n<span data-line=\"\"><span>                    }</span></span>\n<span data-line=\"\"><span>                )</span></span>\n<span data-line=\"\"><span>            );</span></span>\n<span data-line=\"\"><span>        }</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n","isPage":false,"text":"\nEvery system function starts with a world address as its initial parameter. This design permits these functions to alter the world&#x27;s state. Notably, this structure also makes systems adaptable and reusable across multiple worlds!\nLet&#x27;s look at the simplest possible system which mutates the state of the Moves component.\n\nNOTE: This is not using the #[dojo::contract] attribute meaning it was to accept the world as a parameter.\n\n#[starknet::contract]\nmod player_actions {\n    use starknet::{ContractAddress, get_caller_address};\n    use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};\n    use dojo_examples::components::{Position, Moves, Direction, Vec2};\n    use dojo_examples::utils::next_position;\n    use super::IPlayerActions;\n \n    // no storage\n    #[storage]\n    struct Storage {}\n \n    // implementation of the PlayerActions interface\n    #[abi(embed_v0)]\n    impl PlayerActionsImpl of IPlayerActions&lt;ContractState&gt; {\n        fn spawn(self: @ContractState, world: IWorldDispatcher) {\n            let player = get_caller_address();\n            let position = get!(world, player, (Position));\n            set!(\n                world,\n                (\n                    Moves {\n                        player,\n                        remaining: 10,\n                        last_direction: Direction::None(())\n                    }\n                )\n            );\n        }\n    }\n}\n","title":"System Structure","titles":[null,"Systems"]},"50":{"href":"/cairo/systems#breaking-it-down","html":"\n","isPage":false,"text":"\n","title":"Breaking it down","titles":[null]},"51":{"href":"/cairo/systems#system-is-a-function-in-a-contract","html":"\n<p>As you can see a System is like a regular function of a Starknet contract. This contract can include storage, and it can implement interfaces.</p>\n","isPage":false,"text":"\nAs you can see a System is like a regular function of a Starknet contract. This contract can include storage, and it can implement interfaces.\n","title":"System is a function in a contract","titles":[null,"Breaking it down","System Structure"]},"52":{"href":"/cairo/systems#spawn-function","html":"\n<p>The spawn function is currently the only system that exists in this contract. It is called when a player spawns into the world. It is responsible for setting up the player&#x27;s initial state.</p>\n","isPage":false,"text":"\nThe spawn function is currently the only system that exists in this contract. It is called when a player spawns into the world. It is responsible for setting up the player&#x27;s initial state.\n","title":"Spawn function","titles":[null,"Breaking it down","System Structure"]},"53":{"href":"/cairo/systems#the-dojocontract-decorator","html":"\n<p>All Starknet contracts are defined using the <code>#[starknet::contract]</code> decorator, ensuring accurate compilation. In this context, Dojo introduces the <code>#[dojo::contract]</code> decorator, which aims to minimize boilerplate in contract writing.</p>\n<p>The <code>#[dojo::contract]</code> decorator allows developers to omit including <code>world: IWorldDispatcher</code> as a parameter. Behind the scenes, it injects the world into the contract and eliminates some imports, thereby streamlining the development process.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[dojo::contract]</span></span>\n<span data-line=\"\"><span>mod player_actions {</span></span>\n<span data-line=\"\"><span>    use starknet::{ContractAddress, get_caller_address};</span></span>\n<span data-line=\"\"><span>    use dojo_examples::models::{Position, Moves, Direction, Vec2};</span></span>\n<span data-line=\"\"><span>    use dojo_examples::utils::next_position;</span></span>\n<span data-line=\"\"><span>    use super::IPlayerActions;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    #[event]</span></span>\n<span data-line=\"\"><span>    #[derive(Drop, starknet::Event)]</span></span>\n<span data-line=\"\"><span>    enum Event {</span></span>\n<span data-line=\"\"><span>        Moved: Moved,</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    #[derive(Drop, starknet::Event)]</span></span>\n<span data-line=\"\"><span>    struct Moved {</span></span>\n<span data-line=\"\"><span>        player: ContractAddress,</span></span>\n<span data-line=\"\"><span>        direction: Direction</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    // impl: implement functions specified in trait</span></span>\n<span data-line=\"\"><span>    #[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span>    impl PlayerActionsImpl of IPlayerActions&lt;ContractState&gt; {</span></span>\n<span data-line=\"\"><span>        // ContractState is defined by system decorator expansion</span></span>\n<span data-line=\"\"><span>        fn spawn(self: @ContractState) {</span></span>\n<span data-line=\"\"><span>            // world dispatcher</span></span>\n<span data-line=\"\"><span>            let world = self.world_dispatcher.read();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // player</span></span>\n<span data-line=\"\"><span>            let player = get_caller_address();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // get the position</span></span>\n<span data-line=\"\"><span>            let position = get!(world, player, (Position));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // set the position</span></span>\n<span data-line=\"\"><span>            set!(</span></span>\n<span data-line=\"\"><span>                world,</span></span>\n<span data-line=\"\"><span>                (</span></span>\n<span data-line=\"\"><span>                    Moves { player, remaining: 10, last_direction: Direction::None(()) },</span></span>\n<span data-line=\"\"><span>                    Position { player, vec: Vec2 { x: 10, y: 10 } },</span></span>\n<span data-line=\"\"><span>                )</span></span>\n<span data-line=\"\"><span>            );</span></span>\n<span data-line=\"\"><span>        }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>        fn move(self: @ContractState, direction: Direction) {</span></span>\n<span data-line=\"\"><span>            // world dispatcher</span></span>\n<span data-line=\"\"><span>            let world = self.world_dispatcher.read();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // player</span></span>\n<span data-line=\"\"><span>            let player = get_caller_address();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // get the position and moves</span></span>\n<span data-line=\"\"><span>            let (mut position, mut moves) = get!(world, player, (Position, Moves));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // adjust</span></span>\n<span data-line=\"\"><span>            moves.remaining -= 1;</span></span>\n<span data-line=\"\"><span>            moves.last_direction = direction;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // get next direction</span></span>\n<span data-line=\"\"><span>            let next = next_position(position, direction);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // set models</span></span>\n<span data-line=\"\"><span>            set!(world, (moves, next));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>            // emit custom event</span></span>\n<span data-line=\"\"><span>            emit!(world, Moved { player, direction });</span></span>\n<span data-line=\"\"><span>        }</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<blockquote>\n<p>To interact with Systems read more in the <a href=\"/toolchain/sozo/overview.md\">sozo</a> docs.</p>\n</blockquote>","isPage":false,"text":"\nAll Starknet contracts are defined using the #[starknet::contract] decorator, ensuring accurate compilation. In this context, Dojo introduces the #[dojo::contract] decorator, which aims to minimize boilerplate in contract writing.\nThe #[dojo::contract] decorator allows developers to omit including world: IWorldDispatcher as a parameter. Behind the scenes, it injects the world into the contract and eliminates some imports, thereby streamlining the development process.\n#[dojo::contract]\nmod player_actions {\n    use starknet::{ContractAddress, get_caller_address};\n    use dojo_examples::models::{Position, Moves, Direction, Vec2};\n    use dojo_examples::utils::next_position;\n    use super::IPlayerActions;\n \n    #[event]\n    #[derive(Drop, starknet::Event)]\n    enum Event {\n        Moved: Moved,\n    }\n \n    #[derive(Drop, starknet::Event)]\n    struct Moved {\n        player: ContractAddress,\n        direction: Direction\n    }\n \n    // impl: implement functions specified in trait\n    #[abi(embed_v0)]\n    impl PlayerActionsImpl of IPlayerActions&lt;ContractState&gt; {\n        // ContractState is defined by system decorator expansion\n        fn spawn(self: @ContractState) {\n            // world dispatcher\n            let world = self.world_dispatcher.read();\n \n            // player\n            let player = get_caller_address();\n \n            // get the position\n            let position = get!(world, player, (Position));\n \n            // set the position\n            set!(\n                world,\n                (\n                    Moves { player, remaining: 10, last_direction: Direction::None(()) },\n                    Position { player, vec: Vec2 { x: 10, y: 10 } },\n                )\n            );\n        }\n \n        fn move(self: @ContractState, direction: Direction) {\n            // world dispatcher\n            let world = self.world_dispatcher.read();\n \n            // player\n            let player = get_caller_address();\n \n            // get the position and moves\n            let (mut position, mut moves) = get!(world, player, (Position, Moves));\n \n            // adjust\n            moves.remaining -= 1;\n            moves.last_direction = direction;\n \n            // get next direction\n            let next = next_position(position, direction);\n \n            // set models\n            set!(world, (moves, next));\n \n            // emit custom event\n            emit!(world, Moved { player, direction });\n        }\n    }\n}\n\nTo interact with Systems read more in the sozo docs.\n","title":"The #[dojo::contract] Decorator","titles":[null,"Breaking it down"]},"54":{"href":"/cairo/testing#testing","html":"\n<p>Testing is a crucial part of any software development process. Dojo provides a testing framework that allows you to write tests for your smart contracts. Since Dojo uses a custom compiler, you need to use <code>sozo</code> to test your contracts.</p>\n<p>From your project directory, simply:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark-dimmed\"><code data-language=\"shell\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> test</span></span></code></pre></figure>\n<p>This will search for all tests within your project and run them.</p>\n","isPage":true,"text":"\nTesting is a crucial part of any software development process. Dojo provides a testing framework that allows you to write tests for your smart contracts. Since Dojo uses a custom compiler, you need to use sozo to test your contracts.\nFrom your project directory, simply:\nsozo test\nThis will search for all tests within your project and run them.\n","title":"Testing","titles":[null]},"55":{"href":"/cairo/testing#writing-unit-tests","html":"\n<p>It is best practise to include unit tests in the same file as the Model/System you are writing.</p>\n<p>Lets show a <code>model</code> test example from the <a href=\"https://github.com/dojoengine/dojo-starter\">dojo-starter</a>:</p>\n<p><code>models.cairo</code></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"> </span>\n<span data-line=\"\"><span>...//rest of code</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[cfg(test)]</span></span>\n<span data-line=\"\"><span>mod tests {</span></span>\n<span data-line=\"\"><span>    use super::{Position, Vec2, Vec2Trait};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    #[test]</span></span>\n<span data-line=\"\"><span>    #[available_gas(100000)]</span></span>\n<span data-line=\"\"><span>    fn test_vec_is_zero() {</span></span>\n<span data-line=\"\"><span>        assert(Vec2Trait::is_zero(Vec2 { x: 0, y: 0 }), &#x27;not zero&#x27;);</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    #[test]</span></span>\n<span data-line=\"\"><span>    #[available_gas(100000)]</span></span>\n<span data-line=\"\"><span>    fn test_vec_is_equal() {</span></span>\n<span data-line=\"\"><span>        let position = Vec2 { x: 420, y: 0 };</span></span>\n<span data-line=\"\"><span>        assert(position.is_equal(Vec2 { x: 420, y: 0 }), &#x27;not equal&#x27;);</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>In this test we are testing the <code>is_zero</code> and <code>is_equal</code> functions of the <code>Position</code> model. It is good practise to test all functions of your models.</p>\n","isPage":false,"text":"\nIt is best practise to include unit tests in the same file as the Model/System you are writing.\nLets show a model test example from the dojo-starter:\nmodels.cairo\n \n...//rest of code\n \n#[cfg(test)]\nmod tests {\n    use super::{Position, Vec2, Vec2Trait};\n \n    #[test]\n    #[available_gas(100000)]\n    fn test_vec_is_zero() {\n        assert(Vec2Trait::is_zero(Vec2 { x: 0, y: 0 }), &#x27;not zero&#x27;);\n    }\n \n    #[test]\n    #[available_gas(100000)]\n    fn test_vec_is_equal() {\n        let position = Vec2 { x: 420, y: 0 };\n        assert(position.is_equal(Vec2 { x: 420, y: 0 }), &#x27;not equal&#x27;);\n    }\n}\nIn this test we are testing the is_zero and is_equal functions of the Position model. It is good practise to test all functions of your models.\n","title":"Writing Unit Tests","titles":[null,"Testing"]},"56":{"href":"/cairo/testing#writing-integration-tests","html":"\n<p>Integration tests are e2e tests that test the entire system. You can write integration tests for your world by creating a <code>tests</code> directory in your project root. Then create a file for each integration test you want to write.</p>\n<p>This is the example from the <a href=\"https://github.com/dojoengine/dojo-starter\">dojo-starter</a>:</p>\n<p><code>move.cairo</code></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[cfg(test)]</span></span>\n<span data-line=\"\"><span>mod tests {</span></span>\n<span data-line=\"\"><span>    use dojo::world::{IWorldDispatcherTrait, IWorldDispatcher};</span></span>\n<span data-line=\"\"><span>    use dojo::test_utils::{spawn_test_world, deploy_contract};</span></span>\n<span data-line=\"\"><span>    use dojo_examples::models::{position, moves};</span></span>\n<span data-line=\"\"><span>    use dojo_examples::models::{Position, Moves, Direction};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    use super::{actions, IActionsDispatcher, IActionsDispatcherTrait};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    // helper setup function</span></span>\n<span data-line=\"\"><span>    // reusable function for tests</span></span>\n<span data-line=\"\"><span>    fn setup_world() -&gt; IActionsDispatcher {</span></span>\n<span data-line=\"\"><span>        // components</span></span>\n<span data-line=\"\"><span>        let mut models = array![position::TEST_CLASS_HASH, moves::TEST_CLASS_HASH];</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>         // deploy world with models</span></span>\n<span data-line=\"\"><span>        let world = spawn_test_world(models);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>        // deploy systems contract</span></span>\n<span data-line=\"\"><span>        let contract_address = world</span></span>\n<span data-line=\"\"><span>            .deploy_contract(&#x27;salt&#x27;, actions::TEST_CLASS_HASH.try_into().unwrap());</span></span>\n<span data-line=\"\"><span>        let actions_system = IActionsDispatcher { contract_address };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>        actions_system</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    #[test]</span></span>\n<span data-line=\"\"><span>    #[available_gas(30000000)]</span></span>\n<span data-line=\"\"><span>    fn test_move() {</span></span>\n<span data-line=\"\"><span>        // caller</span></span>\n<span data-line=\"\"><span>        let caller = starknet::contract_address_const::&lt;0x0&gt;();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>        let actions_system = setup_world();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>         // System calls</span></span>\n<span data-line=\"\"><span>        actions_system.spawn();</span></span>\n<span data-line=\"\"><span>        actions_system.move(Direction::Right(()));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>        // check moves</span></span>\n<span data-line=\"\"><span>        let moves = get!(world, caller, (Moves));</span></span>\n<span data-line=\"\"><span>        assert(moves.remaining == 99, &#x27;moves is wrong&#x27;);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>        // get new_position</span></span>\n<span data-line=\"\"><span>        let new_position = get!(world, caller, Position);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>        // check new position x</span></span>\n<span data-line=\"\"><span>        assert(new_position.vec.x == 11, &#x27;position x is wrong&#x27;);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>        // check new position y</span></span>\n<span data-line=\"\"><span>        assert(new_position.vec.y == 10, &#x27;position y is wrong&#x27;);</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n","isPage":false,"text":"\nIntegration tests are e2e tests that test the entire system. You can write integration tests for your world by creating a tests directory in your project root. Then create a file for each integration test you want to write.\nThis is the example from the dojo-starter:\nmove.cairo\n#[cfg(test)]\nmod tests {\n    use dojo::world::{IWorldDispatcherTrait, IWorldDispatcher};\n    use dojo::test_utils::{spawn_test_world, deploy_contract};\n    use dojo_examples::models::{position, moves};\n    use dojo_examples::models::{Position, Moves, Direction};\n \n    use super::{actions, IActionsDispatcher, IActionsDispatcherTrait};\n \n    // helper setup function\n    // reusable function for tests\n    fn setup_world() -&gt; IActionsDispatcher {\n        // components\n        let mut models = array![position::TEST_CLASS_HASH, moves::TEST_CLASS_HASH];\n \n         // deploy world with models\n        let world = spawn_test_world(models);\n \n        // deploy systems contract\n        let contract_address = world\n            .deploy_contract(&#x27;salt&#x27;, actions::TEST_CLASS_HASH.try_into().unwrap());\n        let actions_system = IActionsDispatcher { contract_address };\n \n        actions_system\n    }\n \n \n    #[test]\n    #[available_gas(30000000)]\n    fn test_move() {\n        // caller\n        let caller = starknet::contract_address_const::&lt;0x0&gt;();\n \n        let actions_system = setup_world();\n \n         // System calls\n        actions_system.spawn();\n        actions_system.move(Direction::Right(()));\n \n        // check moves\n        let moves = get!(world, caller, (Moves));\n        assert(moves.remaining == 99, &#x27;moves is wrong&#x27;);\n \n        // get new_position\n        let new_position = get!(world, caller, Position);\n \n        // check new position x\n        assert(new_position.vec.x == 11, &#x27;position x is wrong&#x27;);\n \n        // check new position y\n        assert(new_position.vec.y == 10, &#x27;position y is wrong&#x27;);\n    }\n}\n","title":"Writing Integration Tests","titles":[null,"Testing"]},"57":{"href":"/cairo/testing#useful-dojo-test-functions","html":"\n<p><code>spawn_test_world(models)</code> - This function will create a test world with the models and systems you pass in. It will also deploy the world and register the models and systems.</p>","isPage":false,"text":"\nspawn_test_world(models) - This function will create a test world with the models and systems you pass in. It will also deploy the world and register the models and systems.","title":"Useful Dojo Test Functions","titles":[null,"Testing","Writing Integration Tests"]},"58":{"href":"/cairo/world#the-world-contract","html":"\n<p>The world contract functions as a central store for the world models and systems. Every contract that interacts with the world, must use the world contract address as the first parameter. This is how the world contract is able to manage the state of the world.</p>\n<p>Although we suggest strongly to structure your world around an ECS pattern you are not required to do so. You can simply use the dojo-models as a keypair store along with the supporting infrastructure.</p>\n<blockquote>\n<p>NOTE: Dojo core abstracts the world contract away, you do not write it and it is not meant to be altered when building a world. However, it&#x27;s important to understand how it works and how it interacts with the rest of the system.</p>\n</blockquote>\n","isPage":true,"text":"\nThe world contract functions as a central store for the world models and systems. Every contract that interacts with the world, must use the world contract address as the first parameter. This is how the world contract is able to manage the state of the world.\nAlthough we suggest strongly to structure your world around an ECS pattern you are not required to do so. You can simply use the dojo-models as a keypair store along with the supporting infrastructure.\n\nNOTE: Dojo core abstracts the world contract away, you do not write it and it is not meant to be altered when building a world. However, it&#x27;s important to understand how it works and how it interacts with the rest of the system.\n\n","title":"The World Contract","titles":[null]},"59":{"href":"/cairo/world#events","html":"\n<p>The world contract emits all model events via the <code>StoreSetRecord</code> event. This enables block explorers to reconstruct everything in the world by listening to one contract.</p>\n","isPage":false,"text":"\nThe world contract emits all model events via the StoreSetRecord event. This enables block explorers to reconstruct everything in the world by listening to one contract.\n","title":"Events","titles":[null,"The World Contract"]},"60":{"href":"/cairo/world#full-world-api","html":"\n<p>The world exposes an interface which can be interacted with by any client. It is worth noting here that as a developer you don&#x27;t deploy this world, it is deployed when you <a href=\"/toolchain/sozo/overview.md\">migrate</a> the world.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>// World interface</span></span>\n<span data-line=\"\"><span>#[starknet::interface]</span></span>\n<span data-line=\"\"><span>trait IWorld&lt;T&gt; {</span></span>\n<span data-line=\"\"><span>    fn metadata_uri(self: @T, resource: felt252) -&gt; Span&lt;felt252&gt;;</span></span>\n<span data-line=\"\"><span>    fn set_metadata_uri(ref self: T, resource: felt252, uri: Span&lt;felt252&gt;);</span></span>\n<span data-line=\"\"><span>    fn model(self: @T, name: felt252) -&gt; ClassHash;</span></span>\n<span data-line=\"\"><span>    fn register_model(ref self: T, class_hash: ClassHash);</span></span>\n<span data-line=\"\"><span>    fn deploy_contract(ref self: T, salt: felt252, class_hash: ClassHash) -&gt; ContractAddress;</span></span>\n<span data-line=\"\"><span>    fn upgrade_contract(ref self: T, address: ContractAddress, class_hash: ClassHash) -&gt; ClassHash;</span></span>\n<span data-line=\"\"><span>    fn uuid(ref self: T) -&gt; usize;</span></span>\n<span data-line=\"\"><span>    fn emit(self: @T, keys: Array&lt;felt252&gt;, values: Span&lt;felt252&gt;);</span></span>\n<span data-line=\"\"><span>    fn entity(</span></span>\n<span data-line=\"\"><span>        self: @T, model: felt252, keys: Span&lt;felt252&gt;, offset: u8, length: usize, layout: Span&lt;u8&gt;</span></span>\n<span data-line=\"\"><span>    ) -&gt; Span&lt;felt252&gt;;</span></span>\n<span data-line=\"\"><span>    fn set_entity(</span></span>\n<span data-line=\"\"><span>        ref self: T,</span></span>\n<span data-line=\"\"><span>        model: felt252,</span></span>\n<span data-line=\"\"><span>        keys: Span&lt;felt252&gt;,</span></span>\n<span data-line=\"\"><span>        offset: u8,</span></span>\n<span data-line=\"\"><span>        values: Span&lt;felt252&gt;,</span></span>\n<span data-line=\"\"><span>        layout: Span&lt;u8&gt;</span></span>\n<span data-line=\"\"><span>    );</span></span>\n<span data-line=\"\"><span>    fn entities(</span></span>\n<span data-line=\"\"><span>        self: @T,</span></span>\n<span data-line=\"\"><span>        model: felt252,</span></span>\n<span data-line=\"\"><span>        index: Option&lt;felt252&gt;,</span></span>\n<span data-line=\"\"><span>        values: Span&lt;felt252&gt;,</span></span>\n<span data-line=\"\"><span>        values_length: usize,</span></span>\n<span data-line=\"\"><span>        values_layout: Span&lt;u8&gt;</span></span>\n<span data-line=\"\"><span>    ) -&gt; (Span&lt;felt252&gt;, Span&lt;Span&lt;felt252&gt;&gt;);</span></span>\n<span data-line=\"\"><span>    fn entity_ids(self: @T, model: felt252) -&gt; Span&lt;felt252&gt;;</span></span>\n<span data-line=\"\"><span>    fn set_executor(ref self: T, contract_address: ContractAddress);</span></span>\n<span data-line=\"\"><span>    fn executor(self: @T) -&gt; ContractAddress;</span></span>\n<span data-line=\"\"><span>    fn base(self: @T) -&gt; ClassHash;</span></span>\n<span data-line=\"\"><span>    fn delete_entity(ref self: T, model: felt252, keys: Span&lt;felt252&gt;, layout: Span&lt;u8&gt;);</span></span>\n<span data-line=\"\"><span>    fn is_owner(self: @T, address: ContractAddress, resource: felt252) -&gt; bool;</span></span>\n<span data-line=\"\"><span>    fn grant_owner(ref self: T, address: ContractAddress, resource: felt252);</span></span>\n<span data-line=\"\"><span>    fn revoke_owner(ref self: T, address: ContractAddress, resource: felt252);</span></span>\n<span data-line=\"\"><span>    fn is_writer(self: @T, model: felt252, system: ContractAddress) -&gt; bool;</span></span>\n<span data-line=\"\"><span>    fn grant_writer(ref self: T, model: felt252, system: ContractAddress);</span></span>\n<span data-line=\"\"><span>    fn revoke_writer(ref self: T, model: felt252, system: ContractAddress);</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n","isPage":false,"text":"\nThe world exposes an interface which can be interacted with by any client. It is worth noting here that as a developer you don&#x27;t deploy this world, it is deployed when you migrate the world.\n// World interface\n#[starknet::interface]\ntrait IWorld&lt;T&gt; {\n    fn metadata_uri(self: @T, resource: felt252) -&gt; Span&lt;felt252&gt;;\n    fn set_metadata_uri(ref self: T, resource: felt252, uri: Span&lt;felt252&gt;);\n    fn model(self: @T, name: felt252) -&gt; ClassHash;\n    fn register_model(ref self: T, class_hash: ClassHash);\n    fn deploy_contract(ref self: T, salt: felt252, class_hash: ClassHash) -&gt; ContractAddress;\n    fn upgrade_contract(ref self: T, address: ContractAddress, class_hash: ClassHash) -&gt; ClassHash;\n    fn uuid(ref self: T) -&gt; usize;\n    fn emit(self: @T, keys: Array&lt;felt252&gt;, values: Span&lt;felt252&gt;);\n    fn entity(\n        self: @T, model: felt252, keys: Span&lt;felt252&gt;, offset: u8, length: usize, layout: Span&lt;u8&gt;\n    ) -&gt; Span&lt;felt252&gt;;\n    fn set_entity(\n        ref self: T,\n        model: felt252,\n        keys: Span&lt;felt252&gt;,\n        offset: u8,\n        values: Span&lt;felt252&gt;,\n        layout: Span&lt;u8&gt;\n    );\n    fn entities(\n        self: @T,\n        model: felt252,\n        index: Option&lt;felt252&gt;,\n        values: Span&lt;felt252&gt;,\n        values_length: usize,\n        values_layout: Span&lt;u8&gt;\n    ) -&gt; (Span&lt;felt252&gt;, Span&lt;Span&lt;felt252&gt;&gt;);\n    fn entity_ids(self: @T, model: felt252) -&gt; Span&lt;felt252&gt;;\n    fn set_executor(ref self: T, contract_address: ContractAddress);\n    fn executor(self: @T) -&gt; ContractAddress;\n    fn base(self: @T) -&gt; ClassHash;\n    fn delete_entity(ref self: T, model: felt252, keys: Span&lt;felt252&gt;, layout: Span&lt;u8&gt;);\n    fn is_owner(self: @T, address: ContractAddress, resource: felt252) -&gt; bool;\n    fn grant_owner(ref self: T, address: ContractAddress, resource: felt252);\n    fn revoke_owner(ref self: T, address: ContractAddress, resource: felt252);\n    fn is_writer(self: @T, model: felt252, system: ContractAddress) -&gt; bool;\n    fn grant_writer(ref self: T, model: felt252, system: ContractAddress);\n    fn revoke_writer(ref self: T, model: felt252, system: ContractAddress);\n}\n","title":"Full World API","titles":[null,"The World Contract"]},"61":{"href":"/cairo/world#uuid","html":"\n<p>It is often useful to generate unique IDs for entities. The <code>uuid()</code> fn can be used to generate a unique ID.</p>\n<p>Use it like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>let game_id = world.uuid();</span></span></code></pre></figure>","isPage":false,"text":"\nIt is often useful to generate unique IDs for entities. The uuid() fn can be used to generate a unique ID.\nUse it like this:\nlet game_id = world.uuid();","title":"uuid()","titles":[null,"The World Contract"]},"62":{"href":"/client/dojojs#dojojs","html":"</header>\n<blockquote>\n<p>Javascript is a great way to get started with Dojo. It&#x27;s easy to use, and you can get started in minutes.</p>\n</blockquote>\n","isPage":true,"text":"\n\nJavascript is a great way to get started with Dojo. It&#x27;s easy to use, and you can get started in minutes.\n\n","title":"Dojo.js","titles":[]},"63":{"href":"/client/dojojs#dojoenginecore","html":"\n<p>This is the lowest level library, and is used by all other downstream libraries. It contains the core functionality of Dojo and exposes the contract interfaces. Use it if you want to build your own library on top of Dojo.</p>\n<p><a href=\"https://github.com/dojoengine/packages/tree/main/packages/core\">Repository</a></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">bun add @dojoengine/core</span></span></code></pre></figure>\n","isPage":false,"text":"\nThis is the lowest level library, and is used by all other downstream libraries. It contains the core functionality of Dojo and exposes the contract interfaces. Use it if you want to build your own library on top of Dojo.\nRepository\nbun add @dojoengine/core\n","title":"@dojoengine/core","titles":["Dojo.js",null]},"64":{"href":"/client/dojojs#dojoenginecreate-burner","html":"\n<p>Create burner is a simple way to incorporate burner wallets into your Dojo app.</p>\n<p><a href=\"https://github.com/dojoengine/packages/tree/main/packages/create-burner\">Repository</a></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">bun add @dojoengine/create-burner</span></span></code></pre></figure>\n","isPage":false,"text":"\nCreate burner is a simple way to incorporate burner wallets into your Dojo app.\nRepository\nbun add @dojoengine/create-burner\n","title":"@dojoengine/create-burner","titles":["Dojo.js",null]},"65":{"href":"/client/dojojs#dojoengineutils","html":"\n<p>These are utils for helping with interfacing dojo.</p>\n<p><a href=\"https://github.com/dojoengine/packages/tree/main/packages/utils\">Repository</a></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">bun add @dojoengine/utils</span></span></code></pre></figure>\n","isPage":false,"text":"\nThese are utils for helping with interfacing dojo.\nRepository\nbun add @dojoengine/utils\n","title":"@dojoengine/utils","titles":["Dojo.js",null]},"66":{"href":"/client/dojojs#dojoenginereact","html":"\n<p>React hooks for dojo.</p>\n<p><a href=\"https://github.com/dojoengine/packages/tree/main/packages/react\">Repository</a></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">bun add @dojoengine/react</span></span></code></pre></figure>\n","isPage":false,"text":"\nReact hooks for dojo.\nRepository\nbun add @dojoengine/react\n","title":"@dojoengine/react","titles":["Dojo.js",null]},"67":{"href":"/client/dojojs#dojoenginetorii-client","html":"\n<p>The wasm client to access torii via grpc.</p>\n<p><a href=\"https://github.com/dojoengine/packages/tree/main/packages/torii-client\">Repository</a></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">bun add @dojoengine/torii-client</span></span></code></pre></figure>\n","isPage":false,"text":"\nThe wasm client to access torii via grpc.\nRepository\nbun add @dojoengine/torii-client\n","title":"@dojoengine/torii-client","titles":["Dojo.js",null]},"68":{"href":"/client/dojojs#dojoenginetorii-wasm","html":"\n<p>Torii client for wasm bindings.</p>\n<p><a href=\"https://github.com/dojoengine/packages/tree/main/packages/torii-wasm\">Repository</a></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"console\" data-theme=\"github-dark-dimmed\"><code data-language=\"console\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">bun add @dojoengine/torii-wasm</span></span></code></pre></figure>","isPage":false,"text":"\nTorii client for wasm bindings.\nRepository\nbun add @dojoengine/torii-wasm","title":"@dojoengine/torii-wasm","titles":["Dojo.js",null]},"69":{"href":"/client/overview#overview","html":"</header>\n<p>Dojo is BYO client, meaning that you can use any client you want to connect to the Dojo network.</p>\n<ul>\n<li><a href=\"/client/dojojs.md\">npm</a></li>\n<li><a href=\"/client/torii.md\">torii</a></li>\n</ul>\n<blockquote>\n<p>Dojo is always looking to expand these clients, if you would like to contribute reach out into the <a href=\"https://discord.gg/KG9w9BmDrV\">Discord</a></p>\n</blockquote>","isPage":true,"text":"\nDojo is BYO client, meaning that you can use any client you want to connect to the Dojo network.\n\nnpm\ntorii\n\n\nDojo is always looking to expand these clients, if you would like to contribute reach out into the Discord\n","title":"Overview","titles":[]},"70":{"href":"/client/torii#torii-client","html":"\n<p>Torii client is a rust client for interacting with Dojo worlds. It can be compiled to wasm to be used in JS clients, or can used directly in Rust clients or other lower level languages with bindings.</p>\n","isPage":true,"text":"\nTorii client is a rust client for interacting with Dojo worlds. It can be compiled to wasm to be used in JS clients, or can used directly in Rust clients or other lower level languages with bindings.\n","title":"Torii Client","titles":[null]},"71":{"href":"/client/torii#usage-in-rust-projects","html":"\n<strong>@kairy</strong>\n","isPage":false,"text":"\n@kairy\n","title":"Usage in Rust projects","titles":[null,"Torii Client"]},"72":{"href":"/community/get-started#get-started","html":"\n<p>Dojo is a thriving community of builders, artists, and deep thinkers, pushing the frontier of what is possible.</p>\n<ul>\n<li><a href=\"https://dojoengine.notion.site/Dojo-Engine-Community-Hub-d316194b998941c48ddf771a4dd5ff08#bcd6a32db1b2406cb6c325f3b700d45a\">Community Hub</a></li>\n<li><a href=\"https://discord.gg/KG9w9BmDrV\">Discord</a></li>\n<li><a href=\"https://twitter.com/dojostarknet\">Twitter</a></li>\n<li><a href=\"https://github.com/dojoengine/awesome-dojo\">Awesome Dojo</a></li>\n<li><a href=\"https://www.dojoengine.org/en/articles/\">Dojo Blog</a></li>\n</ul>\n","isPage":true,"text":"\nDojo is a thriving community of builders, artists, and deep thinkers, pushing the frontier of what is possible.\n\nCommunity Hub\nDiscord\nTwitter\nAwesome Dojo\nDojo Blog\n\n","title":"Get Started","titles":[null]},"73":{"href":"/community/get-started#ecosystem--studios-powered-by-dojo","html":"\n<p><img src=\"/Built%20with.svg\" alt=\"dojo\"/></p>\n","isPage":false,"text":"\n\n","title":"Ecosystem &amp; Studios powered by Dojo","titles":[null]},"74":{"href":"/community/get-started#realms-world","html":"\n<ul>\n<li><a href=\"https://discord.gg/realmsworld\">discord</a></li>\n<li><a href=\"https://realms.world/\">website</a></li>\n</ul>\n","isPage":false,"text":"\n\ndiscord\nwebsite\n\n","title":"Realms World","titles":[null,"Ecosystem &amp; Studios powered by Dojo",null]},"75":{"href":"/community/get-started#briq-world","html":"\n<ul>\n<li><a href=\"https://discord.gg/kpvbDCw5pr\">discord</a></li>\n<li><a href=\"https://briq.construction/\">website</a></li>\n</ul>\n","isPage":false,"text":"\n\ndiscord\nwebsite\n\n","title":"Briq World","titles":[null,"Ecosystem &amp; Studios powered by Dojo",null]},"76":{"href":"/community/get-started#cartridge","html":"\n<ul>\n<li><a href=\"https://discord.gg/cartridge\">discord</a></li>\n<li><a href=\"https://cartridge.gg/\">website</a></li>\n</ul>\n","isPage":false,"text":"\n\ndiscord\nwebsite\n\n","title":"Cartridge","titles":[null,"Ecosystem &amp; Studios powered by Dojo",null]},"77":{"href":"/community/get-started#zkorp","html":"\n<ul>\n<li><a href=\"https://twitter.com/zKorp_\">twitter</a></li>\n</ul>\n","isPage":false,"text":"\n\ntwitter\n\n","title":"zKorp","titles":[null,"Ecosystem &amp; Studios powered by Dojo",null]},"78":{"href":"/community/get-started#templates--libraries","html":"\n<p>Templates, libraries or utilities that use Dojo.</p>\n<ul>\n<li><a href=\"https://github.com/dojoengine/origami\">Origami</a> - Cairo primitives for onchain Gaming</li>\n<li><a href=\"https://github.com/CheDAOLabs/cc-dojo-map\">Crypts And Caverns Dojo Map</a> - An Example projects of integrating C&amp;C maps developed by the CHE-DAO team with Dojo.</li>\n</ul>\n","isPage":false,"text":"\nTemplates, libraries or utilities that use Dojo.\n\nOrigami - Cairo primitives for onchain Gaming\nCrypts And Caverns Dojo Map - An Example projects of integrating C&amp;C maps developed by the CHE-DAO team with Dojo.\n\n","title":"Templates &amp; Libraries","titles":[null]},"79":{"href":"/community/get-started#awesome-projects","html":"\n<ul>\n<li><a href=\"https://github.com/cartridge-gg/beer-baron\">Beer Baron</a> - An dojo onchain simulation masked as a beer brewing game. It is designed to work with 10 - 10,000 players.</li>\n<li><a href=\"https://github.com/rkdud007/chess-dojo\">Chess Dojo</a> - A chess game built on Dojo.</li>\n<li><a href=\"https://github.com/cartridge-gg/rollyourown\">Dope Wars: Roll Your Own</a> - An onchain adaptation of the classic Drug Wars game developed by the Cartridge team.</li>\n<li><a href=\"https://github.com/cartridge-gg/drive-ai\">Drive AI</a> - An onchain driving simulator controlled by a neural network developed by the Cartridge team.</li>\n<li><a href=\"https://github.com/dojoengine/emoji-man\">Emoji Man</a> - Pac-man inspired onchain game using dojo and phaser.</li>\n<li><a href=\"https://github.com/funDAOmental/lootunderworld\">Loot Underworld</a> - Excavating the dangerous, endless mysteries of the subterranean in the dark depths of the Realms Autonomous (Under)World.</li>\n<li><a href=\"https://github.com/pixelaw/game\">PixeLAW</a> - A pixel grid-based Autonomous World with coexisting games (i.e. Paint, Snake, Rock-Paper-Scissors).</li>\n<li><a href=\"https://github.com/BibliothecaDAO/eternum\">Realms Autonomous World</a> - The Realms Autonomous World</li>\n<li><a href=\"https://github.com/dojoengine/stark-lander\">Stark Lander</a> - Land on the Moon!</li>\n<li><a href=\"https://github.com/Starklandxyz\">StarkLand</a> - Full On-chain Multiplayer Online Simulation Game (FOMOSLG) built on Starknet.</li>\n<li><a href=\"https://github.com/funDAOmental/underdark\">Underdark: Lair of the Slenderduck</a> - An unhinged on-chain generative dungeon skin crawler. Beware the Slenderduck!</li>\n<li><a href=\"https://github.com/z-korp/zdefender-front\">zDefender</a> - An onchain tower defense.</li>\n<li><a href=\"https://github.com/z-korp/zknight\">zKnight</a> - An onchain strategy game</li>\n</ul>","isPage":false,"text":"\n\nBeer Baron - An dojo onchain simulation masked as a beer brewing game. It is designed to work with 10 - 10,000 players.\nChess Dojo - A chess game built on Dojo.\nDope Wars: Roll Your Own - An onchain adaptation of the classic Drug Wars game developed by the Cartridge team.\nDrive AI - An onchain driving simulator controlled by a neural network developed by the Cartridge team.\nEmoji Man - Pac-man inspired onchain game using dojo and phaser.\nLoot Underworld - Excavating the dangerous, endless mysteries of the subterranean in the dark depths of the Realms Autonomous (Under)World.\nPixeLAW - A pixel grid-based Autonomous World with coexisting games (i.e. Paint, Snake, Rock-Paper-Scissors).\nRealms Autonomous World - The Realms Autonomous World\nStark Lander - Land on the Moon!\nStarkLand - Full On-chain Multiplayer Online Simulation Game (FOMOSLG) built on Starknet.\nUnderdark: Lair of the Slenderduck - An unhinged on-chain generative dungeon skin crawler. Beware the Slenderduck!\nzDefender - An onchain tower defense.\nzKnight - An onchain strategy game\n","title":"Awesome Projects","titles":[null]},"80":{"href":"/deployment/locally#local-deployment-with-katana","html":"\n<p>Experience the power of rapid development with Dojo, featuring the ultra-fast local development sequencer, <a href=\"/toolchain/katana/overview.md\">Katana</a>. Katana acts as an on-device Starknet, enabling thorough testing of your dojo world in a controlled environment before migrating them to the remote testnet.</p>\n","isPage":true,"text":"\nExperience the power of rapid development with Dojo, featuring the ultra-fast local development sequencer, Katana. Katana acts as an on-device Starknet, enabling thorough testing of your dojo world in a controlled environment before migrating them to the remote testnet.\n","title":"Local Deployment with Katana","titles":[null]},"81":{"href":"/deployment/locally#easy-katana-deployments","html":"\n<p>Deploying to Katana is straightforward and efficient.</p>\n<blockquote>\n<p><strong>Pre-requisite:</strong> Ensure you&#x27;ve completed the <a href=\"/getting-started/quick-start.md\">Quick Start</a> guide and have your project set up.</p>\n</blockquote>\n<p>To initiate Katana from your project directory, execute:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">katana</span><span style=\"color:#6CB6FF\"> --disable-fee</span></span></code></pre></figure>\n<p>This command launches a local instance of Katana, setting the stage for your deployment.</p>\n","isPage":false,"text":"\nDeploying to Katana is straightforward and efficient.\n\nPre-requisite: Ensure you&#x27;ve completed the Quick Start guide and have your project set up.\n\nTo initiate Katana from your project directory, execute:\nkatana --disable-fee\nThis command launches a local instance of Katana, setting the stage for your deployment.\n","title":"Easy Katana Deployments","titles":[null,"Local Deployment with Katana"]},"82":{"href":"/deployment/locally#step-by-step-guide-to-deploy-on-katana","html":"\n<p>Deploying your project to Katana involves a few simple steps.\\</p>\n<ol>\n<li>\n<strong>Compile Your Contracts:</strong>\n<p>If you haven&#x27;t compiled your contracts yet, run:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>\n<p>Compiling ensures that your contracts are ready for deployment.</p>\n</li>\n<li>\n<strong>Migrate your Project:</strong>\n<p>To migrate, run:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"bash\" data-theme=\"github-dark-dimmed\"><code data-language=\"bash\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> migrate</span></span></code></pre></figure>\n</li>\n</ol>\n<p>Success! You have now migrated your world. You will be able to interact with the world using <a href=\"/toolchain/sozo/overview.md\">sozo</a>.</p>","isPage":false,"text":"\nDeploying your project to Katana involves a few simple steps.\\\n\n\nCompile Your Contracts:\nIf you haven&#x27;t compiled your contracts yet, run:\nsozo build\nCompiling ensures that your contracts are ready for deployment.\n\n\nMigrate your Project:\nTo migrate, run:\nsozo migrate\n\n\nSuccess! You have now migrated your world. You will be able to interact with the world using sozo.","title":"Step-by-Step Guide to Deploy on Katana","titles":[null,"Local Deployment with Katana"]},"83":{"href":"/deployment/remote#deployment-to-remote-network","html":"\n<blockquote>\n<p><em>IMPORTANT: Dojo is unaudited. Use at your own risk.</em></p>\n</blockquote>\n<p>Dojo makes it easy to deploy to remote networks, you just need to have a valid account and network endpoint.</p>\n<p>Scarb.toml</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">package</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">name = </span><span style=\"color:#96D0FF\">&quot;ohayoo&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">version = </span><span style=\"color:#96D0FF\">&quot;0.1.0&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">cairo-version = </span><span style=\"color:#96D0FF\">&quot;0.3.15&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">cairo</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">sierra-replace-ids = </span><span style=\"color:#6CB6FF\">true</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">dependencies</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">dojo = { git = </span><span style=\"color:#96D0FF\">&quot;https://github.com/dojoengine/dojo&quot;</span><span style=\"color:#ADBAC7\">, tag = </span><span style=\"color:#96D0FF\">&quot;v0.3.15&quot;</span><span style=\"color:#ADBAC7\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\"># KATANA on slot</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># rpc_url = &quot;https://api.cartridge.gg/x/example/katana&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># account_address = &quot;0x2d5260ba1d62ed0ea7c598f1460d27528b27afdf3bb43524a1ba3617e8279b2&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># private_key = &quot;0x6768b97b44cfbfa9f776a3c00ebe33c228058bf8716bb0515a1363049da2a11&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># world = &quot;0x1fad58d91d5d121aa6dc4d16c01a161e0441ef75fe7d31e3664a61e66022b1f&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\"># ENDPOINT</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">rpc_url = </span><span style=\"color:#96D0FF\">&quot;https://api.cartridge.gg/x/shinai/madara&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">account_address = </span><span style=\"color:#96D0FF\">&quot;0x2&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">private_key = </span><span style=\"color:#96D0FF\">&quot;0xc1cf1490de1352865301bb8705143f3ef938f97fdf892f1090dcb5ac7bcd1d&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">world_address = </span><span style=\"color:#96D0FF\">&quot;0x5b328933afdbbfd44901fd69a2764a254edbb6e992ae87cf958c70493f2d201&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\"># GOERLI</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># rpc_url = &quot;https://starknet-goerli.g.alchemy.com/v2/&lt;API KEY&gt;&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># account_address = &quot;0x2d5260ba1d62ed0ea7c598f1460d27528b27afdf3bb43524a1ba3617e8279b2&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># private_key = &quot;0x6768b97b44cfbfa9f776a3c00ebe33c228058bf8716bb0515a1363049da2a11&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># world = &quot;0x1fad58d91d5d121aa6dc4d16c01a161e0441ef75fe7d31e3664a61e66022b1f&quot;</span></span></code></pre></figure>\n","isPage":true,"text":"\n\nIMPORTANT: Dojo is unaudited. Use at your own risk.\n\nDojo makes it easy to deploy to remote networks, you just need to have a valid account and network endpoint.\nScarb.toml\n[package]\nname = &quot;ohayoo&quot;\nversion = &quot;0.1.0&quot;\ncairo-version = &quot;0.3.15&quot;\n \n[cairo]\nsierra-replace-ids = true\n \n[dependencies]\ndojo = { git = &quot;https://github.com/dojoengine/dojo&quot;, tag = &quot;v0.3.15&quot; }\n \n# KATANA on slot\n# rpc_url = &quot;https://api.cartridge.gg/x/example/katana&quot;\n# account_address = &quot;0x2d5260ba1d62ed0ea7c598f1460d27528b27afdf3bb43524a1ba3617e8279b2&quot;\n# private_key = &quot;0x6768b97b44cfbfa9f776a3c00ebe33c228058bf8716bb0515a1363049da2a11&quot;\n# world = &quot;0x1fad58d91d5d121aa6dc4d16c01a161e0441ef75fe7d31e3664a61e66022b1f&quot;\n \n# ENDPOINT\nrpc_url = &quot;https://api.cartridge.gg/x/shinai/madara&quot;\naccount_address = &quot;0x2&quot;\nprivate_key = &quot;0xc1cf1490de1352865301bb8705143f3ef938f97fdf892f1090dcb5ac7bcd1d&quot;\nworld_address = &quot;0x5b328933afdbbfd44901fd69a2764a254edbb6e992ae87cf958c70493f2d201&quot;\n \n# GOERLI\n# rpc_url = &quot;https://starknet-goerli.g.alchemy.com/v2/&lt;API KEY&gt;&quot;\n# account_address = &quot;0x2d5260ba1d62ed0ea7c598f1460d27528b27afdf3bb43524a1ba3617e8279b2&quot;\n# private_key = &quot;0x6768b97b44cfbfa9f776a3c00ebe33c228058bf8716bb0515a1363049da2a11&quot;\n# world = &quot;0x1fad58d91d5d121aa6dc4d16c01a161e0441ef75fe7d31e3664a61e66022b1f&quot;\n","title":"Deployment to Remote Network","titles":[null]},"84":{"href":"/deployment/remote#deploy-to-public-starknet","html":"\n<p>If you credentials are correct in the Scarb.toml then a simple migrate will deploy the world to Starknet.</p>\n","isPage":false,"text":"\nIf you credentials are correct in the Scarb.toml then a simple migrate will deploy the world to Starknet.\n","title":"Deploy to public Starknet","titles":[null,"Deployment to Remote Network"]},"85":{"href":"/deployment/remote#deploy-to-remote-katana","html":"\n<p>Katanas are able to be hosted and run as remote testnets, however this is not recommended for production use.</p>\n<p>Deploy to remote katana with slot <a href=\"/tutorial/deploy-using-slot/main.md\">here</a></p>\n","isPage":false,"text":"\nKatanas are able to be hosted and run as remote testnets, however this is not recommended for production use.\nDeploy to remote katana with slot here\n","title":"Deploy to Remote","titles":[null,"Deployment to Remote Network"]},"86":{"href":"/deployment/remote#deploy-to-remote-madara","html":"\n<p><a href=\"https://github.com/keep-starknet-strange/madara\">Madara</a> is a blazingly fast Starknet sequencer.</p>","isPage":false,"text":"\nMadara is a blazingly fast Starknet sequencer.","title":"Deploy to Remote Madara","titles":[null,"Deployment to Remote Network"]},"87":{"href":"/getting-started/contributing#contributing-to-the-core","html":"</header>\n<p>Dojo is an open-source project, currently in its early development phase, and warmly welcomes contributors.</p>\n","isPage":true,"text":"\nDojo is an open-source project, currently in its early development phase, and warmly welcomes contributors.\n","title":"Contributing to the Core","titles":[]},"88":{"href":"/getting-started/contributing#how-to-contribute","html":"\n<p>Head to the <a href=\"https://github.com/dojoengine/dojo/issues\">Github</a> for open issues, if you see an issue that is unassigned, please request in the comments to be assigned to it. If you have an idea for a new feature, please create an issue with the <code>enhancement</code> tag.</p>","isPage":false,"text":"\nHead to the Github for open issues, if you see an issue that is unassigned, please request in the comments to be assigned to it. If you have an idea for a new feature, please create an issue with the enhancement tag.","title":"How to Contribute","titles":["Contributing to the Core"]},"89":{"href":"/getting-started/from-source#building-from-source","html":"\n<blockquote>\n<p>If you are just wanting to play with the toolchain, we strongly suggest following the <a href=\"/getting-started/quick-start.md\">Quick Start</a> guide.</p>\n</blockquote>\n","isPage":true,"text":"\n\nIf you are just wanting to play with the toolchain, we strongly suggest following the Quick Start guide.\n\n","title":"Building from source","titles":[null]},"90":{"href":"/getting-started/from-source#prerequisites","html":"\n<p>You will need the <a href=\"https://rust-lang.org\">Rust</a> compiler and Cargo, the Rust package manager.\nThe easiest way to install both is with <a href=\"https://rustup.rs/\"><code>rustup.rs</code></a>.</p>\n<p>On Windows, you will also need a recent version of <a href=\"https://visualstudio.microsoft.com/downloads/\">Visual Studio</a>,\ninstalled with the &quot;Desktop Development With C++&quot; Workloads option.</p>\n","isPage":false,"text":"\nYou will need the Rust compiler and Cargo, the Rust package manager.\nThe easiest way to install both is with rustup.rs.\nOn Windows, you will also need a recent version of Visual Studio,\ninstalled with the &quot;Desktop Development With C++&quot; Workloads option.\n","title":"Prerequisites","titles":[null,"Building from source",null]},"91":{"href":"/getting-started/from-source#building","html":"\n<p>You can either use the different <a href=\"/toolchain/dojoup.md\">Dojoup</a> flags:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --branch</span><span style=\"color:#96D0FF\"> master</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --path</span><span style=\"color:#96D0FF\"> path/to/dojo</span></span></code></pre></figure>\n<p>Or, by using a single Cargo command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">cargo</span><span style=\"color:#96D0FF\"> install --git https://github.com/dojoengine/dojo --force sozo katana torii</span></span></code></pre></figure>\n<p>Or, by manually building from a local copy of the <a href=\"https://github.com/dojoengine/dojo\">Dojo repository</a>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># clone the repository</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">git</span><span style=\"color:#96D0FF\"> clone https://github.com/dojoengine/dojo.git</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">cd</span><span style=\"color:#96D0FF\"> dojo</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># install Sozo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">cargo</span><span style=\"color:#96D0FF\"> install --path ./crates/sozo --force</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># install Katana</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">cargo</span><span style=\"color:#96D0FF\"> install --path ./crates/katana --force</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># install Torii</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">cargo</span><span style=\"color:#96D0FF\"> run -—bin torii</span></span></code></pre></figure>","isPage":false,"text":"\nYou can either use the different Dojoup flags:\ndojoup --branch master\ndojoup --path path/to/dojo\nOr, by using a single Cargo command:\ncargo install --git https://github.com/dojoengine/dojo --force sozo katana torii\nOr, by manually building from a local copy of the Dojo repository:\n# clone the repository\ngit clone https://github.com/dojoengine/dojo.git\ncd dojo\n# install Sozo\ncargo install --path ./crates/sozo --force\n# install Katana\ncargo install --path ./crates/katana --force\n# install Torii\ncargo run -—bin torii","title":"Building","titles":[null,"Building from source",null]},"92":{"href":"/getting-started/quick-start#quick-start","html":"\n<blockquote>\n<p>It is worth reading <a href=\"/theory/autonomous-worlds.md\">theory</a> to familiarize yourself with the concept of Autonomous Worlds (AWs) and the <a href=\"/theory/cairo.md\">Cairo ecosystem</a> before diving into the code.</p>\n</blockquote>\n","isPage":true,"text":"\n\nIt is worth reading theory to familiarize yourself with the concept of Autonomous Worlds (AWs) and the Cairo ecosystem before diving into the code.\n\n","title":"Quick Start","titles":[null]},"93":{"href":"/getting-started/quick-start#install-dojoup","html":"\n<p>Dojo is built around a set of development tools - Katana, Torii and Sozo. Install them all easily with Dojoup. You can find detailed information about Dojoup <a href=\"https://github.com/dojoengine/dojo/blob/master/dojoup/README.md\">here</a>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">curl</span><span style=\"color:#6CB6FF\"> -L</span><span style=\"color:#96D0FF\"> https://install.dojoengine.org </span><span style=\"color:#F47067\">|</span><span style=\"color:#F69D50\"> bash</span></span></code></pre></figure>\n<p>This will install Dojoup, then simply follow the instructions on-screen,\nwhich will make the <code>dojoup</code> command available in your CLI.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span></span></code></pre></figure>\n<p>For full <code>dojoup</code> reference and debugging see <a href=\"/toolchain/dojoup.md\">Dojoup</a>.</p>\n","isPage":false,"text":"\nDojo is built around a set of development tools - Katana, Torii and Sozo. Install them all easily with Dojoup. You can find detailed information about Dojoup here.\ncurl -L https://install.dojoengine.org | bash\nThis will install Dojoup, then simply follow the instructions on-screen,\nwhich will make the dojoup command available in your CLI.\ndojoup\nFor full dojoup reference and debugging see Dojoup.\n","title":"Install Dojoup","titles":[null,"Quick Start"]},"94":{"href":"/getting-started/quick-start#next-steps","html":"\n<blockquote>\n<p>Head to <a href=\"/cairo/hello-dojo.md\">Hello Dojo</a> to get create your first Dojo world.</p>\n</blockquote>","isPage":false,"text":"\n\nHead to Hello Dojo to get create your first Dojo world.\n","title":"Next steps","titles":[null,"Quick Start"]},"95":{"href":"/getting-started/setup#development-setup","html":"</header>\n<blockquote>\n<p>This is a guide to setting up a development environment for Dojo. It is not suggested to follow this guide if you are just wanting to play with the toolchain. We strongly suggest following the <a href=\"/getting-started/quick-start.md\">Quick Start</a> guide.</p>\n</blockquote>\n","isPage":true,"text":"\n\nThis is a guide to setting up a development environment for Dojo. It is not suggested to follow this guide if you are just wanting to play with the toolchain. We strongly suggest following the Quick Start guide.\n\n","title":"Development Setup","titles":[]},"96":{"href":"/getting-started/setup#prerequisites","html":"\n<ul>\n<li><a href=\"https://github.com/rust-lang/rust\">Rust</a></li>\n<li><a href=\"https://github.com/starkware-libs/cairo\">Cairo</a></li>\n<li><a href=\"https://github.com/protocolbuffers/protobuf\">protoc</a></li>\n</ul>\n","isPage":false,"text":"\n\nRust\nCairo\nprotoc\n\n","title":"Prerequisites","titles":["Development Setup",null]},"97":{"href":"/getting-started/setup#guide","html":"\n","isPage":false,"text":"\n","title":"Guide","titles":["Development Setup"]},"98":{"href":"/getting-started/setup#clone","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">git</span><span style=\"color:#96D0FF\"> clone https://github.com/dojoengine/dojo.git</span></span></code></pre></figure>\n","isPage":false,"text":"\ngit clone https://github.com/dojoengine/dojo.git\n","title":"Clone","titles":["Development Setup","Guide"]},"99":{"href":"/getting-started/setup#linux--mac","html":"\n","isPage":false,"text":"\n","title":"Linux &amp; Mac","titles":["Development Setup","Guide"]},"100":{"href":"/getting-started/setup#1-install-rust-and-dependencies","html":"\n<p>Start by installing Rust and running the test suite to confirm your setup:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">rustup</span><span style=\"color:#96D0FF\"> override set stable </span><span style=\"color:#ADBAC7\">&amp;&amp; </span><span style=\"color:#F69D50\">rustup</span><span style=\"color:#96D0FF\"> update </span><span style=\"color:#ADBAC7\">&amp;&amp; </span><span style=\"color:#F69D50\">cargo</span><span style=\"color:#96D0FF\"> test</span></span></code></pre></figure>\n<blockquote>\n<p>Note: Depending on your Linux distribution, you may need to install additional dependencies. Make sure to install any suggested or missing dependencies that arise during the setup process.</p>\n</blockquote>\n","isPage":false,"text":"\nStart by installing Rust and running the test suite to confirm your setup:\nrustup override set stable &amp;&amp; rustup update &amp;&amp; cargo test\n\nNote: Depending on your Linux distribution, you may need to install additional dependencies. Make sure to install any suggested or missing dependencies that arise during the setup process.\n\n","title":"1. Install Rust and Dependencies","titles":["Development Setup","Guide","Linux &amp; Mac"]},"101":{"href":"/getting-started/setup#2-install-scarb-package-manager","html":"\n<p>Next, install the <a href=\"https://docs.swmansion.com/scarb\">Scarb</a> package manager by running:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">curl</span><span style=\"color:#6CB6FF\"> --proto</span><span style=\"color:#96D0FF\"> &#x27;=https&#x27;</span><span style=\"color:#6CB6FF\"> --tlsv1.2</span><span style=\"color:#6CB6FF\"> -sSf</span><span style=\"color:#96D0FF\"> https://docs.swmansion.com/scarb/install.sh </span><span style=\"color:#F47067\">|</span><span style=\"color:#F69D50\"> sh</span></span></code></pre></figure>\n","isPage":false,"text":"\nNext, install the Scarb package manager by running:\ncurl --proto &#x27;=https&#x27; --tlsv1.2 -sSf https://docs.swmansion.com/scarb/install.sh | sh\n","title":"2. Install Scarb Package Manager","titles":["Development Setup","Guide","Linux &amp; Mac"]},"102":{"href":"/getting-started/setup#3-add-the-cairo-10-vscode-extension","html":"\n<p>Install the <a href=\"https://marketplace.visualstudio.com/items?itemName=starkware.cairo1\">Cairo 1.0</a> extension for Visual Studio Code.</p>\n","isPage":false,"text":"\nInstall the Cairo 1.0 extension for Visual Studio Code.\n","title":"3. Add the Cairo 1.0 VSCode Extension","titles":["Development Setup","Guide","Linux &amp; Mac"]},"103":{"href":"/getting-started/setup#windows","html":"\n<p><em>Coming soon</em></p>\n","isPage":false,"text":"\nComing soon\n","title":"Windows","titles":["Development Setup","Guide"]},"104":{"href":"/getting-started/setup#container","html":"\n<p><em>Coming soon</em></p>","isPage":false,"text":"\nComing soon","title":"Container","titles":["Development Setup","Guide"]},"105":{"href":"/misc/contributors#contributing-to-dojo-book","html":"\n<p>As the Dojo engine progresses and develops, it is essential for the Dojo book to keep pace with these advancements. Updating and refining the book ensures that it remains a relevant and valuable resource for those interested in understanding and utilizing the latest Dojo engine features and capabilities. All help is welcome!</p>\n","isPage":true,"text":"\nAs the Dojo engine progresses and develops, it is essential for the Dojo book to keep pace with these advancements. Updating and refining the book ensures that it remains a relevant and valuable resource for those interested in understanding and utilizing the latest Dojo engine features and capabilities. All help is welcome!\n","title":"Contributing to Dojo Book","titles":[null]},"106":{"href":"/misc/contributors#the-purpose-of-the-book","html":"\n<p>The Dojo book is designed to be a comprehensive resource that caters to users at various levels of experience. It aims to serve as both an introductory guide for those new to Dojo and its ancillary packages, as well as a reference for more experienced users seeking to deepen their understanding of the engine&#x27;s features and capabilities.</p>\n<p>The book is split into some major chapters:</p>\n<ul>\n<li>Framework Theory</li>\n<li>Getting Started</li>\n<li>Building a World</li>\n</ul>\n","isPage":false,"text":"\nThe Dojo book is designed to be a comprehensive resource that caters to users at various levels of experience. It aims to serve as both an introductory guide for those new to Dojo and its ancillary packages, as well as a reference for more experienced users seeking to deepen their understanding of the engine&#x27;s features and capabilities.\nThe book is split into some major chapters:\n\nFramework Theory\nGetting Started\nBuilding a World\n\n","title":"The purpose of the book","titles":[null,"Contributing to Dojo Book"]},"107":{"href":"/misc/contributors#code-of-conduct","html":"\n<p>The book follows the <a href=\"https://www.rust-lang.org/policies/code-of-conduct\">Rust Code of Conduct</a>.</p>\n","isPage":false,"text":"\nThe book follows the Rust Code of Conduct.\n","title":"Code of Conduct","titles":[null,"Contributing to Dojo Book"]},"108":{"href":"/misc/contributors#ways-to-contribute","html":"\n","isPage":false,"text":"\n","title":"Ways to contribute","titles":[null,"Contributing to Dojo Book"]},"109":{"href":"/misc/contributors#issues","html":"\n<p>If you think that some content is missing or out-of-date, feel free to open an issue. If you find multiple pieces of content lacking, please open up a separate issue for each.</p>\n<p>The issues will then be labeled so other contributors can find chunks of work they are interested in more easily.</p>\n<p>The issue should contain what is missing, or what could be improved, in as much detail as you deem necessary.</p>\n","isPage":false,"text":"\nIf you think that some content is missing or out-of-date, feel free to open an issue. If you find multiple pieces of content lacking, please open up a separate issue for each.\nThe issues will then be labeled so other contributors can find chunks of work they are interested in more easily.\nThe issue should contain what is missing, or what could be improved, in as much detail as you deem necessary.\n","title":"Issues","titles":[null,"Contributing to Dojo Book","Ways to contribute"]},"110":{"href":"/misc/contributors#pull-requests","html":"\n<p>Feel free to contribute changes to the book by opening a pull request - anything is welcome, from reformulating a sentence, fixing a typo, to adding new sections or chapters.</p>\n<p>When your pull request is open, other contributors will take a look and may request changes. Do not be discouraged!</p>\n","isPage":false,"text":"\nFeel free to contribute changes to the book by opening a pull request - anything is welcome, from reformulating a sentence, fixing a typo, to adding new sections or chapters.\nWhen your pull request is open, other contributors will take a look and may request changes. Do not be discouraged!\n","title":"Pull requests","titles":[null,"Contributing to Dojo Book","Ways to contribute"]},"111":{"href":"/misc/contributors#writing-style","html":"\n<p>This section documents a few standards for writing used throughout the book.</p>\n","isPage":false,"text":"\nThis section documents a few standards for writing used throughout the book.\n","title":"Writing style","titles":[null,"Contributing to Dojo Book"]},"112":{"href":"/misc/contributors#chapters-start-with-a-second-level-heading","html":"\n<p>We use:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"md\" data-theme=\"github-dark-dimmed\"><code data-language=\"md\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF;font-weight:bold\">## Some Page</span></span></code></pre></figure>\n<p>We do not use:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"md\" data-theme=\"github-dark-dimmed\"><code data-language=\"md\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF;font-weight:bold\"># Some Page</span></span></code></pre></figure>","isPage":false,"text":"\nWe use:\n## Some Page\nWe do not use:\n# Some Page","title":"Chapters start with a second level heading","titles":[null,"Contributing to Dojo Book","Writing style"]},"113":{"href":"/theory/autonomous-worlds#autonomous-worlds","html":"\n<blockquote>\n<p>&quot;Autonomous worlds represent persistent, permissionless, and decentralized open environments that users can freely interact with and contribute to.&quot;</p>\n</blockquote>\n<p>The precise definition of Autonomous Worlds (AWs) remains somewhat elusive, as it is more of an abstract concept that has yet to be fully crystallized. Lattice first <a href=\"https://0xparc.org/blog/autonomous-worlds\">introduced</a> the terminology in 2022, but the notion of open worlds operating on the blockchain has been around for a while. The abstraction introduced by MUD served as a catalyst for the market to recognize the potential of these worlds.</p>\n<p>Autonomous Worlds share notable similarities with blockchains in their fundamental nature. Once established, they persist, maintaining their state throughout the lifespan of the chain. Players can join or leave, and developers can expand these worlds by deploying features in a permissionless manner, much like how contracts are added to a chain. While there is no universally accepted definition for an Autonomous World, we believe that a game must possess at least the following two essential features to be considered as such:</p>\n<ol>\n<li>\n<p>Decentralized data availability layer: While the state execution may reside on a centralized layer, it is crucial that the state can be reconstructed if the execution layer ceases to exist. Rollups offer a solution, providing increased capacity execution layers while ensuring data is permanently settled on Ethereum. This guarantees the world&#x27;s perpetual persistence.</p>\n</li>\n<li>\n<p>Permissionless entry point for expanding the world: The World contract must be capable of accepting new systems and components without requiring permission. While this doesn&#x27;t imply that every component and system will be utilized, they must adhere to this pattern, ensuring open and unrestricted access for potential enhancements.</p>\n</li>\n</ol>\n<p>We&#x27;re firm believers in the potential for Autonomous Worlds to catalyze the exploration of novel forms in the medium provided by zk proofs and blockchain technology. This is not only about games, but also about new forms of artwork, coordination, fun, emerging from tinkering and radical innovation, eventually questioning the very notion of &quot;play&quot; in this brave new decentralized and trustless world.</p>\n","isPage":true,"text":"\n\n&quot;Autonomous worlds represent persistent, permissionless, and decentralized open environments that users can freely interact with and contribute to.&quot;\n\nThe precise definition of Autonomous Worlds (AWs) remains somewhat elusive, as it is more of an abstract concept that has yet to be fully crystallized. Lattice first introduced the terminology in 2022, but the notion of open worlds operating on the blockchain has been around for a while. The abstraction introduced by MUD served as a catalyst for the market to recognize the potential of these worlds.\nAutonomous Worlds share notable similarities with blockchains in their fundamental nature. Once established, they persist, maintaining their state throughout the lifespan of the chain. Players can join or leave, and developers can expand these worlds by deploying features in a permissionless manner, much like how contracts are added to a chain. While there is no universally accepted definition for an Autonomous World, we believe that a game must possess at least the following two essential features to be considered as such:\n\n\nDecentralized data availability layer: While the state execution may reside on a centralized layer, it is crucial that the state can be reconstructed if the execution layer ceases to exist. Rollups offer a solution, providing increased capacity execution layers while ensuring data is permanently settled on Ethereum. This guarantees the world&#x27;s perpetual persistence.\n\n\nPermissionless entry point for expanding the world: The World contract must be capable of accepting new systems and components without requiring permission. While this doesn&#x27;t imply that every component and system will be utilized, they must adhere to this pattern, ensuring open and unrestricted access for potential enhancements.\n\n\nWe&#x27;re firm believers in the potential for Autonomous Worlds to catalyze the exploration of novel forms in the medium provided by zk proofs and blockchain technology. This is not only about games, but also about new forms of artwork, coordination, fun, emerging from tinkering and radical innovation, eventually questioning the very notion of &quot;play&quot; in this brave new decentralized and trustless world.\n","title":"Autonomous Worlds","titles":[null]},"114":{"href":"/theory/autonomous-worlds#homework","html":"\n<ul>\n<li><a href=\"https://www.wired.com/story/autonomous-worlds-aim-to-free-online-games-from-corporate-control/\">Wired - Autonomous Worlds Primer</a></li>\n<li><a href=\"https://0xparc.org/blog/autonomous-worlds\">0xParc - Autonomous Worlds (Part 1)</a></li>\n<li><a href=\"https://gubsheep.substack.com/p/the-strongest-crypto-gaming-thesis\">Gubsheep - The Strongest Crypto Gaming Thesis</a></li>\n<li><a href=\"https://lattice.xyz/blog/mud-an-engine-for-autonomous-worlds\">Lattice - MUD: An engine for Autonomous Worlds</a></li>\n<li><a href=\"https://www.guiltygyoza.xyz/2022/07/game2\">Guiltygyoza - Game 2.0</a></li>\n<li><a href=\"https://www.guiltygyoza.xyz/2023/05/composable-engineering\">Guiltygyoza - Composable Engineering</a></li>\n<li><a href=\"https://www.thejaymo.net/2022/05/06/wind-up-worlds/\">Jay Springett - Wind-up Worlds</a></li>\n<li><a href=\"https://www.are.na/sylve-chevet/on-chain-realities-and-autonomous-worlds\">Are.na collection on Autonomous Worlds</a></li>\n</ul>","isPage":false,"text":"\n\nWired - Autonomous Worlds Primer\n0xParc - Autonomous Worlds (Part 1)\nGubsheep - The Strongest Crypto Gaming Thesis\nLattice - MUD: An engine for Autonomous Worlds\nGuiltygyoza - Game 2.0\nGuiltygyoza - Composable Engineering\nJay Springett - Wind-up Worlds\nAre.na collection on Autonomous Worlds\n","title":"Homework","titles":[null,"Autonomous Worlds"]},"115":{"href":"/theory/cairo#provable-games","html":"</header>\n<p>Provable games demand <a href=\"https://ethereum.org/en/zero-knowledge-proofs/\">zero-knowledge</a> properties for efficient scaling and verification of computations. <a href=\"https://book.starknet.io/ch01-00-getting-started.html\">Cairo</a> addresses this need by providing a generalized language, eliminating the complexity of creating circuits to incorporate <a href=\"https://consensys.net/blog/developers/introduction-to-zk-snarks/\">SNARKs</a>.</p>\n<p><strong>You can simply program in Cairo and your applications become automatically provable</strong>.</p>\n<p>Moreover, you can deploy your programs on the <a href=\"https://medium.com/starkware/cairo-welcome-on-board-1cf3487554f\">Cairo Virtual Machine</a> (CVM), which is compatible with Starknet&#x27;s Layer 2, Starknet appchains, and even in-browser through WebAssembly (WASM)! Dojo aims to supply straightforward ZK primitives to fuel your game development.</p>\n<p>For more information about Starknet, Cairo and its tech stack, check out the <a href=\"https://book.starknet.io/\">Starknet &amp; Cairo book</a>.</p>\n","isPage":true,"text":"\nProvable games demand zero-knowledge properties for efficient scaling and verification of computations. Cairo addresses this need by providing a generalized language, eliminating the complexity of creating circuits to incorporate SNARKs.\nYou can simply program in Cairo and your applications become automatically provable.\nMoreover, you can deploy your programs on the Cairo Virtual Machine (CVM), which is compatible with Starknet&#x27;s Layer 2, Starknet appchains, and even in-browser through WebAssembly (WASM)! Dojo aims to supply straightforward ZK primitives to fuel your game development.\nFor more information about Starknet, Cairo and its tech stack, check out the Starknet &amp; Cairo book.\n","title":"Provable games","titles":[]},"116":{"href":"/theory/cairo#cairo","html":"\n<p>Cairo is an open-source, Turing-complete smart contract language developed by Starkware, designed to power the Validity Rollup Starknet. The language enables highly expressive and verifiable computation, making it well-suited for building scalable and secure applications, including decentralized finance (DeFi) projects.</p>\n<p>Dojo builds on Cairo to create a robust framework for developing Autonomous Worlds (AWs). By leveraging the capabilities of Cairo, Dojo aims to streamline the development process, improve maintainability, and enhance the performance of AWs.</p>\n<p>A key feature of the Dojo framework is its use of <a href=\"/cairo/commands.md\">commands</a>. Commands are a design pattern that helps to reduce boilerplate code, resulting in cleaner and more maintainable applications. They achieve this by encapsulating specific actions or operations within self-contained, reusable units.</p>\n<p>Developers can write commands freely within Systems, and the Cairo compiler takes care of inlining the appropriate functions.</p>\n","isPage":false,"text":"\nCairo is an open-source, Turing-complete smart contract language developed by Starkware, designed to power the Validity Rollup Starknet. The language enables highly expressive and verifiable computation, making it well-suited for building scalable and secure applications, including decentralized finance (DeFi) projects.\nDojo builds on Cairo to create a robust framework for developing Autonomous Worlds (AWs). By leveraging the capabilities of Cairo, Dojo aims to streamline the development process, improve maintainability, and enhance the performance of AWs.\nA key feature of the Dojo framework is its use of commands. Commands are a design pattern that helps to reduce boilerplate code, resulting in cleaner and more maintainable applications. They achieve this by encapsulating specific actions or operations within self-contained, reusable units.\nDevelopers can write commands freely within Systems, and the Cairo compiler takes care of inlining the appropriate functions.\n","title":"Cairo","titles":["Provable games"]},"117":{"href":"/theory/cairo#essential-reading","html":"\n<ul>\n<li><a href=\"https://github.com/cairo-book/cairo-book\">Cairo book</a></li>\n<li><a href=\"https://github.com/auditless/awesome-cairo\">Awesome Cairo</a></li>\n<li><a href=\"https://book.starknet.io/\">Starknet Book</a></li>\n</ul>\n","isPage":false,"text":"\n\nCairo book\nAwesome Cairo\nStarknet Book\n\n","title":"Essential Reading","titles":["Provable games","Cairo",null]},"118":{"href":"/theory/cairo#starknet-as-an-l2","html":"\n<p>Starknet is a Validity Rollup Layer 2 (L2) solution designed to scale Ethereum. It operates by offering high transaction throughput and low gas costs while maintaining the same level of security as Ethereum Layer 1 (L1). The strategy it uses is akin to solving a sudoku puzzle: verifying a solution is easier than finding the solution from scratch. Similarly, Starknet replaces heavy and costly L1 computation with cheaper L1 verification through the use of STARK proofs computed off-chain.</p>\n<p>In more technical terms, Starknet is a permissionless Validity-Rollup (also known as a &quot;ZK-Rollup&quot;) that supports general computation and currently runs as an L2 network over Ethereum. The network&#x27;s L1 security is guaranteed by its utilization of the STARK cryptographic proof system, which is considered one of the safest and most scalable.</p>\n","isPage":false,"text":"\nStarknet is a Validity Rollup Layer 2 (L2) solution designed to scale Ethereum. It operates by offering high transaction throughput and low gas costs while maintaining the same level of security as Ethereum Layer 1 (L1). The strategy it uses is akin to solving a sudoku puzzle: verifying a solution is easier than finding the solution from scratch. Similarly, Starknet replaces heavy and costly L1 computation with cheaper L1 verification through the use of STARK proofs computed off-chain.\nIn more technical terms, Starknet is a permissionless Validity-Rollup (also known as a &quot;ZK-Rollup&quot;) that supports general computation and currently runs as an L2 network over Ethereum. The network&#x27;s L1 security is guaranteed by its utilization of the STARK cryptographic proof system, which is considered one of the safest and most scalable.\n","title":"Starknet as an L2","titles":["Provable games","Cairo"]},"119":{"href":"/theory/cairo#starknet-as-an-appchain","html":"\n<p>Cairo is an isomorphic, general-purpose language, optimized for Zero-Knowledge (ZK) proofs. It&#x27;s the driving force behind Starknet, Starkex, and appchains. Remarkably, you can also run it in WebAssembly (WASM) to generate proofs on the client-side! Within the dojo toolchain exists <a href=\"/toolchain/katana/overview.md\">Katana</a> which is a gaming specific sequencer, which is perfectly suited to run a Dojo appchain.</p>\n<p>The Dojo team is also working closely with the <a href=\"https://github.com/keep-starknet-strange/madara\">Madara</a> team to enable Starknet appchains to seamlessly run Dojo worlds.</p>","isPage":false,"text":"\nCairo is an isomorphic, general-purpose language, optimized for Zero-Knowledge (ZK) proofs. It&#x27;s the driving force behind Starknet, Starkex, and appchains. Remarkably, you can also run it in WebAssembly (WASM) to generate proofs on the client-side! Within the dojo toolchain exists Katana which is a gaming specific sequencer, which is perfectly suited to run a Dojo appchain.\nThe Dojo team is also working closely with the Madara team to enable Starknet appchains to seamlessly run Dojo worlds.","title":"Starknet as an Appchain","titles":["Provable games","Cairo"]},"120":{"href":"/theory/faqs#faqs","html":"</header>\n","isPage":true,"text":"\n","title":"FAQs","titles":[]},"121":{"href":"/theory/faqs#who-owns-dojo","html":"\n<p>Dojo is strictly open-source and uses the Apache 2.0 license. Anyone can use Dojo for free, and anyone can contribute to the project.</p>\n","isPage":false,"text":"\nDojo is strictly open-source and uses the Apache 2.0 license. Anyone can use Dojo for free, and anyone can contribute to the project.\n","title":"Who owns Dojo?","titles":["FAQs",null,null]},"122":{"href":"/theory/faqs#why-dojo","html":"\n<p>Dojo was created to solve problems the founders faced when building onchain games. It standardizes the process of building such games and provides a suite of tools to make it easier.</p>\n","isPage":false,"text":"\nDojo was created to solve problems the founders faced when building onchain games. It standardizes the process of building such games and provides a suite of tools to make it easier.\n","title":"Why Dojo?","titles":["FAQs",null,null]},"123":{"href":"/theory/faqs#what-is-the-dojo-roadmap","html":"\n<p>Dojo is rapidly evolving. You can find open issues on the <a href=\"https://github.com/dojoengine/dojo/issues\">Dojo Github</a> and join the <a href=\"https://discord.gg/vUN4Xq9Qv6\">Discord</a> to get involved. If you have ideas for the project, please open an issue.</p>\n","isPage":false,"text":"\nDojo is rapidly evolving. You can find open issues on the Dojo Github and join the Discord to get involved. If you have ideas for the project, please open an issue.\n","title":"What is the Dojo roadmap?","titles":["FAQs",null,null]},"124":{"href":"/theory/faqs#what-is-an-onchain-game","html":"\n<p>Onchain games are games that exist entirely on a public blockchain network; all states and logic are onchain. Clients (like web browsers) do not exist on the chain but exist purely to interact with and interpret the onchain state.</p>\n","isPage":false,"text":"\nOnchain games are games that exist entirely on a public blockchain network; all states and logic are onchain. Clients (like web browsers) do not exist on the chain but exist purely to interact with and interpret the onchain state.\n","title":"What is an onchain game?","titles":["FAQs",null,null]},"125":{"href":"/theory/faqs#what-is-an-autonomous-world","html":"\n<p>An autonomous world is one that exists entirely onchain. It&#x27;s not controlled by any single entity but is instead governed by the rules set within that world. Dive deeper into the topic here: <a href=\"/theory/autonomous-worlds.md\">Autonomous Worlds</a>.</p>\n","isPage":false,"text":"\nAn autonomous world is one that exists entirely onchain. It&#x27;s not controlled by any single entity but is instead governed by the rules set within that world. Dive deeper into the topic here: Autonomous Worlds.\n","title":"What is an autonomous world?","titles":["FAQs",null,null]},"126":{"href":"/theory/faqs#what-is-cairo","html":"\n<p>Cairo is an opensource programming language invented by Starkware. It&#x27;s a Turing-complete language meant for general-purpose computation. It&#x27;s a low-level language designed to compile to the Cairo Virtual Machine. Learn more about it here: <a href=\"/theory/cairo.md\">Cairo</a>.</p>\n","isPage":false,"text":"\nCairo is an opensource programming language invented by Starkware. It&#x27;s a Turing-complete language meant for general-purpose computation. It&#x27;s a low-level language designed to compile to the Cairo Virtual Machine. Learn more about it here: Cairo.\n","title":"What is Cairo?","titles":["FAQs",null,null]},"127":{"href":"/theory/faqs#what-is-a-provable-game","html":"\n<p>Thanks to the magic of zero-knowledge proofs, we can ensure a game is fair by verifying a zk proof created off-chain. But what does that entail? Consider a game of chess. We aim for an experience where players trust each other&#x27;s moves. In a straightforward approach — and given the simple rules of chess — if this were in a blockchain environment, every move would be a transaction on the blockchain. This is costly. We just want to know the winner, not every move.</p>\n<p>With zk proofs and client communications, players can establish a state channel, sharing moves off-chain and ensuring their validity. At the end, a zk proof can be submitted to the blockchain to confirm the game&#x27;s fairness. This constitutes a provable game.</p>\n","isPage":false,"text":"\nThanks to the magic of zero-knowledge proofs, we can ensure a game is fair by verifying a zk proof created off-chain. But what does that entail? Consider a game of chess. We aim for an experience where players trust each other&#x27;s moves. In a straightforward approach — and given the simple rules of chess — if this were in a blockchain environment, every move would be a transaction on the blockchain. This is costly. We just want to know the winner, not every move.\nWith zk proofs and client communications, players can establish a state channel, sharing moves off-chain and ensuring their validity. At the end, a zk proof can be submitted to the blockchain to confirm the game&#x27;s fairness. This constitutes a provable game.\n","title":"What is a provable game?","titles":["FAQs",null,null]},"128":{"href":"/theory/faqs#can-dojo-implement-client-side-proofs","html":"\n<p>The ability to execute Dojo programs in the browser is entirely plausible and is on our roadmap. Expect q1/q2 in 2024, or if you are a specalist in this jump into the code and help out!</p>\n","isPage":false,"text":"\nThe ability to execute Dojo programs in the browser is entirely plausible and is on our roadmap. Expect q1/q2 in 2024, or if you are a specalist in this jump into the code and help out!\n","title":"Can dojo implement client side proofs?","titles":["FAQs",null,null]},"129":{"href":"/theory/faqs#can-i-deploy-dojo-on-starknet","html":"\n<p>Yes! Dojo can run on any StarknetVM including the public blockchains. Within the dojo toolchain exists <a href=\"/toolchain/katana/overview.md\">Katana</a> which is a gaming specific sequencer, which is perfectly suited to Dojo games.</p>","isPage":false,"text":"\nYes! Dojo can run on any StarknetVM including the public blockchains. Within the dojo toolchain exists Katana which is a gaming specific sequencer, which is perfectly suited to Dojo games.","title":"Can I deploy dojo on Starknet?","titles":["FAQs",null,null]},"130":{"href":"/theory/what-is-dojo#what-is-dojo","html":"</header>\n<p>Dojo is the culmination of lessons learned from attempts at building <a href=\"https://naavik.co/digest/primer-fully-on-chain-gaming\">onchain games</a>, an emerging sector in the gaming industry. Any developer who has endeavored to build an on-chain game recognizes the inherent engineering hurdles - a realization that drove us to create Dojo. Just as you wouldn&#x27;t recreate Unity every time you develop a new game, the same principle applies here. Dojo is designed to handle the complex infrastructure, allowing developers to focus on the unique aspects of their games.</p>\n<p>Dojo aspires to be the go-to tool for building provable games. It is radically open-source, and all contributions are welcome.</p>\n<hr/>\n","isPage":true,"text":"\nDojo is the culmination of lessons learned from attempts at building onchain games, an emerging sector in the gaming industry. Any developer who has endeavored to build an on-chain game recognizes the inherent engineering hurdles - a realization that drove us to create Dojo. Just as you wouldn&#x27;t recreate Unity every time you develop a new game, the same principle applies here. Dojo is designed to handle the complex infrastructure, allowing developers to focus on the unique aspects of their games.\nDojo aspires to be the go-to tool for building provable games. It is radically open-source, and all contributions are welcome.\n\n","title":"What is Dojo?","titles":[]},"131":{"href":"/theory/what-is-dojo#stop-building-infrastructure-start-building-games","html":"\n<p>Dojo&#x27;s suite of tools takes the infrastructure complexity out of building on-chain games. It includes:</p>\n","isPage":false,"text":"\nDojo&#x27;s suite of tools takes the infrastructure complexity out of building on-chain games. It includes:\n","title":"Stop building infrastructure; start building games","titles":["What is Dojo?"]},"132":{"href":"/theory/what-is-dojo#entity-component-system-ecs","html":"\n<p>Dojo offers a standardized approach to building games on smart contracts. Recognizing the intricacies of game design, Dojo simplifies the development process, allowing creators to focus on gameplay logic. This standardization paves the way for an interconnected network of worlds, streamlining developer expertise and promoting game integration.</p>\n<p>Utilizing the ECS (Entity Component System) as its core architecture, Dojo effectively manages the state and behavior of Autonomous Worlds (AWs). This model revolves around systems acting on entities, which are collections of pure data components. Systems efficiently determine which entities to process based on persistent queries over these components.</p>\n<p>Read detailed information about the <a href=\"/cairo/overview.md\">Dojo ECS</a>.</p>\n","isPage":false,"text":"\nDojo offers a standardized approach to building games on smart contracts. Recognizing the intricacies of game design, Dojo simplifies the development process, allowing creators to focus on gameplay logic. This standardization paves the way for an interconnected network of worlds, streamlining developer expertise and promoting game integration.\nUtilizing the ECS (Entity Component System) as its core architecture, Dojo effectively manages the state and behavior of Autonomous Worlds (AWs). This model revolves around systems acting on entities, which are collections of pure data components. Systems efficiently determine which entities to process based on persistent queries over these components.\nRead detailed information about the Dojo ECS.\n","title":"Entity Component System (ECS)","titles":["What is Dojo?","Stop building infrastructure; start building games"]},"133":{"href":"/theory/what-is-dojo#what-dojo-doesnt-give-you","html":"\n<ol>\n<li>Visual graphics - While Dojo provides networking and contracts, it doesn&#x27;t offer graphical engines. You can bring your graphics of choice! Integrate your Dojo world with Unreal, Godot, or Unity.</li>\n</ol>","isPage":false,"text":"\n\nVisual graphics - While Dojo provides networking and contracts, it doesn&#x27;t offer graphical engines. You can bring your graphics of choice! Integrate your Dojo world with Unreal, Godot, or Unity.\n","title":"What Dojo doesn&#x27;t give you","titles":["What is Dojo?","Stop building infrastructure; start building games"]},"134":{"href":"/toolchain/dojoup#dojoup","html":"</header>\n<p>Update or revert to a specific Dojo branch with ease.</p>\n","isPage":true,"text":"\nUpdate or revert to a specific Dojo branch with ease.\n","title":"dojoup","titles":[]},"135":{"href":"/toolchain/dojoup#installing","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">curl</span><span style=\"color:#6CB6FF\"> -L</span><span style=\"color:#96D0FF\"> https://install.dojoengine.org </span><span style=\"color:#F47067\">|</span><span style=\"color:#F69D50\"> bash</span></span></code></pre></figure>\n","isPage":false,"text":"\ncurl -L https://install.dojoengine.org | bash\n","title":"Installing","titles":["dojoup"]},"136":{"href":"/toolchain/dojoup#usage","html":"\n<p>To install latest <strong>stable</strong> version:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span></span></code></pre></figure>\n<blockquote>\n<p>Note: You may have to install <code>jq</code> to use <code>dojoup</code>. You can do so with the following commands:</p>\n</blockquote>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># Debian</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">sudo</span><span style=\"color:#96D0FF\"> apt-get install jq</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\"># Mac</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">brew</span><span style=\"color:#96D0FF\"> install jq</span></span></code></pre></figure>\n<p>To install a specific <strong>version</strong> (in this case the <code>nightly</code> version):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --version</span><span style=\"color:#96D0FF\"> nightly</span></span></code></pre></figure>\n<p>To install a specific <strong>branch</strong> (in this case the <code>release/0.1.0</code> branch&#x27;s latest commit):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --branch</span><span style=\"color:#96D0FF\"> release/0.1.0</span></span></code></pre></figure>\n<p>To install a <strong>fork&#x27;s main branch</strong> (in this case <code>tarrencev/dojo</code>&#x27;s main branch):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --repo</span><span style=\"color:#96D0FF\"> tarrencev/dojo</span></span></code></pre></figure>\n<p>To install a <strong>specific branch in a fork</strong> (in this case the <code>patch-10</code> branch&#x27;s latest commit in <code>tarrencev/dojo</code>):</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --repo</span><span style=\"color:#96D0FF\"> tarrencev/dojo --branch patch-10</span></span></code></pre></figure>\n<p>To install from a <strong>specific Pull Request</strong>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --pr</span><span style=\"color:#6CB6FF\"> 1071</span></span></code></pre></figure>\n<p>To install from a <strong>specific commit</strong>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> -c</span><span style=\"color:#6CB6FF\"> 94</span><span style=\"color:#96D0FF\">bfdb2</span></span></code></pre></figure>\n<p>To install a local directory or repository (e.g. one located at <code>~/git/dojo</code>, assuming you&#x27;re in the home directory)</p>\n","isPage":false,"text":"\nTo install latest stable version:\ndojoup\n\nNote: You may have to install jq to use dojoup. You can do so with the following commands:\n\n# Debian\nsudo apt-get install jq\n \n# Mac\nbrew install jq\nTo install a specific version (in this case the nightly version):\ndojoup --version nightly\nTo install a specific branch (in this case the release/0.1.0 branch&#x27;s latest commit):\ndojoup --branch release/0.1.0\nTo install a fork&#x27;s main branch (in this case tarrencev/dojo&#x27;s main branch):\ndojoup --repo tarrencev/dojo\nTo install a specific branch in a fork (in this case the patch-10 branch&#x27;s latest commit in tarrencev/dojo):\ndojoup --repo tarrencev/dojo --branch patch-10\nTo install from a specific Pull Request:\ndojoup --pr 1071\nTo install from a specific commit:\ndojoup -c 94bfdb2\nTo install a local directory or repository (e.g. one located at ~/git/dojo, assuming you&#x27;re in the home directory)\n","title":"Usage","titles":["dojoup"]},"137":{"href":"/toolchain/dojoup#note---branch---repo-and---version-flags-are-ignored-during-local-installations","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">dojoup</span><span style=\"color:#6CB6FF\"> --path</span><span style=\"color:#96D0FF\"> ./git/dojo</span></span></code></pre></figure>\n<hr/>\n<p><strong>Tip</strong>: All flags have a single character shorthand equivalent! You can use <code>-v</code> instead of <code>--version</code>, etc.</p>\n<hr/>\n","isPage":false,"text":"\ndojoup --path ./git/dojo\n\nTip: All flags have a single character shorthand equivalent! You can use -v instead of --version, etc.\n\n","title":"Note: --branch, --repo, and --version flags are ignored during local installations.","titles":["dojoup","Usage",null,null]},"138":{"href":"/toolchain/dojoup#precompiled-binaries","html":"\n<p>Precompiled binaries are available from the <a href=\"https://github.com/dojoengine/dojo/releases\">GitHub releases page</a>.\nThese are better managed by using <a href=\"#using-dojoup\">Dojoup</a>.</p>\n<blockquote>\n<p>ℹ️ <strong>Note</strong></p>\n<p>If you&#x27;re on Windows, you will need to install and use <a href=\"https://gitforwindows.org/\">Git BASH</a> or <a href=\"https://learn.microsoft.com/en-us/windows/wsl/install\">WSL</a>,\nas your terminal, since Dojoup currently does not support Powershell or Cmd.</p>\n</blockquote>","isPage":false,"text":"\nPrecompiled binaries are available from the GitHub releases page.\nThese are better managed by using Dojoup.\n\nℹ️ Note\nIf you&#x27;re on Windows, you will need to install and use Git BASH or WSL,\nas your terminal, since Dojoup currently does not support Powershell or Cmd.\n","title":"Precompiled binaries","titles":["dojoup","Usage"]},"139":{"href":"/cairo/migration/0#migration-guide-to-030","html":"\n<p>0.3.0 introduced some breaking changes to Systems and Models which requires reworking of your worlds.</p>\n<ul>\n<li><a href=\"#components-to-models\">Components</a></li>\n<li><a href=\"#systems-update\">Systems</a></li>\n<li><a href=\"#events\">Events</a></li>\n<li><a href=\"#npm\">Npm</a></li>\n</ul>\n","isPage":true,"text":"\n0.3.0 introduced some breaking changes to Systems and Models which requires reworking of your worlds.\n\nComponents\nSystems\nEvents\nNpm\n\n","title":"Migration Guide to 0.3.0","titles":[null]},"140":{"href":"/cairo/migration/0#components-to-models","html":"\n<p>In version 0.3.0, &quot;components&quot; have been renamed to &quot;models&quot;. This has been done due to Cairo introducing the concept of Components natively.</p>\n<p>You must:</p>\n<ul>\n<li>Replace <code>#[component]</code> with <code>#[model]</code>.</li>\n<li>Update <code>#[derive(Component)]</code> to <code>#[derive(Model)]</code> throughout your code.</li>\n</ul>\n<p><strong>Note</strong>: Ensure all related files and imports are updated accordingly.</p>\n","isPage":false,"text":"\nIn version 0.3.0, &quot;components&quot; have been renamed to &quot;models&quot;. This has been done due to Cairo introducing the concept of Components natively.\nYou must:\n\nReplace #[component] with #[model].\nUpdate #[derive(Component)] to #[derive(Model)] throughout your code.\n\nNote: Ensure all related files and imports are updated accordingly.\n","title":"Components to Models","titles":[null,"Migration Guide to 0.3.0"]},"141":{"href":"/cairo/migration/0#changes-in-model-implementation","html":"\n<p>The trait <code>SerdeLen</code> is no longer implemented for models. If you relied on this previously, you should now use <code>SchemaIntrospection</code>.</p>\n","isPage":false,"text":"\nThe trait SerdeLen is no longer implemented for models. If you relied on this previously, you should now use SchemaIntrospection.\n","title":"Changes in Model Implementation","titles":[null,"Migration Guide to 0.3.0"]},"142":{"href":"/cairo/migration/0#schema-introduction","html":"\n<p>For models containing complex types, it&#x27;s crucial to implement the <code>SchemaIntrospection</code> trait.</p>\n<p>Consider the model below:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>struct Card {</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    token_id: u256,</span></span>\n<span data-line=\"\"><span>    /// The card&#x27;s designated role.</span></span>\n<span data-line=\"\"><span>    role: Roles,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>For complex types, like <code>Roles</code> in the above example, you need to implement <code>SchemaIntrospection</code>. Here&#x27;s how:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>impl RolesSchemaIntrospectionImpl of SchemaIntrospection&lt;Roles&gt; {</span></span>\n<span data-line=\"\"><span>    #[inline(always)]</span></span>\n<span data-line=\"\"><span>    fn size() -&gt; usize {</span></span>\n<span data-line=\"\"><span>        1 // Represents the byte size of the enum.</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    #[inline(always)]</span></span>\n<span data-line=\"\"><span>    fn layout(ref layout: Array&lt;u8&gt;) {</span></span>\n<span data-line=\"\"><span>        layout.append(8); // Specifies the layout byte size;</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    #[inline(always)]</span></span>\n<span data-line=\"\"><span>    fn ty() -&gt; Ty {</span></span>\n<span data-line=\"\"><span>        Ty::Enum(</span></span>\n<span data-line=\"\"><span>            Enum {</span></span>\n<span data-line=\"\"><span>                name: &#x27;Roles&#x27;,</span></span>\n<span data-line=\"\"><span>                attrs: array![].span(),</span></span>\n<span data-line=\"\"><span>                children: array![</span></span>\n<span data-line=\"\"><span>                    (&#x27;Goalkeeper&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),</span></span>\n<span data-line=\"\"><span>                    (&#x27;Defender&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),</span></span>\n<span data-line=\"\"><span>                    (&#x27;Midfielder&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),</span></span>\n<span data-line=\"\"><span>                    (&#x27;Attacker&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),</span></span>\n<span data-line=\"\"><span>                ]</span></span>\n<span data-line=\"\"><span>                .span()</span></span>\n<span data-line=\"\"><span>            }</span></span>\n<span data-line=\"\"><span>        )</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p><strong>Key Takeaways from custom types</strong>:</p>\n<ul>\n<li><strong>size</strong>: Defines the byte size of the type.</li>\n<li><strong>layout</strong>: Outlines the byte structure/layout for the type. Validate and adjust as necessary.</li>\n<li><strong>ty</strong>: Details the specific type, attributes, and subcomponents. For enums, like <code>Roles</code>, you need to specify each member and its type.</li>\n</ul>\n","isPage":false,"text":"\nFor models containing complex types, it&#x27;s crucial to implement the SchemaIntrospection trait.\nConsider the model below:\nstruct Card {\n \n    #[key]\n    token_id: u256,\n    /// The card&#x27;s designated role.\n    role: Roles,\n}\nFor complex types, like Roles in the above example, you need to implement SchemaIntrospection. Here&#x27;s how:\nimpl RolesSchemaIntrospectionImpl of SchemaIntrospection&lt;Roles&gt; {\n    #[inline(always)]\n    fn size() -&gt; usize {\n        1 // Represents the byte size of the enum.\n    }\n \n    #[inline(always)]\n    fn layout(ref layout: Array&lt;u8&gt;) {\n        layout.append(8); // Specifies the layout byte size;\n    }\n \n    #[inline(always)]\n    fn ty() -&gt; Ty {\n        Ty::Enum(\n            Enum {\n                name: &#x27;Roles&#x27;,\n                attrs: array![].span(),\n                children: array![\n                    (&#x27;Goalkeeper&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                    (&#x27;Defender&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                    (&#x27;Midfielder&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                    (&#x27;Attacker&#x27;, serialize_member_type(@Ty::Tuple(array![].span()))),\n                ]\n                .span()\n            }\n        )\n    }\n}\nKey Takeaways from custom types:\n\nsize: Defines the byte size of the type.\nlayout: Outlines the byte structure/layout for the type. Validate and adjust as necessary.\nty: Details the specific type, attributes, and subcomponents. For enums, like Roles, you need to specify each member and its type.\n\n","title":"Schema Introduction","titles":[null,"Migration Guide to 0.3.0"]},"143":{"href":"/cairo/migration/0#systems-update","html":"\n<p>Systems in 0.3.0 are very similar now to Cairo Contracts. You can write your systems just like regular contracts, and each dojo contract can contain mulitple systems.</p>\n<p>Important high level changes:</p>\n<ul>\n<li>Systems are now starknet contracts</li>\n<li>Define <a href=\"#interface-creation\">Interfaces</a> for each system contract</li>\n<li>New optional <code>#[dojo::contract]</code> decorator defining systems</li>\n<li>Multiple systems per dojo contract, rather than singular</li>\n<li><code>execute</code> is no longer required system selector name</li>\n</ul>\n","isPage":false,"text":"\nSystems in 0.3.0 are very similar now to Cairo Contracts. You can write your systems just like regular contracts, and each dojo contract can contain mulitple systems.\nImportant high level changes:\n\nSystems are now starknet contracts\nDefine Interfaces for each system contract\nNew optional #[dojo::contract] decorator defining systems\nMultiple systems per dojo contract, rather than singular\nexecute is no longer required system selector name\n\n","title":"Systems Update","titles":[null,"Migration Guide to 0.3.0"]},"144":{"href":"/cairo/migration/0#interface-creation","html":"\n<p>System management has been revamped. Start by defining an interface for each system, which specifies its implementation:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[starknet::interface]</span></span>\n<span data-line=\"\"><span>trait ICreateCard&lt;TContractState&gt; {</span></span>\n<span data-line=\"\"><span>    fn create_card(</span></span>\n<span data-line=\"\"><span>        self: @TContractState,</span></span>\n<span data-line=\"\"><span>        world: IWorldDispatcher,</span></span>\n<span data-line=\"\"><span>        token_id: u256,</span></span>\n<span data-line=\"\"><span>        dribble: u8,</span></span>\n<span data-line=\"\"><span>        defense: u8,</span></span>\n<span data-line=\"\"><span>        cost: u8,</span></span>\n<span data-line=\"\"><span>        role: Roles,</span></span>\n<span data-line=\"\"><span>        is_captain: bool</span></span>\n<span data-line=\"\"><span>    );</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>Ensure the trait is typed with <code>TContractState</code>.</p>\n<p><strong>Note</strong>: Earlier versions required functions within the system to be named <code>execute</code>. This is no longer the case.</p>\n","isPage":false,"text":"\nSystem management has been revamped. Start by defining an interface for each system, which specifies its implementation:\n#[starknet::interface]\ntrait ICreateCard&lt;TContractState&gt; {\n    fn create_card(\n        self: @TContractState,\n        world: IWorldDispatcher,\n        token_id: u256,\n        dribble: u8,\n        defense: u8,\n        cost: u8,\n        role: Roles,\n        is_captain: bool\n    );\n}\nEnsure the trait is typed with TContractState.\nNote: Earlier versions required functions within the system to be named execute. This is no longer the case.\n","title":"Interface Creation","titles":[null,"Migration Guide to 0.3.0","Systems Update"]},"145":{"href":"/cairo/migration/0#interface-implementation","html":"\n<p>To implement the interface:</p>\n<ol>\n<li>Add <code>#[abi(embed_v0)]</code> before each method.</li>\n<li>Ensure to reference the created interface in the module with <code>use super::ICreateCard;</code>.</li>\n</ol>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[abi(embed_v0)]</span></span>\n<span data-line=\"\"><span>impl CreateCardImpl of ICreateCard&lt;ContractState&gt; {</span></span>\n<span data-line=\"\"><span>    fn create_card(</span></span>\n<span data-line=\"\"><span>        self: @ContractState,</span></span>\n<span data-line=\"\"><span>        world: IWorldDispatcher,</span></span>\n<span data-line=\"\"><span>        token_id: u256,</span></span>\n<span data-line=\"\"><span>        dribble: u8,</span></span>\n<span data-line=\"\"><span>        defense: u8,</span></span>\n<span data-line=\"\"><span>        cost: u8,</span></span>\n<span data-line=\"\"><span>        role: Roles,</span></span>\n<span data-line=\"\"><span>        is_captain: bool</span></span>\n<span data-line=\"\"><span>    ) {</span></span>\n<span data-line=\"\"><span>        // your logic here</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>This then allows the <code>create_card</code> to be called just like a regular starknet function.</p>\n","isPage":false,"text":"\nTo implement the interface:\n\nAdd #[abi(embed_v0)] before each method.\nEnsure to reference the created interface in the module with use super::ICreateCard;.\n\n#[abi(embed_v0)]\nimpl CreateCardImpl of ICreateCard&lt;ContractState&gt; {\n    fn create_card(\n        self: @ContractState,\n        world: IWorldDispatcher,\n        token_id: u256,\n        dribble: u8,\n        defense: u8,\n        cost: u8,\n        role: Roles,\n        is_captain: bool\n    ) {\n        // your logic here\n    }\n}\nThis then allows the create_card to be called just like a regular starknet function.\n","title":"Interface Implementation","titles":[null,"Migration Guide to 0.3.0","Systems Update"]},"146":{"href":"/cairo/migration/0#dojocontract-decorator","html":"\n<p>0.3.0 introduces a new optional decorator <code>#[dojo::contract]</code> which indicates to the compiler to inject imports and the world dispatcher. This allows for minimal boilerplate.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[dojo::contract]</span></span>\n<span data-line=\"\"><span>mod move {</span></span>\n<span data-line=\"\"><span>....code TODO</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n","isPage":false,"text":"\n0.3.0 introduces a new optional decorator #[dojo::contract] which indicates to the compiler to inject imports and the world dispatcher. This allows for minimal boilerplate.\n#[dojo::contract]\nmod move {\n....code TODO\n}\n","title":"#[dojo::contract] decorator","titles":[null,"Migration Guide to 0.3.0","Systems Update"]},"147":{"href":"/cairo/migration/0#events","html":"\n<p>Events should now reside within the models. Here&#x27;s an example of how to migrate your events:</p>\n<p><strong>Previous Format</strong>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[derive(Drop, starknet::Event, Copy)]</span></span>\n<span data-line=\"\"><span>struct DeckCreated {</span></span>\n<span data-line=\"\"><span>    player: ContractAddress,</span></span>\n<span data-line=\"\"><span>    token_list: Span&lt;u256&gt;,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p><strong>New Format</strong>:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[event]</span></span>\n<span data-line=\"\"><span>#[derive(Drop, starknet::Event)]</span></span>\n<span data-line=\"\"><span>enum Event {</span></span>\n<span data-line=\"\"><span>    DeckCreated: DeckCreated</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(Drop, starknet::Event)]</span></span>\n<span data-line=\"\"><span>struct DeckCreated {</span></span>\n<span data-line=\"\"><span>    player: ContractAddress,</span></span>\n<span data-line=\"\"><span>    token_list: Span&lt;u256&gt;,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n","isPage":false,"text":"\nEvents should now reside within the models. Here&#x27;s an example of how to migrate your events:\nPrevious Format:\n#[derive(Drop, starknet::Event, Copy)]\nstruct DeckCreated {\n    player: ContractAddress,\n    token_list: Span&lt;u256&gt;,\n}\nNew Format:\n#[event]\n#[derive(Drop, starknet::Event)]\nenum Event {\n    DeckCreated: DeckCreated\n}\n \n#[derive(Drop, starknet::Event)]\nstruct DeckCreated {\n    player: ContractAddress,\n    token_list: Span&lt;u256&gt;,\n}\n","title":"Events","titles":[null,"Migration Guide to 0.3.0"]},"148":{"href":"/cairo/migration/0#testing-changes","html":"\n","isPage":false,"text":"\n","title":"Testing Changes","titles":[null,"Migration Guide to 0.3.0"]},"149":{"href":"/cairo/migration/0#setup","html":"\n<p>Testing has seen significant changes with the change to systems as Contracts. Instead of using <code>world.execute</code>, use the dispatcher.</p>\n<ol>\n<li>Import necessary modules and traits:</li>\n</ol>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>use dojo::test_utils::deploy_contract;</span></span>\n<span data-line=\"\"><span>use tsubasa::systems::{ICreateCardDispatcher, ICreateCardDispatcherTrait};</span></span></code></pre></figure>\n<ol start=\"2\">\n<li>Deploy the contract and instantiate the dispatcher:</li>\n</ol>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>let contract_create_card = deploy_contract(</span></span>\n<span data-line=\"\"><span>    create_card_system::TEST_CLASS_HASH, array![].span()</span></span>\n<span data-line=\"\"><span>);</span></span>\n<span data-line=\"\"><span>let create_card_system = ICreateCardDispatcher { contract_address: contract_create_card };</span></span></code></pre></figure>\n","isPage":false,"text":"\nTesting has seen significant changes with the change to systems as Contracts. Instead of using world.execute, use the dispatcher.\n\nImport necessary modules and traits:\n\nuse dojo::test_utils::deploy_contract;\nuse tsubasa::systems::{ICreateCardDispatcher, ICreateCardDispatcherTrait};\n\nDeploy the contract and instantiate the dispatcher:\n\nlet contract_create_card = deploy_contract(\n    create_card_system::TEST_CLASS_HASH, array![].span()\n);\nlet create_card_system = ICreateCardDispatcher { contract_address: contract_create_card };\n","title":"Setup","titles":[null,"Migration Guide to 0.3.0","Testing Changes"]},"150":{"href":"/cairo/migration/0#function-testing","html":"\n<p>With the contract deployed and the dispatcher instantiated, proceed to test your functions:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>// ... (previous setup code)</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>let result = create_card_system.create_card(</span></span>\n<span data-line=\"\"><span>    // ... provide necessary parameters here</span></span>\n<span data-line=\"\"><span>);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>// Assert or validate the &#x27;result&#x27; as per your test conditions</span></span></code></pre></figure>","isPage":false,"text":"\nWith the contract deployed and the dispatcher instantiated, proceed to test your functions:\n// ... (previous setup code)\n \nlet result = create_card_system.create_card(\n    // ... provide necessary parameters here\n);\n \n// Assert or validate the &#x27;result&#x27; as per your test conditions","title":"Function Testing","titles":[null,"Migration Guide to 0.3.0","Testing Changes"]},"151":{"href":"/cairo/migration/0#migration-guide-to-040","html":"\n<p>[todo]</p>","isPage":true,"text":"\n[todo]","title":"Migration Guide to 0.4.0","titles":[null]},"152":{"href":"/client/sdk/c#dojo-c","html":"</header>\n<p><a href=\"https://github.com/dojoengine/dojo.c\">c bindings</a></p>","isPage":true,"text":"\nc bindings","title":"Dojo c","titles":[]},"153":{"href":"/client/sdk/dojojs#dojojs","html":"</header>","isPage":true,"text":"","title":"dojo.js","titles":[]},"154":{"href":"/toolchain/katana/development#development","html":"</header>","isPage":true,"text":"","title":"Development","titles":[]},"155":{"href":"/toolchain/slot/overview#slot","html":"</header>\n<p>Slot is a toolchain developed by <a href=\"https://github.com/cartridge-gg/slot\">Cartrige.gg</a> for rapidly spinning up Katana and Torii instances. Play test your game in seconds.</p>\n","isPage":true,"text":"\nSlot is a toolchain developed by Cartrige.gg for rapidly spinning up Katana and Torii instances. Play test your game in seconds.\n","title":"Slot","titles":[]},"156":{"href":"/toolchain/slot/overview#installation","html":"\n<p>Run the following command to install slot:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">curl</span><span style=\"color:#6CB6FF\"> -L</span><span style=\"color:#96D0FF\"> https://slot.cartridge.sh </span><span style=\"color:#F47067\">|</span><span style=\"color:#F69D50\"> bash</span></span></code></pre></figure>\n<p>Once finished, run <code>slotup</code> to manage slot installations and follow the outputted directions.</p>\n","isPage":false,"text":"\nRun the following command to install slot:\ncurl -L https://slot.cartridge.sh | bash\nOnce finished, run slotup to manage slot installations and follow the outputted directions.\n","title":"Installation","titles":["Slot"]},"157":{"href":"/toolchain/slot/overview#deploy-using-slot","html":"\n<p>To deploy your projects using slot, check out the tutorial <a href=\"/tutorial/deploy-using-slot/main.md\">Deploy using Slot</a>.</p>\n<blockquote>\n<p>📚 <strong>Reference</strong></p>\n<p>See the <a href=\"/toolchain/slot/reference.md\"><code>slot</code> Reference</a> for a complete overview of all the available subcommands.</p>\n</blockquote>","isPage":false,"text":"\nTo deploy your projects using slot, check out the tutorial Deploy using Slot.\n\n📚 Reference\nSee the slot Reference for a complete overview of all the available subcommands.\n","title":"Deploy using Slot","titles":["Slot"]},"158":{"href":"/toolchain/slot/reference#slot-reference","html":"\n","isPage":true,"text":"\n","title":"slot reference","titles":[null]},"159":{"href":"/toolchain/slot/reference#name","html":"\n<p>slot - a toolchain developed for rapidly spinning up Katana and Torii instances.</p>\n","isPage":false,"text":"\nslot - a toolchain developed for rapidly spinning up Katana and Torii instances.\n","title":"Name","titles":[null,"slot reference"]},"160":{"href":"/toolchain/slot/reference#usage","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">slot</span><span style=\"color:#ADBAC7\"> [COMMANDS] [OPTIONS]</span></span></code></pre></figure>\n","isPage":false,"text":"\nslot [COMMANDS] [OPTIONS]\n","title":"Usage","titles":[null,"slot reference"]},"161":{"href":"/toolchain/slot/reference#commands","html":"\n<p><code>auth</code><br/>\n     Manage auth credentials for the Slot CLI.</p>\n<p><a href=\"/toolchain/slot/deployments-commands/deployments.md\"><code>deployments</code></a></p>\n<p>     Manage Slot deployments.</p>\n<p><code>help</code><br/>\n     Print this message or the help of the given subcommand(s)</p>","isPage":false,"text":"\nauth\n     Manage auth credentials for the Slot CLI.\ndeployments\n     Manage Slot deployments.\nhelp\n     Print this message or the help of the given subcommand(s)","title":"Commands","titles":[null,"slot reference"]},"162":{"href":"/toolchain/sozo/development#development","html":"</header>","isPage":true,"text":"","title":"Development","titles":[]},"163":{"href":"/toolchain/sozo/overview#sozo","html":"\n<p><code>sozo</code> is a powerful all-in-one tool for managing your Dojo projects. It helps with everything from scaffolding a new project, all the way to deploying and interacting with your Dojo Worlds. It includes a migration planning tool, designed to streamline the updating and deployment of AWs. It provides a robust command-line interface (CLI) that simplifies World management tasks, enabling you to focus on the creative aspects of World-building. In the future, it may include a GUI.</p>\n","isPage":true,"text":"\nsozo is a powerful all-in-one tool for managing your Dojo projects. It helps with everything from scaffolding a new project, all the way to deploying and interacting with your Dojo Worlds. It includes a migration planning tool, designed to streamline the updating and deployment of AWs. It provides a robust command-line interface (CLI) that simplifies World management tasks, enabling you to focus on the creative aspects of World-building. In the future, it may include a GUI.\n","title":"Sozo","titles":[null]},"164":{"href":"/toolchain/sozo/overview#features","html":"\n<ul>\n<li><strong>Binary CLI</strong>: Sozo provides an intuitive binary CLI, ensuring easy management of your Worlds, whether you&#x27;re updating existing ones or deploying new ones.</li>\n</ul>\n","isPage":false,"text":"\n\nBinary CLI: Sozo provides an intuitive binary CLI, ensuring easy management of your Worlds, whether you&#x27;re updating existing ones or deploying new ones.\n\n","title":"Features","titles":[null]},"165":{"href":"/toolchain/sozo/overview#installation","html":"\n<p><code>sozo</code> binary can be installed via <a href=\"/getting-started/quick-start.md\"><code>dojoup</code></a>, our dedicated installation package manager.</p>\n","isPage":false,"text":"\nsozo binary can be installed via dojoup, our dedicated installation package manager.\n","title":"Installation","titles":[null]},"166":{"href":"/toolchain/sozo/overview#installing-from-source","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">git</span><span style=\"color:#96D0FF\"> clone https://github.com/dojoengine/dojo</span></span>\n<span data-line=\"\"><span style=\"color:#6CB6FF\">cd</span><span style=\"color:#96D0FF\"> dojo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">cargo</span><span style=\"color:#96D0FF\"> install --path ./crates/sozo --locked --force</span></span></code></pre></figure>\n<p>This will install Sozo and the required dependencies on your local system.</p>\n<blockquote>\n<p>📚 <strong>Reference</strong></p>\n<p>See the <a href=\"/toolchain/sozo/reference.md\"><code>sozo</code> Reference</a> for a complete overview of all the available subcommands.</p>\n</blockquote>","isPage":false,"text":"\ngit clone https://github.com/dojoengine/dojo\ncd dojo\ncargo install --path ./crates/sozo --locked --force\nThis will install Sozo and the required dependencies on your local system.\n\n📚 Reference\nSee the sozo Reference for a complete overview of all the available subcommands.\n","title":"Installing from Source","titles":[null,"Installation"]},"167":{"href":"/toolchain/sozo/reference#sozo-reference","html":"\n","isPage":true,"text":"\n","title":"sozo reference","titles":[null]},"168":{"href":"/toolchain/sozo/reference#common-options","html":"\n<ul>\n<li><a href=\"/toolchain/sozo/common-options/profile.md\">profile</a></li>\n<li><a href=\"/toolchain/sozo/common-options/offline.md\">offline</a></li>\n</ul>\n","isPage":false,"text":"\n\nprofile\noffline\n\n","title":"Common options","titles":[null,"sozo reference"]},"169":{"href":"/toolchain/sozo/reference#project-commands","html":"\n<ul>\n<li><a href=\"/toolchain/sozo/project-commands/init.md\">init</a></li>\n<li><a href=\"/toolchain/sozo/project-commands/build.md\">build</a></li>\n<li><a href=\"/toolchain/sozo/project-commands/test.md\">test</a></li>\n<li><a href=\"/toolchain/sozo/project-commands/migrate.mdx\">migrate</a></li>\n</ul>\n","isPage":false,"text":"\n\ninit\nbuild\ntest\nmigrate\n\n","title":"Project Commands","titles":[null,"sozo reference"]},"170":{"href":"/toolchain/sozo/reference#world-commands","html":"\n<ul>\n<li><a href=\"/toolchain/sozo/world-commands/execute.mdx\">execute</a></li>\n<li><a href=\"/toolchain/sozo/world-commands/register.md\">register</a></li>\n<li><a href=\"/toolchain/sozo/world-commands/system.mdx\">system</a></li>\n<li><a href=\"/toolchain/sozo/world-commands/model.mdx\">model</a></li>\n<li><a href=\"/toolchain/sozo/world-commands/events.md\">events</a></li>\n<li><a href=\"/toolchain/sozo/world-commands/auth.md\">auth</a></li>\n</ul>","isPage":false,"text":"\n\nexecute\nregister\nsystem\nmodel\nevents\nauth\n","title":"World Commands","titles":[null,"sozo reference"]},"171":{"href":"/toolchain/torii/graphql#torii---graphql","html":"\n","isPage":true,"text":"\n","title":"Torii - GraphQL","titles":[null]},"172":{"href":"/toolchain/torii/graphql#name","html":"\n<p>In Dojo, you have access to custom queries and subscriptions that are specifically designed to work with the <code>caller</code> for client applications. GraphQL is the technology that makes this possible.</p>\n<p>GraphQL is the rising star of backend technologies. It replaces REST as an API design paradigm and is becoming the new standard for exposing the data and functionality of a web server. It allows you to specify exactly what data you want to retrieve, and it delivers that data in a structured JSON format. This flexibility in data retrieval ensures that you get the information you need efficiently and in a format that&#x27;s easy to work with.</p>\n","isPage":false,"text":"\nIn Dojo, you have access to custom queries and subscriptions that are specifically designed to work with the caller for client applications. GraphQL is the technology that makes this possible.\nGraphQL is the rising star of backend technologies. It replaces REST as an API design paradigm and is becoming the new standard for exposing the data and functionality of a web server. It allows you to specify exactly what data you want to retrieve, and it delivers that data in a structured JSON format. This flexibility in data retrieval ensures that you get the information you need efficiently and in a format that&#x27;s easy to work with.\n","title":"Name","titles":[null,"Torii - GraphQL"]},"173":{"href":"/toolchain/torii/graphql#graphql-playground","html":"\n<p>GraphQL Playground is a <code>GraphQL IDE</code> that allows you to interactively explore the functionality of a GraphQL API by sending queries and mutations to it. It’s somewhat similar to Postman which offers comparable functionality for REST APIs.</p>\n","isPage":false,"text":"\nGraphQL Playground is a GraphQL IDE that allows you to interactively explore the functionality of a GraphQL API by sending queries and mutations to it. It’s somewhat similar to Postman which offers comparable functionality for REST APIs.\n","title":"GraphQL Playground","titles":[null,"Torii - GraphQL","Name"]},"174":{"href":"/toolchain/torii/graphql#usage","html":"\n","isPage":false,"text":"\n","title":"USAGE","titles":[null,"Torii - GraphQL"]},"175":{"href":"/toolchain/torii/graphql#pre-requisites","html":"\n<p>Make sure torii is running in your local terminal.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">torii</span><span style=\"color:#6CB6FF\"> --world</span><span style=\"color:#F47067\"> &lt;</span><span style=\"color:#96D0FF\">WORLD_ADDRES</span><span style=\"color:#ADBAC7\">S</span><span style=\"color:#F47067\">&gt;</span></span></code></pre></figure>\n<p>It starts GraphQL server at <code>http://0.0.0.0:8080/graphql</code></p>\n<p>After the torii server starts on your local machine, you&#x27;re ready to make query and subscription operations.</p>\n","isPage":false,"text":"\nMake sure torii is running in your local terminal.\ntorii --world &lt;WORLD_ADDRESS&gt;\nIt starts GraphQL server at http://0.0.0.0:8080/graphql\nAfter the torii server starts on your local machine, you&#x27;re ready to make query and subscription operations.\n","title":"Pre-requisites","titles":[null,"Torii - GraphQL","USAGE"]},"176":{"href":"/toolchain/torii/graphql#schema-and-query-defintions","html":"\n<p>Torii generates both the schema and queries at runtime specific to your world. There are mainly two groups of queries, predefined queries and dynamically generated custom queries.</p>\n<p>Predefined queries like <code>entities</code> provide a generic entry point to the entities data of the world. Custom queries on the other hand are built according to the models of the world. Each model has a correpsonding <code>{name}Models</code> query and retrieves the associated model data. For example: <code>positionModels</code>.</p>\n<p>The benefit of custom queries becomes apparent when filtering and sorting is needed. They allow much more finer control of the returned dataset.</p>\n","isPage":false,"text":"\nTorii generates both the schema and queries at runtime specific to your world. There are mainly two groups of queries, predefined queries and dynamically generated custom queries.\nPredefined queries like entities provide a generic entry point to the entities data of the world. Custom queries on the other hand are built according to the models of the world. Each model has a correpsonding {name}Models query and retrieves the associated model data. For example: positionModels.\nThe benefit of custom queries becomes apparent when filtering and sorting is needed. They allow much more finer control of the returned dataset.\n","title":"Schema and query defintions","titles":[null,"Torii - GraphQL"]},"177":{"href":"/toolchain/torii/graphql#query-operation","html":"\n<p>In <a href=\"/cairo/hello-dojo.md#next-steps\"><code>hello-dojo</code></a> we fetched some data from the <code>Moves</code> model. This time let&#x27;s fetch only <code>id</code>, <code>name</code>, <code>classHash</code> fields from <code>Position</code> model .</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">query</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  model</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">id</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Position&quot;</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    name</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    classHash</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>After you run the query, you will receive an output like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;model&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Position&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;name&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Position&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;classHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x6ffc643cbc4b2fb9c424242b18175a5e142269b45f4463d1cd4dddb7a2e5095&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Great! If you&#x27;re wondering about the number of fields a <code>Model</code> has or the details of a <code>Entities</code>, you can find all the information about the schema definition in the <code>Documentation Explorer</code> section of the GraphQL IDE. It&#x27;s your go-to place for exploring the rest of the documentation.</p>\n<p>Now lets retrieve more data from <code>Moves</code> model.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">query</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  movesModels</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    edges</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      node</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        player</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        remaining</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        last_direction</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>After you run the query, you will receive an output like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;movesModels&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;edges&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;node&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;player&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;remaining&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">10</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;last_direction&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;None&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">          }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nIn hello-dojo we fetched some data from the Moves model. This time let&#x27;s fetch only id, name, classHash fields from Position model .\nquery {\n  model(id: &quot;Position&quot;) {\n    id\n    name\n    classHash\n  }\n}\nAfter you run the query, you will receive an output like this:\n{\n  &quot;data&quot;: {\n    &quot;model&quot;: {\n      &quot;id&quot;: &quot;Position&quot;,\n      &quot;name&quot;: &quot;Position&quot;,\n      &quot;classHash&quot;: &quot;0x6ffc643cbc4b2fb9c424242b18175a5e142269b45f4463d1cd4dddb7a2e5095&quot;\n    }\n  }\n}\nGreat! If you&#x27;re wondering about the number of fields a Model has or the details of a Entities, you can find all the information about the schema definition in the Documentation Explorer section of the GraphQL IDE. It&#x27;s your go-to place for exploring the rest of the documentation.\nNow lets retrieve more data from Moves model.\nquery {\n  movesModels {\n    edges {\n      node {\n        player\n        remaining\n        last_direction\n      }\n    }\n  }\n}\nAfter you run the query, you will receive an output like this:\n{\n  &quot;data&quot;: {\n    &quot;movesModels&quot;: {\n      &quot;edges&quot;: [\n        {\n          &quot;node&quot;: {\n            &quot;player&quot;: &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;,\n            &quot;remaining&quot;: 10,\n            &quot;last_direction&quot;: &quot;None&quot;\n          }\n        }\n      ]\n    }\n  }\n}\n","title":"Query operation","titles":[null,"Torii - GraphQL"]},"178":{"href":"/toolchain/torii/graphql#transactions","html":"\n<p>GraphQL additionally offers an API to fetch transactions emitted from your <code>world</code>. Presently, you can retrieve <code>transaction data</code> with the potential for future support of <code>transaction receipt</code>. Current API includes pagination support, although filtering is not yet supported. Let&#x27;s explore an example.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"grapql\" data-theme=\"github-dark-dimmed\"><code data-language=\"grapql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>query{</span></span>\n<span data-line=\"\"><span>  transactions{</span></span>\n<span data-line=\"\"><span>    edges{</span></span>\n<span data-line=\"\"><span>      node{</span></span>\n<span data-line=\"\"><span>        id</span></span>\n<span data-line=\"\"><span>        transactionHash</span></span>\n<span data-line=\"\"><span>        senderAddress</span></span>\n<span data-line=\"\"><span>        calldata</span></span>\n<span data-line=\"\"><span>      }</span></span>\n<span data-line=\"\"><span>    }</span></span>\n<span data-line=\"\"><span>    totalCount</span></span>\n<span data-line=\"\"><span>  }</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>If you execute this query after you applied <code>sozo migrate</code> in your <a href=\"/cairo/hello-dojo.md\"><code>hello-dojo</code></a> example. You will get an output similar to this.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;transactions&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;edges&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;node&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x000000000000000000000000000000000000000000000000000000000000000a:0x0000&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;transactionHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x2da3d65e223362c72906f97663a4e7dc81ab0bbd04bbde5532a230c1e97d93e&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;senderAddress&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;calldata&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2730079d734ee55315f4f141eaed376bddd8c2133523d223a344c5604e0f7f8&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x0&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x35ec9fd22092dc0c8fc9341e94d5f361924d921c128fa46a0648f2dac519ce4&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2ffecbe8de6c7c10c785a6eb964ee6489f8dcf139000adbe2c0f12d249be7d8&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            ]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">          }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;node&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x0000000000000000000000000000000000000000000000000000000000000008:0x0000&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;transactionHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x2aa02de0e3fa582b3cb6cf9e4371051f44ae2e0d6c94f5c936338ffc8c2ac12&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;senderAddress&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;calldata&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1e7875674bcb09daaf984cbf77264ac98120cb39e6d17522520defcdc347476&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x0&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1e7875674bcb09daaf984cbf77264ac98120cb39e6d17522520defcdc347476&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2e5174b54aef0b99d4685827ffa51488447e1f5607908293d5c715d6bd22433&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x6a11b5b3003a3aa0ae7f8f443e48314cc0bc51eaea7c3ed1c19beb909f5dda3&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            ]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">          }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;node&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x0000000000000000000000000000000000000000000000000000000000000005:0x0000&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;transactionHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x1f03fa7dc5a673f96d53b728785a98d6ff089c182a7bb32735b150e91817e5b&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;senderAddress&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;calldata&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x41a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x1987cbd17808b9a23693d4de7e246a443cfe37e6e7fbaeabd7d7e6532b07c3d&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x0&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x6&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x6&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0xb3e374b8087dca92601afbb9881fed855ac0d568e3bf878a876fca5ffcb479&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x41d7f42bf7a362f0420aaae66d7a91df981100a039ac116a1d9cb632c74ad27&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x0&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x59f31686991d7cac25a7d4844225b9647c89e3e1e2d03460dbc61e3fbfafc59&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">              &quot;0x77638e9a645209ac1e32e143bfdbfe9caf723c4f7645fcf465c38967545ea2f&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            ]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">          }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;totalCount&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">3</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Now feel free to play around with the query by removing any fields from the selection set and observe the responses sent by the server. It is your turn to create any kind of query for entities and models!</p>\n","isPage":false,"text":"\nGraphQL additionally offers an API to fetch transactions emitted from your world. Presently, you can retrieve transaction data with the potential for future support of transaction receipt. Current API includes pagination support, although filtering is not yet supported. Let&#x27;s explore an example.\nquery{\n  transactions{\n    edges{\n      node{\n        id\n        transactionHash\n        senderAddress\n        calldata\n      }\n    }\n    totalCount\n  }\n}\nIf you execute this query after you applied sozo migrate in your hello-dojo example. You will get an output similar to this.\n{\n  &quot;data&quot;: {\n    &quot;transactions&quot;: {\n      &quot;edges&quot;: [\n        {\n          &quot;node&quot;: {\n            &quot;id&quot;: &quot;0x000000000000000000000000000000000000000000000000000000000000000a:0x0000&quot;,\n            &quot;transactionHash&quot;: &quot;0x2da3d65e223362c72906f97663a4e7dc81ab0bbd04bbde5532a230c1e97d93e&quot;,\n            &quot;senderAddress&quot;: &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;,\n            &quot;calldata&quot;: [\n              &quot;0x1&quot;,\n              &quot;0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a&quot;,\n              &quot;0x2730079d734ee55315f4f141eaed376bddd8c2133523d223a344c5604e0f7f8&quot;,\n              &quot;0x0&quot;,\n              &quot;0x2&quot;,\n              &quot;0x2&quot;,\n              &quot;0x35ec9fd22092dc0c8fc9341e94d5f361924d921c128fa46a0648f2dac519ce4&quot;,\n              &quot;0x2ffecbe8de6c7c10c785a6eb964ee6489f8dcf139000adbe2c0f12d249be7d8&quot;\n            ]\n          }\n        },\n        {\n          &quot;node&quot;: {\n            &quot;id&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000008:0x0000&quot;,\n            &quot;transactionHash&quot;: &quot;0x2aa02de0e3fa582b3cb6cf9e4371051f44ae2e0d6c94f5c936338ffc8c2ac12&quot;,\n            &quot;senderAddress&quot;: &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;,\n            &quot;calldata&quot;: [\n              &quot;0x2&quot;,\n              &quot;0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a&quot;,\n              &quot;0x1e7875674bcb09daaf984cbf77264ac98120cb39e6d17522520defcdc347476&quot;,\n              &quot;0x0&quot;,\n              &quot;0x1&quot;,\n              &quot;0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a&quot;,\n              &quot;0x1e7875674bcb09daaf984cbf77264ac98120cb39e6d17522520defcdc347476&quot;,\n              &quot;0x1&quot;,\n              &quot;0x1&quot;,\n              &quot;0x2&quot;,\n              &quot;0x2e5174b54aef0b99d4685827ffa51488447e1f5607908293d5c715d6bd22433&quot;,\n              &quot;0x6a11b5b3003a3aa0ae7f8f443e48314cc0bc51eaea7c3ed1c19beb909f5dda3&quot;\n            ]\n          }\n        },\n        {\n          &quot;node&quot;: {\n            &quot;id&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000005:0x0000&quot;,\n            &quot;transactionHash&quot;: &quot;0x1f03fa7dc5a673f96d53b728785a98d6ff089c182a7bb32735b150e91817e5b&quot;,\n            &quot;senderAddress&quot;: &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;,\n            &quot;calldata&quot;: [\n              &quot;0x1&quot;,\n              &quot;0x41a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf&quot;,\n              &quot;0x1987cbd17808b9a23693d4de7e246a443cfe37e6e7fbaeabd7d7e6532b07c3d&quot;,\n              &quot;0x0&quot;,\n              &quot;0x6&quot;,\n              &quot;0x6&quot;,\n              &quot;0xb3e374b8087dca92601afbb9881fed855ac0d568e3bf878a876fca5ffcb479&quot;,\n              &quot;0x41d7f42bf7a362f0420aaae66d7a91df981100a039ac116a1d9cb632c74ad27&quot;,\n              &quot;0x0&quot;,\n              &quot;0x2&quot;,\n              &quot;0x59f31686991d7cac25a7d4844225b9647c89e3e1e2d03460dbc61e3fbfafc59&quot;,\n              &quot;0x77638e9a645209ac1e32e143bfdbfe9caf723c4f7645fcf465c38967545ea2f&quot;\n            ]\n          }\n        }\n      ],\n      &quot;totalCount&quot;: 3\n    }\n  }\n}\nNow feel free to play around with the query by removing any fields from the selection set and observe the responses sent by the server. It is your turn to create any kind of query for entities and models!\n","title":"Transactions","titles":[null,"Torii - GraphQL","Query operation"]},"179":{"href":"/toolchain/torii/graphql#pagination","html":"\n<p>As the entities in your world grows, fetching all of that data at once can become inefficient and slow.</p>\n<p>Torii provides two methods to address this - cursor or offset/limit based pagination. To keep the return type consistent, both methods will return a <a href=\"https://relay.dev/graphql/connections.htm#sec-Connection-Types\"><code>Connection</code></a> type.</p>\n<p>You can read more about graphql pagination <a href=\"https://graphql.org/learn/pagination\">here</a>.</p>\n","isPage":false,"text":"\nAs the entities in your world grows, fetching all of that data at once can become inefficient and slow.\nTorii provides two methods to address this - cursor or offset/limit based pagination. To keep the return type consistent, both methods will return a Connection type.\nYou can read more about graphql pagination here.\n","title":"Pagination","titles":[null,"Torii - GraphQL","Query operation"]},"180":{"href":"/toolchain/torii/graphql#cursor","html":"\n<p>Cursor based pagination is the most efficient, allowing us to query a subset or slice of the entire set of data. Both forward and backward pagination are supported using a combination of <code>first, last, before, after</code> input arguments.</p>\n<p>Forward pagination uses <code>first</code>/<code>after</code> and backward pagination uses <code>last</code>/<code>before</code>. <code>first</code>/<code>last</code> are integers representing the number of items to return. <code>after</code>/<code>before</code> are the cursors to paginate from.</p>\n<p>Query for first page of 2 entities</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">query</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  entities</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">first</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">2</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    totalCount</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    edges</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      cursor</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      node</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        ...</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Result shows there are 5 entities and returns the first two</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;entities&quot;</span><span style=\"color:#FF938A;font-style:italic\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;totalCount&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">5</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;edges&quot;</span><span style=\"color:#FF938A;font-style:italic\"> [</span></span>\n<span data-line=\"\"><span style=\"color:#FF938A;font-style:italic\">      {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">        &quot;cursor&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Y3Vyc29yX29uZQ==&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">        &quot;node&quot;</span><span style=\"color:#ADBAC7\"> : { }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">        &quot;cursor&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Y3Vyc29yX3R3bw==&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">        &quot;node&quot;</span><span style=\"color:#ADBAC7\"> : { }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    ]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Query 3 entities after the second node (last 3)</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F47067\">query</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  entities</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">first</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">3</span><span style=\"color:#ADBAC7\">, </span><span style=\"color:#F69D50\">after</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Y3Vyc29yX3R3bw==&quot;</span><span style=\"color:#ADBAC7\">) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    ...</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nCursor based pagination is the most efficient, allowing us to query a subset or slice of the entire set of data. Both forward and backward pagination are supported using a combination of first, last, before, after input arguments.\nForward pagination uses first/after and backward pagination uses last/before. first/last are integers representing the number of items to return. after/before are the cursors to paginate from.\nQuery for first page of 2 entities\nquery {\n  entities (first: 2) {\n    totalCount\n    edges {\n      cursor\n      node {\n        ...\n      }\n    }\n  }\n}\nResult shows there are 5 entities and returns the first two\n{\n  &quot;entities&quot; {\n    &quot;totalCount&quot;: 5,\n    &quot;edges&quot; [\n      {\n        &quot;cursor&quot;: &quot;Y3Vyc29yX29uZQ==&quot;,\n        &quot;node&quot; : { }\n      },\n      {\n        &quot;cursor&quot;: &quot;Y3Vyc29yX3R3bw==&quot;,\n        &quot;node&quot; : { }\n      },\n    ]\n  }\n}\nQuery 3 entities after the second node (last 3)\nquery {\n  entities (first: 3, after: &quot;Y3Vyc29yX3R3bw==&quot;) {\n    ...\n  }\n}\n","title":"Cursor","titles":[null,"Torii - GraphQL","Query operation","Pagination"]},"181":{"href":"/toolchain/torii/graphql#offsetlimit","html":"\n<p>Offset/limit based pagination can be more intuitive and easier to use. However, for very, very large datasets they can be inefficient.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># essentially the same as the last query in cursor example</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">query</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  entities</span><span style=\"color:#ADBAC7\"> (</span><span style=\"color:#F69D50\">offset</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">2</span><span style=\"color:#ADBAC7\">, limit 3) {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">    ...</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nOffset/limit based pagination can be more intuitive and easier to use. However, for very, very large datasets they can be inefficient.\n# essentially the same as the last query in cursor example\nquery {\n  entities (offset: 2, limit 3) {\n    ...\n  }\n}\n","title":"Offset/limit","titles":[null,"Torii - GraphQL","Query operation","Pagination"]},"182":{"href":"/toolchain/torii/graphql#subscription-operations","html":"\n<p>Subscriptions are a GraphQL feature that allows a server to send data to its clients when a specific event happens. Subscriptions are usually implemented with WebSockets. In that setup, the server maintains a steady connection to its subscribed client. This also breaks the “Request-Response-Cycle” that is used for with REST APIs.</p>\n<p>Instead, the client initially opens up a long-lived connection to the server by sending a subscription query that specifies which event it is interested in. Every time this particular event happens, the server uses the connection to push the event data to the subscribed client(s).</p>\n<p>In this example, you can listen when an <code>Model</code> is registered by executing this subscription</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#DCBDFB\">subscription</span><span style=\"color:#DCBDFB\"> modelRegistered</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  modelRegistered</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    name</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Graphql also supports subscription to a targeted entity or model, for this we have to pass its id as an argument</p>\n<p>In this example, our server provides a <code>entityUpdated</code> subscription, which should notify clients whenever an entity with id <code>0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20</code> is updated. On the same subscription we can get the model(components) values of the updated entity . A client can execute a subscription that looks like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#DCBDFB\">subscription</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  entityUpdated</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  ) {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    keys</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    eventId</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    createdAt</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    updatedAt</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    models</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">      __typename</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">      ...</span><span style=\"color:#F47067\"> on</span><span style=\"color:#6CB6FF\"> Moves</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        remaining</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        player</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      }</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">      ...</span><span style=\"color:#F47067\"> on</span><span style=\"color:#6CB6FF\"> Position</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">        vec</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">          x</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">          y</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>According to your input, you will receive an output like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;entityUpdated&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;keys&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;eventId&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x0000000000000000000000000000000000000000000000000000000000000013:0x0000:0x0000&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;createdAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2023-10-17 11:39:42&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;updatedAt&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;2023-10-17 11:52:48&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;models&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;__typename&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Moves&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;remaining&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">10</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;player&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;__typename&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;Position&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">          &quot;vec&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;x&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">10</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">            &quot;y&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#6CB6FF\">10</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">          }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\nSubscriptions are a GraphQL feature that allows a server to send data to its clients when a specific event happens. Subscriptions are usually implemented with WebSockets. In that setup, the server maintains a steady connection to its subscribed client. This also breaks the “Request-Response-Cycle” that is used for with REST APIs.\nInstead, the client initially opens up a long-lived connection to the server by sending a subscription query that specifies which event it is interested in. Every time this particular event happens, the server uses the connection to push the event data to the subscribed client(s).\nIn this example, you can listen when an Model is registered by executing this subscription\nsubscription modelRegistered {\n  modelRegistered {\n    id\n    name\n  }\n}\nGraphql also supports subscription to a targeted entity or model, for this we have to pass its id as an argument\nIn this example, our server provides a entityUpdated subscription, which should notify clients whenever an entity with id 0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20 is updated. On the same subscription we can get the model(components) values of the updated entity . A client can execute a subscription that looks like this:\nsubscription {\n  entityUpdated(\n    id: &quot;0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20&quot;\n  ) {\n    id\n    keys\n    eventId\n    createdAt\n    updatedAt\n    models {\n      __typename\n      ... on Moves {\n        remaining\n        player\n      }\n      ... on Position {\n        vec {\n          x\n          y\n        }\n      }\n    }\n  }\n}\nAccording to your input, you will receive an output like this:\n{\n  &quot;data&quot;: {\n    &quot;entityUpdated&quot;: {\n      &quot;id&quot;: &quot;0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20&quot;,\n      &quot;keys&quot;: [\n        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;\n      ],\n      &quot;eventId&quot;: &quot;0x0000000000000000000000000000000000000000000000000000000000000013:0x0000:0x0000&quot;,\n      &quot;createdAt&quot;: &quot;2023-10-17 11:39:42&quot;,\n      &quot;updatedAt&quot;: &quot;2023-10-17 11:52:48&quot;,\n      &quot;models&quot;: [\n        {\n          &quot;__typename&quot;: &quot;Moves&quot;,\n          &quot;remaining&quot;: 10,\n          &quot;player&quot;: &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;\n        },\n        {\n          &quot;__typename&quot;: &quot;Position&quot;,\n          &quot;vec&quot;: {\n            &quot;x&quot;: 10,\n            &quot;y&quot;: 10\n          }\n        }\n      ]\n    }\n  }\n}\n","title":"Subscription operations","titles":[null,"Torii - GraphQL"]},"183":{"href":"/toolchain/torii/graphql#susbcription-to-events","html":"\n<p>A valuable approach for harnessing the power of GraphQL is by actively monitoring the events emitted throughout your game. This allows you to extract essential information such as key values, data, and transaction hashes. These events are customizable and can be filtered based on keys, much like <code>entities query</code>, and they seamlessly support pagination. In the subsequent example, we will demonstrate how to listen for any event emitted within your program.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"graphql\" data-theme=\"github-dark-dimmed\"><code data-language=\"graphql\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#DCBDFB\">subscription</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  eventEmitted</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    id</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    keys</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    data</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    transactionHash</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>If you execute this suscription after you applied <code>sozo execute &lt;ACTION_CONTRACT_ADDRESS&gt; spawn</code> in your <a href=\"/cairo/hello-dojo.md\"><code>hello-dojo</code></a> example. You will get an output similar to this.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"json\" data-theme=\"github-dark-dimmed\"><code data-language=\"json\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;eventEmitted&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0000&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;keys&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x1a2f334228cee715f1f0f54053bb6b5eac54fa336e0bc1aacf7516decb0471d&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;data&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x4d6f766573&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x0&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x64&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x0&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;transactionHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x3b7b034a087355c996abb52e363932c1135f8dd49587bc9a05902d3cf0650b&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">-----------------------------------------------------------------------------------------------</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">{</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">  &quot;data&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">    &quot;eventEmitted&quot;</span><span style=\"color:#ADBAC7\">: {</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;id&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0001&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;keys&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x1a2f334228cee715f1f0f54053bb6b5eac54fa336e0bc1aacf7516decb0471d&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;data&quot;</span><span style=\"color:#ADBAC7\">: [</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x506f736974696f6e&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x1&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x0&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0x2&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0xa&quot;</span><span style=\"color:#ADBAC7\">,</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">        &quot;0xa&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">      ],</span></span>\n<span data-line=\"\"><span style=\"color:#8DDB8C\">      &quot;transactionHash&quot;</span><span style=\"color:#ADBAC7\">: </span><span style=\"color:#96D0FF\">&quot;0x3b7b034a087355c996abb52e363932c1135f8dd49587bc9a05902d3cf0650b&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">  }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>","isPage":false,"text":"\nA valuable approach for harnessing the power of GraphQL is by actively monitoring the events emitted throughout your game. This allows you to extract essential information such as key values, data, and transaction hashes. These events are customizable and can be filtered based on keys, much like entities query, and they seamlessly support pagination. In the subsequent example, we will demonstrate how to listen for any event emitted within your program.\nsubscription {\n  eventEmitted {\n    id\n    keys\n    data\n    transactionHash\n  }\n}\nIf you execute this suscription after you applied sozo execute &lt;ACTION_CONTRACT_ADDRESS&gt; spawn in your hello-dojo example. You will get an output similar to this.\n{\n  &quot;data&quot;: {\n    &quot;eventEmitted&quot;: {\n      &quot;id&quot;: &quot;0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0000&quot;,\n      &quot;keys&quot;: [\n        &quot;0x1a2f334228cee715f1f0f54053bb6b5eac54fa336e0bc1aacf7516decb0471d&quot;\n      ],\n      &quot;data&quot;: [\n        &quot;0x4d6f766573&quot;,\n        &quot;0x1&quot;,\n        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;,\n        &quot;0x0&quot;,\n        &quot;0x2&quot;,\n        &quot;0x64&quot;,\n        &quot;0x0&quot;\n      ],\n      &quot;transactionHash&quot;: &quot;0x3b7b034a087355c996abb52e363932c1135f8dd49587bc9a05902d3cf0650b&quot;\n    }\n  }\n}\n-----------------------------------------------------------------------------------------------\n{\n  &quot;data&quot;: {\n    &quot;eventEmitted&quot;: {\n      &quot;id&quot;: &quot;0x000000000000000000000000000000000000000000000000000000000000000b:0x0000:0x0001&quot;,\n      &quot;keys&quot;: [\n        &quot;0x1a2f334228cee715f1f0f54053bb6b5eac54fa336e0bc1aacf7516decb0471d&quot;\n      ],\n      &quot;data&quot;: [\n        &quot;0x506f736974696f6e&quot;,\n        &quot;0x1&quot;,\n        &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;,\n        &quot;0x0&quot;,\n        &quot;0x2&quot;,\n        &quot;0xa&quot;,\n        &quot;0xa&quot;\n      ],\n      &quot;transactionHash&quot;: &quot;0x3b7b034a087355c996abb52e363932c1135f8dd49587bc9a05902d3cf0650b&quot;\n    }\n  }\n}","title":"Susbcription to events","titles":[null,"Torii - GraphQL","Subscription operations"]},"184":{"href":"/toolchain/torii/grpc#grpc","html":"\n<p><em>TL;DR</em></p>\n<ul>\n<li>gRPC is an efficient way to fetch your data</li>\n<li>You can subscribe to entity and model events via the gRPC</li>\n<li>Read more - <a href=\"https://grpc.io/docs/what-is-grpc/introduction/\">gRPC</a></li>\n</ul>\n<p>You can use the gRPC directly or you can use it through a developed client. A great way to use it is via <a href=\"/client/dojojs.md\">dojo.js</a> torii-client package.</p>","isPage":true,"text":"\nTL;DR\n\ngRPC is an efficient way to fetch your data\nYou can subscribe to entity and model events via the gRPC\nRead more - gRPC\n\nYou can use the gRPC directly or you can use it through a developed client. A great way to use it is via dojo.js torii-client package.","title":"gRPC","titles":[null]},"185":{"href":"/toolchain/torii/overview#torii","html":"\n<p>Torii is an automatic indexer and client for dojo worlds. Built in rust to be blazingly fast and exceptionally scalable. Torii provides a fully typed, dynamically generated GraphqQL interface and a high performance gRPC api for binding clients to the world state. There are two parts to torii, the client and the server.</p>\n","isPage":true,"text":"\nTorii is an automatic indexer and client for dojo worlds. Built in rust to be blazingly fast and exceptionally scalable. Torii provides a fully typed, dynamically generated GraphqQL interface and a high performance gRPC api for binding clients to the world state. There are two parts to torii, the client and the server.\n","title":"Torii","titles":[null]},"186":{"href":"/toolchain/torii/overview#torii-server","html":"\n<p>The torii server comprises of the rust backend that exposes the graphql and gRPC endpoints.</p>\n","isPage":false,"text":"\nThe torii server comprises of the rust backend that exposes the graphql and gRPC endpoints.\n","title":"Torii Server","titles":[null,"Torii"]},"187":{"href":"/toolchain/torii/overview#torii-client","html":"\n<p>Torii client interfaces with the server to provide an easy to use api for your clients:</p>\n<ul>\n<li><a href=\"/client/dojojs.md#dojoenginetorii-wasm\">wasm</a></li>\n<li><a href=\"/client/sdk/unity.md\">unity</a></li>\n<li><a href=\"/client/sdk/unity.md\">c</a></li>\n</ul>\n","isPage":false,"text":"\nTorii client interfaces with the server to provide an easy to use api for your clients:\n\nwasm\nunity\nc\n\n","title":"Torii Client","titles":[null,"Torii"]},"188":{"href":"/toolchain/torii/overview#usage","html":"\n<p>Torii leverages world introspection to bootstrap directly from an onchain deployment. Simply run:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">torii</span><span style=\"color:#6CB6FF\"> --world</span><span style=\"color:#F47067\"> &lt;</span><span style=\"color:#96D0FF\">World Addres</span><span style=\"color:#ADBAC7\">s</span><span style=\"color:#F47067\">&gt;</span></span></code></pre></figure>\n<p>You&#x27;ll have a GraphQL API running at <code>http://localhost:8080/graphql</code> and a gRPC api at <code>http://localhost:8080</code></p>\n","isPage":false,"text":"\nTorii leverages world introspection to bootstrap directly from an onchain deployment. Simply run:\ntorii --world &lt;World Address&gt;\nYou&#x27;ll have a GraphQL API running at http://localhost:8080/graphql and a gRPC api at http://localhost:8080\n","title":"Usage","titles":[null,"Torii"]},"189":{"href":"/toolchain/torii/overview#installation","html":"\n<p>The <code>torii</code> binary can be installed via <a href=\"/getting-started/quick-start.md\"><code>dojoup</code></a>, our dedicated installation package manager.</p>\n","isPage":false,"text":"\nThe torii binary can be installed via dojoup, our dedicated installation package manager.\n","title":"Installation","titles":[null]},"190":{"href":"/toolchain/torii/overview#installing-from-source","html":"\n<p>If you prefer to install from the source code:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">cargo</span><span style=\"color:#96D0FF\"> install --path ./crates/torii --profile local --force</span></span></code></pre></figure>\n<p>This will install Torii and the required dependencies on your local system.</p>\n<blockquote>\n<p>📚 <strong>Reference</strong></p>\n<p>See the <a href=\"/toolchain/torii/reference.md\"><code>torii</code> Reference</a> for a complete reference.</p>\n</blockquote>","isPage":false,"text":"\nIf you prefer to install from the source code:\ncargo install --path ./crates/torii --profile local --force\nThis will install Torii and the required dependencies on your local system.\n\n📚 Reference\nSee the torii Reference for a complete reference.\n","title":"Installing from Source","titles":[null,"Installation"]},"191":{"href":"/toolchain/torii/reference#torii-reference","html":"\n","isPage":true,"text":"\n","title":"torii reference","titles":[null]},"192":{"href":"/toolchain/torii/reference#name","html":"\n<p>torii - An automatic indexer and networking layer for a world contract.</p>\n","isPage":false,"text":"\ntorii - An automatic indexer and networking layer for a world contract.\n","title":"Name","titles":[null,"torii reference"]},"193":{"href":"/toolchain/torii/reference#usage","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">torii</span><span style=\"color:#ADBAC7\"> [OPTIONS]</span></span></code></pre></figure>\n","isPage":false,"text":"\ntorii [OPTIONS]\n","title":"USAGE","titles":[null,"torii reference"]},"194":{"href":"/toolchain/torii/reference#description","html":"\n<p><code>torii</code> starts the indexer and exposes GraphQL/gRPC API endpoints. The indexer queries the specified Starknet RPC endpoint for transaction blocks and listens for transactions related to the world contract. These transactions can include component/system registrations, entity state updates, system calls, and events. The parsed data is then stored in a local SQLite database.</p>\n<p>The GraphQL and gRPC API endpoints run in tandem with the indexer, providing custom queries specific to the world contract for client applications.</p>\n","isPage":false,"text":"\ntorii starts the indexer and exposes GraphQL/gRPC API endpoints. The indexer queries the specified Starknet RPC endpoint for transaction blocks and listens for transactions related to the world contract. These transactions can include component/system registrations, entity state updates, system calls, and events. The parsed data is then stored in a local SQLite database.\nThe GraphQL and gRPC API endpoints run in tandem with the indexer, providing custom queries specific to the world contract for client applications.\n","title":"DESCRIPTION","titles":[null,"torii reference"]},"195":{"href":"/toolchain/torii/reference#database-url","html":"\n<p><code>torii</code> uses a sqlite database to store indexed data. The database can be stored either in-memory or persistently on the filesystem.</p>\n<ul>\n<li>The in-memory database is ephemeral and only lasts as long as the indexer is running. This is a fast and simple option to start the indexer for development/testing.</li>\n<li>Persistent storage should be used in production. It relies on the local filesystem for storage.</li>\n</ul>\n<p>Note: If using in-memory db, the memory will be garbage collected after a period of inactivity, causing queries to result in errors. Workaround is to use a persistent database.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># Persistent database storage using file indexer.db</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">torii</span><span style=\"color:#6CB6FF\"> --database</span><span style=\"color:#96D0FF\"> indexer.db</span></span></code></pre></figure>\n","isPage":false,"text":"\ntorii uses a sqlite database to store indexed data. The database can be stored either in-memory or persistently on the filesystem.\n\nThe in-memory database is ephemeral and only lasts as long as the indexer is running. This is a fast and simple option to start the indexer for development/testing.\nPersistent storage should be used in production. It relies on the local filesystem for storage.\n\nNote: If using in-memory db, the memory will be garbage collected after a period of inactivity, causing queries to result in errors. Workaround is to use a persistent database.\n# Persistent database storage using file indexer.db\ntorii --database indexer.db\n","title":"Database URL","titles":[null,"torii reference","DESCRIPTION"]},"196":{"href":"/toolchain/torii/reference#options","html":"\n","isPage":false,"text":"\n","title":"OPTIONS","titles":[null,"torii reference"]},"197":{"href":"/toolchain/torii/reference#general-options","html":"\n<p><code>-w, --world</code><br/>\n     Address of the world contract to index</p>\n<p><code>--rpc</code><br/>\n     Starknet RPC endpoint to use [default: http//localhost:5050]</p>\n<p><code>-d, --database &lt;DATABASE&gt;</code><br/>\n     Database filepath (ex: indexer.db) [default: :memory:]</p>\n<p><code>-s, --start-block &lt;START_BLOCK&gt;</code><br/>\n     Specify a block to start indexing from, ignored if stored head exists [default: 0]</p>\n<p><code>--allowed-origins &lt;ALLOWED_ORIGINS&gt;</code><br/>\n     Specify allowed origins for api endpoints (comma-separated list of allowed origins, or &quot;*&quot; for all) [default: *]</p>\n<p><code>--external-url &lt;EXTERNAL_URL&gt;</code><br/>\n     The external url of the server, used for configuring the GraphQL Playground in a hosted environment</p>\n<p><code>-h, --help</code>\n     Print help</p>\n<p><code>-V, --version</code>\n     Print version</p>","isPage":false,"text":"\n-w, --world\n     Address of the world contract to index\n--rpc\n     Starknet RPC endpoint to use [default: http//localhost:5050]\n-d, --database &lt;DATABASE&gt;\n     Database filepath (ex: indexer.db) [default: :memory:]\n-s, --start-block &lt;START_BLOCK&gt;\n     Specify a block to start indexing from, ignored if stored head exists [default: 0]\n--allowed-origins &lt;ALLOWED_ORIGINS&gt;\n     Specify allowed origins for api endpoints (comma-separated list of allowed origins, or &quot;*&quot; for all) [default: *]\n--external-url &lt;EXTERNAL_URL&gt;\n     The external url of the server, used for configuring the GraphQL Playground in a hosted environment\n-h, --help\n     Print help\n-V, --version\n     Print version","title":"General Options","titles":[null,"torii reference","OPTIONS"]},"198":{"href":"/tutorial/deploy-using-slot/main#deploy-your-game-using-slot","html":"</header>\n<p>Welcome to this tutorial where we&#x27;ll guide you through deploying a project using the Slot.</p>\n<hr/>\n<p>Before we start, make sure you are using the latest dojo version. Run <code>dojoup</code> to have the latest version installed.</p>\n<p>Now, let&#x27;s create a new folder and initialize it with sozo.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">mkdir</span><span style=\"color:#96D0FF\"> dojo-starter </span><span style=\"color:#ADBAC7\">&amp;&amp; </span><span style=\"color:#6CB6FF\">cd</span><span style=\"color:#96D0FF\"> dojo-starter</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> init</span></span></code></pre></figure>\n<p>First, we need to set up our configuration, starting by authenticating with Cartridge. To do this, run the following command, which will then prompt a new screen where you will need to go through the authentication process.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">slot</span><span style=\"color:#96D0FF\"> auth login</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\"># Slot Auth debug (if old auth credentials):</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">rm</span><span style=\"color:#96D0FF\"> ~/Library/Application</span><span style=\"color:#F47067\">\\ </span><span style=\"color:#96D0FF\">Support/slot/credentials.json</span></span></code></pre></figure>\n<p>Once successful, you can create a new deployment with a unique <code>DEPLOYMENT_NAME</code>. To do this, run the following command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">slot</span><span style=\"color:#96D0FF\"> deployments create DEPLOYMENT_NAME katana</span></span></code></pre></figure>\n<p>After that, you should receive the RPC endpoint for the katana slot. Now, you can use that and update your <code>Scarb.toml</code> file with the new RPC endpoint as follows:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">tool</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">env</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">rpc_url = </span><span style=\"color:#96D0FF\">&quot;YOUR_NEW_RPC_URL&quot;</span></span></code></pre></figure>\n<p>Now, you can stream katana in a new terminal. Open a new terminal and run the following command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">slot</span><span style=\"color:#96D0FF\"> deployments logs DEPLOYMENT_NAME katana -f</span></span></code></pre></figure>\n<p>Then, copy the account address and the private key from the first account into the <code>Scarb.toml</code> file and replace the existing ones as follows:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">account_address = </span><span style=\"color:#96D0FF\">&quot;YOUR_NEW_ACCOUNT_ADDRESS&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">private_key = </span><span style=\"color:#96D0FF\">&quot;YOUR_NEW_PRIVATE_KEY&quot;</span></span></code></pre></figure>\n<p>Note: For each new Katana slot, a different account seed is used, making all the accounts unique!</p>\n<hr/>\n<p>Once finished with the new configurations, we are ready to build and migrate the project. To build the project, run the following command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>\n<p>Now, let&#x27;s migrate the project to our new katana slot:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> migrate --name YOUR_PROJECT_NAME</span></span></code></pre></figure>\n<p>If the migrations have been successful, you will receive the <code>WORLD_ADDRESS</code>, which then you can use to interact with your world.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">🎉</span><span style=\"color:#96D0FF\"> Successfully migrated World at address WORLD_ADDRESS</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">✨</span><span style=\"color:#96D0FF\"> Updating manifest.json...</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#F69D50\">✨</span><span style=\"color:#96D0FF\"> Done.</span></span>\n<span data-line=\"\"> </span></code></pre></figure>\n<p>Congratulations! You have successfully deployed your project with a Katana slot.</p>\n","isPage":true,"text":"\nWelcome to this tutorial where we&#x27;ll guide you through deploying a project using the Slot.\n\nBefore we start, make sure you are using the latest dojo version. Run dojoup to have the latest version installed.\nNow, let&#x27;s create a new folder and initialize it with sozo.\nmkdir dojo-starter &amp;&amp; cd dojo-starter\nsozo init\nFirst, we need to set up our configuration, starting by authenticating with Cartridge. To do this, run the following command, which will then prompt a new screen where you will need to go through the authentication process.\nslot auth login\n \n# Slot Auth debug (if old auth credentials):\nrm ~/Library/Application\\ Support/slot/credentials.json\nOnce successful, you can create a new deployment with a unique DEPLOYMENT_NAME. To do this, run the following command:\nslot deployments create DEPLOYMENT_NAME katana\nAfter that, you should receive the RPC endpoint for the katana slot. Now, you can use that and update your Scarb.toml file with the new RPC endpoint as follows:\n[tool.dojo.env]\nrpc_url = &quot;YOUR_NEW_RPC_URL&quot;\nNow, you can stream katana in a new terminal. Open a new terminal and run the following command:\nslot deployments logs DEPLOYMENT_NAME katana -f\nThen, copy the account address and the private key from the first account into the Scarb.toml file and replace the existing ones as follows:\naccount_address = &quot;YOUR_NEW_ACCOUNT_ADDRESS&quot;\nprivate_key = &quot;YOUR_NEW_PRIVATE_KEY&quot;\nNote: For each new Katana slot, a different account seed is used, making all the accounts unique!\n\nOnce finished with the new configurations, we are ready to build and migrate the project. To build the project, run the following command:\nsozo build\nNow, let&#x27;s migrate the project to our new katana slot:\nsozo migrate --name YOUR_PROJECT_NAME\nIf the migrations have been successful, you will receive the WORLD_ADDRESS, which then you can use to interact with your world.\n🎉 Successfully migrated World at address WORLD_ADDRESS\n \n✨ Updating manifest.json...\n \n✨ Done.\n \nCongratulations! You have successfully deployed your project with a Katana slot.\n","title":"Deploy your game using Slot","titles":[]},"199":{"href":"/tutorial/deploy-using-slot/main#torii","html":"\n<p>To initiate a Torri indexer slot, execute the following command:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">slot</span><span style=\"color:#96D0FF\"> deployments create DEPLOYMENT_NAME torii --world YOUR_WORLD_ADDRESS --rpc YOUR_NEW_RPC_URL --start-block </span><span style=\"color:#6CB6FF\">1</span></span></code></pre></figure>\n<p>Once deployment is successful, you should receive the endpoints for GraphQL and gRPC.</p>\n<p>If you wish to stream the logs, you can run the following command in a new terminal:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">slot</span><span style=\"color:#96D0FF\"> deployments logs DEPLOYMENT_NAME torii -f</span></span></code></pre></figure>","isPage":false,"text":"\nTo initiate a Torri indexer slot, execute the following command:\nslot deployments create DEPLOYMENT_NAME torii --world YOUR_WORLD_ADDRESS --rpc YOUR_NEW_RPC_URL --start-block 1\nOnce deployment is successful, you should receive the endpoints for GraphQL and gRPC.\nIf you wish to stream the logs, you can run the following command in a new terminal:\nslot deployments logs DEPLOYMENT_NAME torii -f","title":"Torii","titles":["Deploy your game using Slot"]},"200":{"href":"/tutorial/onchain-chess/0-setup#0-setup","html":"</header>\n<p><em>Before starting recommend following the <a href=\"/cairo/hello-dojo.md\"><code>hello-dojo</code></a> chapter to gain a basic understanding of the Dojo game.</em></p>\n","isPage":true,"text":"\nBefore starting recommend following the hello-dojo chapter to gain a basic understanding of the Dojo game.\n","title":"0. Setup","titles":[]},"201":{"href":"/tutorial/onchain-chess/0-setup#initializing-the-project","html":"\n<p>Create a new Dojo project folder. You can name your project what you want.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">mkdir</span><span style=\"color:#96D0FF\"> chess</span></span></code></pre></figure>\n<p>Open the project folder.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#6CB6FF\">cd</span><span style=\"color:#96D0FF\"> chess</span></span></code></pre></figure>\n<p>And initialize the project using sozo init.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> init</span></span></code></pre></figure>\n","isPage":false,"text":"\nCreate a new Dojo project folder. You can name your project what you want.\nmkdir chess\nOpen the project folder.\ncd chess\nAnd initialize the project using sozo init.\nsozo init\n","title":"Initializing the Project","titles":["0. Setup"]},"202":{"href":"/tutorial/onchain-chess/0-setup#cleaning-up-the-boilerplate","html":"\n<p>The project comes with a lot of boilerplate codes. Clear it all. Make sure your directory looks like this</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"shell\" data-theme=\"github-dark-dimmed\"><code data-language=\"shell\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">├──</span><span style=\"color:#96D0FF\"> README.md</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">├──</span><span style=\"color:#96D0FF\"> Scarb.toml</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">└──</span><span style=\"color:#96D0FF\"> src</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    ├──</span><span style=\"color:#96D0FF\"> actions.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    ├──</span><span style=\"color:#96D0FF\"> lib.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    ├──</span><span style=\"color:#96D0FF\"> models</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    │</span><span style=\"color:#96D0FF\">   ├── game.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    │</span><span style=\"color:#96D0FF\">   ├── piece.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    │</span><span style=\"color:#96D0FF\">   └── player.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    ├──</span><span style=\"color:#96D0FF\"> models.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    ├──</span><span style=\"color:#96D0FF\"> tests</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    │</span><span style=\"color:#96D0FF\">   ├── integration.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    │</span><span style=\"color:#96D0FF\">   └── units.cairo</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">    └──</span><span style=\"color:#96D0FF\"> tests.cairo</span></span></code></pre></figure>\n<p>Remodel your <code>lib.cairo</code>, to look like this :</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>mod actions;</span></span>\n<span data-line=\"\"><span>mod models;</span></span>\n<span data-line=\"\"><span>mod tests;</span></span></code></pre></figure>\n<p>Remodel your <code>models.cairo</code>, to look like this :</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>mod game;</span></span>\n<span data-line=\"\"><span>mod piece;</span></span>\n<span data-line=\"\"><span>mod player;</span></span></code></pre></figure>\n<p>Remodel your <code>tests.cairo</code>, to look like this :</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>mod integration;</span></span>\n<span data-line=\"\"><span>mod units;</span></span></code></pre></figure>\n<p>Make sure your <code>Scarb.toml</code> looks like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"toml\" data-theme=\"github-dark-dimmed\"><code data-language=\"toml\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">package</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">cairo-version = </span><span style=\"color:#96D0FF\">&quot;2.4.0&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">name = </span><span style=\"color:#96D0FF\">&quot;chess&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">version = </span><span style=\"color:#96D0FF\">&quot;0.4.0&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">cairo</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">sierra-replace-ids = </span><span style=\"color:#6CB6FF\">true</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">dependencies</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">dojo = { git = </span><span style=\"color:#96D0FF\">&quot;https://github.com/dojoengine/dojo&quot;</span><span style=\"color:#ADBAC7\">, version = </span><span style=\"color:#96D0FF\">&quot;0.4.2&quot;</span><span style=\"color:#ADBAC7\"> }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[[</span><span style=\"color:#F69D50\">target</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">]]</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">tool</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">initializer_class_hash = </span><span style=\"color:#96D0FF\">&quot;0xbeef&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[</span><span style=\"color:#F69D50\">tool</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">dojo</span><span style=\"color:#ADBAC7\">.</span><span style=\"color:#F69D50\">env</span><span style=\"color:#ADBAC7\">]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">rpc_url = </span><span style=\"color:#96D0FF\">&quot;http://localhost:5050/&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># Default account for katana with seed = 0</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">account_address = </span><span style=\"color:#96D0FF\">&quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">private_key = </span><span style=\"color:#96D0FF\">&quot;0x1800000000300000180000000000030000000000003006001800006600&quot;</span></span>\n<span data-line=\"\"> </span></code></pre></figure>\n<p>Compile your project with:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>\n","isPage":false,"text":"\nThe project comes with a lot of boilerplate codes. Clear it all. Make sure your directory looks like this\n├── README.md\n├── Scarb.toml\n└── src\n    ├── actions.cairo\n    ├── lib.cairo\n    ├── models\n    │   ├── game.cairo\n    │   ├── piece.cairo\n    │   └── player.cairo\n    ├── models.cairo\n    ├── tests\n    │   ├── integration.cairo\n    │   └── units.cairo\n    └── tests.cairo\nRemodel your lib.cairo, to look like this :\nmod actions;\nmod models;\nmod tests;\nRemodel your models.cairo, to look like this :\nmod game;\nmod piece;\nmod player;\nRemodel your tests.cairo, to look like this :\nmod integration;\nmod units;\nMake sure your Scarb.toml looks like this:\n[package]\ncairo-version = &quot;2.4.0&quot;\nname = &quot;chess&quot;\nversion = &quot;0.4.0&quot;\n \n[cairo]\nsierra-replace-ids = true\n \n[dependencies]\ndojo = { git = &quot;https://github.com/dojoengine/dojo&quot;, version = &quot;0.4.2&quot; }\n \n[[target.dojo]]\n \n[tool.dojo]\ninitializer_class_hash = &quot;0xbeef&quot;\n \n[tool.dojo.env]\nrpc_url = &quot;http://localhost:5050/&quot;\n# Default account for katana with seed = 0\naccount_address = &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;\nprivate_key = &quot;0x1800000000300000180000000000030000000000003006001800006600&quot;\n \nCompile your project with:\nsozo build\n","title":"Cleaning Up the Boilerplate","titles":["0. Setup"]},"203":{"href":"/tutorial/onchain-chess/0-setup#basic-models","html":"\n<p>While there are many ways to design a chess game using the ECS model, we&#x27;ll follow this approach:</p>\n<blockquote>\n<p>Every square of the chess board (e.g., A1) will be treated as an entity. If a piece exists on a square position, that position will hold that piece.</p>\n</blockquote>\n<p>First, add this basic <code>player</code> model to <code>models/player.cairo</code> file. If you are not familar with model syntax in Dojo engine, go back to this <a href=\"/cairo/models.md\">chapter</a>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>use starknet::ContractAddress;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(Model, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Player {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    game_id: u32,</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    address: ContractAddress,</span></span>\n<span data-line=\"\"><span>    color: Color</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(Serde, Drop, Copy, PartialEq, Introspect)]</span></span>\n<span data-line=\"\"><span>enum Color {</span></span>\n<span data-line=\"\"><span>    White,</span></span>\n<span data-line=\"\"><span>    Black,</span></span>\n<span data-line=\"\"><span>    None,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>Second, we do the same for <code>game</code> model. Edit your <code>models/player.cairo</code> file and add this content.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>use chess::models::player::Color;</span></span>\n<span data-line=\"\"><span>use starknet::ContractAddress;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(Model, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Game {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    game_id: u32,</span></span>\n<span data-line=\"\"><span>    winner: Color,</span></span>\n<span data-line=\"\"><span>    white: ContractAddress,</span></span>\n<span data-line=\"\"><span>    black: ContractAddress</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(Model, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct GameTurn {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    game_id: u32,</span></span>\n<span data-line=\"\"><span>    player_color: Color</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>Lastly we create <code>piece</code> model in our <code>models/player.cairo</code> file.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>use chess::models::player::Color;</span></span>\n<span data-line=\"\"><span>use starknet::ContractAddress;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(Model, Drop, Serde)]</span></span>\n<span data-line=\"\"><span>struct Piece {</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    game_id: u32,</span></span>\n<span data-line=\"\"><span>    #[key]</span></span>\n<span data-line=\"\"><span>    position: Vec2,</span></span>\n<span data-line=\"\"><span>    color: Color,</span></span>\n<span data-line=\"\"><span>    piece_type: PieceType,</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(Copy, Drop, Serde, Introspect)]</span></span>\n<span data-line=\"\"><span>struct Vec2 {</span></span>\n<span data-line=\"\"><span>    x: u32,</span></span>\n<span data-line=\"\"><span>    y: u32</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>#[derive(Serde, Drop, Copy, PartialEq, Introspect)]</span></span>\n<span data-line=\"\"><span>enum PieceType {</span></span>\n<span data-line=\"\"><span>    Pawn,</span></span>\n<span data-line=\"\"><span>    Knight,</span></span>\n<span data-line=\"\"><span>    Bishop,</span></span>\n<span data-line=\"\"><span>    Rook,</span></span>\n<span data-line=\"\"><span>    Queen,</span></span>\n<span data-line=\"\"><span>    King,</span></span>\n<span data-line=\"\"><span>    None,</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n","isPage":false,"text":"\nWhile there are many ways to design a chess game using the ECS model, we&#x27;ll follow this approach:\n\nEvery square of the chess board (e.g., A1) will be treated as an entity. If a piece exists on a square position, that position will hold that piece.\n\nFirst, add this basic player model to models/player.cairo file. If you are not familar with model syntax in Dojo engine, go back to this chapter.\nuse starknet::ContractAddress;\n \n#[derive(Model, Drop, Serde)]\nstruct Player {\n    #[key]\n    game_id: u32,\n    #[key]\n    address: ContractAddress,\n    color: Color\n}\n \n#[derive(Serde, Drop, Copy, PartialEq, Introspect)]\nenum Color {\n    White,\n    Black,\n    None,\n}\nSecond, we do the same for game model. Edit your models/player.cairo file and add this content.\nuse chess::models::player::Color;\nuse starknet::ContractAddress;\n \n#[derive(Model, Drop, Serde)]\nstruct Game {\n    #[key]\n    game_id: u32,\n    winner: Color,\n    white: ContractAddress,\n    black: ContractAddress\n}\n \n#[derive(Model, Drop, Serde)]\nstruct GameTurn {\n    #[key]\n    game_id: u32,\n    player_color: Color\n}\nLastly we create piece model in our models/player.cairo file.\nuse chess::models::player::Color;\nuse starknet::ContractAddress;\n \n#[derive(Model, Drop, Serde)]\nstruct Piece {\n    #[key]\n    game_id: u32,\n    #[key]\n    position: Vec2,\n    color: Color,\n    piece_type: PieceType,\n}\n \n#[derive(Copy, Drop, Serde, Introspect)]\nstruct Vec2 {\n    x: u32,\n    y: u32\n}\n \n#[derive(Serde, Drop, Copy, PartialEq, Introspect)]\nenum PieceType {\n    Pawn,\n    Knight,\n    Bishop,\n    Rook,\n    Queen,\n    King,\n    None,\n}\n","title":"Basic Models","titles":["0. Setup"]},"204":{"href":"/tutorial/onchain-chess/0-setup#basic-systems","html":"\n<p>Starting from the next chapter, you will implement the <code>actions.cairo</code> file. This is where our game logic/contract will reside.</p>\n<p>For now, <code>actions.cairo</code> should look like this:</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>#[dojo::contract]</span></span>\n<span data-line=\"\"><span>mod actions {</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>It should be noted that Systems function are contract methods, by implication, rather than implementing the game logic in systems, we are implementing it in a contract.</p>\n","isPage":false,"text":"\nStarting from the next chapter, you will implement the actions.cairo file. This is where our game logic/contract will reside.\nFor now, actions.cairo should look like this:\n#[dojo::contract]\nmod actions {\n}\nIt should be noted that Systems function are contract methods, by implication, rather than implementing the game logic in systems, we are implementing it in a contract.\n","title":"Basic systems","titles":["0. Setup"]},"205":{"href":"/tutorial/onchain-chess/0-setup#compile-your-project","html":"\n<p>Now try <code>sozo build</code> to build.</p>\n<p>Complied? Great! then let&#x27;s move on. If not fix the issues, so that you can run the <code>sozo build</code> command successfully.</p>\n","isPage":false,"text":"\nNow try sozo build to build.\nComplied? Great! then let&#x27;s move on. If not fix the issues, so that you can run the sozo build command successfully.\n","title":"Compile your project","titles":["0. Setup"]},"206":{"href":"/tutorial/onchain-chess/0-setup#implement-traits-for-models","html":"\n<p>Before you move on, implement traits for models so we can use them in the next chapter when creating the action contract.</p>\n","isPage":false,"text":"\nBefore you move on, implement traits for models so we can use them in the next chapter when creating the action contract.\n","title":"Implement Traits for models","titles":["0. Setup"]},"207":{"href":"/tutorial/onchain-chess/0-setup#requirements","html":"\n<p>Firt we have to define the following traits for <code>Game</code>, <code>Player</code>, <code>Piece</code> models respectively.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>trait GameTurnTrait {</span></span>\n<span data-line=\"\"><span>    fn next_turn(self: @GameTurn) -&gt; Color;</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>trait PlayerTrait {</span></span>\n<span data-line=\"\"><span>fn is_not_my_piece(self: @Player, piece_color: Color) -&gt; bool;</span></span>\n<span data-line=\"\"><span>}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>trait PieceTrait {</span></span>\n<span data-line=\"\"><span>fn is_out_of_board(next_position: Vec2) -&gt; bool;</span></span>\n<span data-line=\"\"><span>fn is_right_piece_move(self: @Piece, next_position: Vec2) -&gt; bool;</span></span>\n<span data-line=\"\"><span>}</span></span></code></pre></figure>\n<p>Try to implement this code by yourself, Otherwise</p>\n<details><summary>Click to see full <code>models.cairo</code> code</summary><figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"c\" data-theme=\"github-dark-dimmed\"><code data-language=\"c\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">// code for player.cairo file</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">trait PlayerTrait {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">is_not_my_piece</span><span style=\"color:#ADBAC7\">(self: @Player, piece_color: Color) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F47067\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">impl PalyerImpl of PlayerTrait {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">is_not_my_piece</span><span style=\"color:#ADBAC7\">(self: @Player, piece_color: Color) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F47067\"> bool</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">        *</span><span style=\"color:#ADBAC7\">self.color </span><span style=\"color:#F47067\">!=</span><span style=\"color:#ADBAC7\"> piece_color</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// code for game.cairo file</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">trait GameTurnTrait {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">next_turn</span><span style=\"color:#ADBAC7\">(self: @GameTurn) -&gt; Color;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">impl GameTurnImpl of GameTurnTrait {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">next_turn</span><span style=\"color:#ADBAC7\">(self: @GameTurn) -&gt; Color {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        match self.player_color {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            Color::White </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> Color::Black,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            Color::Black </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> Color::White,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            Color::None </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#DCBDFB\"> panic</span><span style=\"color:#ADBAC7\">(array</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">[</span><span style=\"color:#96D0FF\">&#x27;Illegal turn&#x27;</span><span style=\"color:#ADBAC7\">])</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">// code for piece.cairo file</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">trait PieceTrait {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">is_out_of_board</span><span style=\"color:#ADBAC7\">(next_position: Vec2) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F47067\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">is_right_piece_move</span><span style=\"color:#ADBAC7\">(self: @Piece, next_position: Vec2) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F47067\"> bool</span><span style=\"color:#ADBAC7\">;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">impl PieceImpl of PieceTrait {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">is_out_of_board</span><span style=\"color:#ADBAC7\">(next_position: Vec2) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F47067\"> bool</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        next_position.x </span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#6CB6FF\"> 7</span><span style=\"color:#F47067\"> ||</span><span style=\"color:#ADBAC7\"> next_position.y </span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#6CB6FF\"> 7</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">is_right_piece_move</span><span style=\"color:#ADBAC7\">(self: @Piece, next_position: Vec2) </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#F47067\"> bool</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let n_x </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> next_position.x;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let n_y </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> next_position.y;</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y), </span><span style=\"color:#96D0FF\">&#x27;Cannot move same position&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        match self.piece_type {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::Pawn </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                match self.color {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    Color::White </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                            ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 2</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                            ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                            ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    Color::Black </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                        (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                            ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 2</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                            ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                            ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                    Color::None </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#DCBDFB\"> panic</span><span style=\"color:#ADBAC7\">(array</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">[</span><span style=\"color:#96D0FF\">&#x27;Should not move empty piece&#x27;</span><span style=\"color:#ADBAC7\">]),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::Knight </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> { n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 2</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\"> },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::Bishop </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (n_x </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    -</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    -</span><span style=\"color:#ADBAC7\"> n_x)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&gt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                        -</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                        -</span><span style=\"color:#ADBAC7\"> n_x)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">&gt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                        -</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                        -</span><span style=\"color:#ADBAC7\"> n_x)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">&gt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&gt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">&amp;&amp;</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                        -</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                        -</span><span style=\"color:#ADBAC7\"> n_x)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::Rook </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">||</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">||</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::Queen </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (n_x </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">||</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">||</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">==</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">||</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">!=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::King </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                (n_x </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">+</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> (n_x </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.x </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#F47067\"> &amp;&amp;</span><span style=\"color:#ADBAC7\"> n_y </span><span style=\"color:#F47067\">&lt;=</span><span style=\"color:#F47067\"> *</span><span style=\"color:#ADBAC7\">self.position.y </span><span style=\"color:#F47067\">-</span><span style=\"color:#6CB6FF\"> 1</span><span style=\"color:#ADBAC7\">)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            },</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            PieceType::None </span><span style=\"color:#F47067\">=&gt;</span><span style=\"color:#DCBDFB\"> panic</span><span style=\"color:#ADBAC7\">(array</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">[</span><span style=\"color:#96D0FF\">&#x27;Should not move empty piece&#x27;</span><span style=\"color:#ADBAC7\">]),</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure></details>\n<p>This tutorial is extracted from <a href=\"https://github.com/dojoengine/origami/tree/main/examples/chess\">here</a></p>\n<p>Congratulations! You&#x27;ve completed the basic setup for building an on-chain chess game 🎉</p>","isPage":false,"text":"\nFirt we have to define the following traits for Game, Player, Piece models respectively.\ntrait GameTurnTrait {\n    fn next_turn(self: @GameTurn) -&gt; Color;\n}\n \ntrait PlayerTrait {\nfn is_not_my_piece(self: @Player, piece_color: Color) -&gt; bool;\n}\n \ntrait PieceTrait {\nfn is_out_of_board(next_position: Vec2) -&gt; bool;\nfn is_right_piece_move(self: @Piece, next_position: Vec2) -&gt; bool;\n}\nTry to implement this code by yourself, Otherwise\nClick to see full models.cairo code// code for player.cairo file\ntrait PlayerTrait {\n    fn is_not_my_piece(self: @Player, piece_color: Color) -&gt; bool;\n}\n \nimpl PalyerImpl of PlayerTrait {\n    fn is_not_my_piece(self: @Player, piece_color: Color) -&gt; bool {\n        *self.color != piece_color\n    }\n}\n \n// code for game.cairo file\ntrait GameTurnTrait {\n    fn next_turn(self: @GameTurn) -&gt; Color;\n}\nimpl GameTurnImpl of GameTurnTrait {\n    fn next_turn(self: @GameTurn) -&gt; Color {\n        match self.player_color {\n            Color::White =&gt; Color::Black,\n            Color::Black =&gt; Color::White,\n            Color::None =&gt; panic(array![&#x27;Illegal turn&#x27;])\n        }\n    }\n}\n \n// code for piece.cairo file\ntrait PieceTrait {\n    fn is_out_of_board(next_position: Vec2) -&gt; bool;\n    fn is_right_piece_move(self: @Piece, next_position: Vec2) -&gt; bool;\n}\n \nimpl PieceImpl of PieceTrait {\n    fn is_out_of_board(next_position: Vec2) -&gt; bool {\n        next_position.x &gt; 7 || next_position.y &gt; 7\n    }\n \n    fn is_right_piece_move(self: @Piece, next_position: Vec2) -&gt; bool {\n        let n_x = next_position.x;\n        let n_y = next_position.y;\n        assert(!(n_x == *self.position.x &amp;&amp; n_y == *self.position.y), &#x27;Cannot move same position&#x27;);\n        match self.piece_type {\n            PieceType::Pawn =&gt; {\n                match self.color {\n                    Color::White =&gt; {\n                        (n_x == *self.position.x &amp;&amp; n_y == *self.position.y + 1)\n                            || (n_x == *self.position.x &amp;&amp; n_y == *self.position.y + 2)\n                            || (n_x == *self.position.x + 1 &amp;&amp; n_y == *self.position.y + 1)\n                            || (n_x == *self.position.x - 1 &amp;&amp; n_y == *self.position.y + 1)\n                    },\n                    Color::Black =&gt; {\n                        (n_x == *self.position.x &amp;&amp; n_y == *self.position.y - 1)\n                            || (n_x == *self.position.x &amp;&amp; n_y == *self.position.y - 2)\n                            || (n_x == *self.position.x + 1 &amp;&amp; n_y == *self.position.y - 1)\n                            || (n_x == *self.position.x - 1 &amp;&amp; n_y == *self.position.y - 1)\n                    },\n                    Color::None =&gt; panic(array![&#x27;Should not move empty piece&#x27;]),\n                }\n            },\n            PieceType::Knight =&gt; { n_x == *self.position.x + 2 &amp;&amp; n_y == *self.position.y + 1 },\n            PieceType::Bishop =&gt; {\n                (n_x &lt;= *self.position.x &amp;&amp; n_y &lt;= *self.position.y &amp;&amp; *self.position.y\n                    - n_y == *self.position.x\n                    - n_x)\n                    || (n_x &lt;= *self.position.x &amp;&amp; n_y &gt;= *self.position.y &amp;&amp; *self.position.y\n                        - n_y == *self.position.x\n                        - n_x)\n                    || (n_x &gt;= *self.position.x &amp;&amp; n_y &lt;= *self.position.y &amp;&amp; *self.position.y\n                        - n_y == *self.position.x\n                        - n_x)\n                    || (n_x &gt;= *self.position.x &amp;&amp; n_y &gt;= *self.position.y &amp;&amp; *self.position.y\n                        - n_y == *self.position.x\n                        - n_x)\n            },\n            PieceType::Rook =&gt; {\n                (n_x == *self.position.x || n_y != *self.position.y)\n                    || (n_x != *self.position.x || n_y == *self.position.y)\n            },\n            PieceType::Queen =&gt; {\n                (n_x == *self.position.x || n_y != *self.position.y)\n                    || (n_x != *self.position.x || n_y == *self.position.y)\n                    || (n_x != *self.position.x || n_y != *self.position.y)\n            },\n            PieceType::King =&gt; {\n                (n_x &lt;= *self.position.x + 1 &amp;&amp; n_y &lt;= *self.position.y + 1)\n                    || (n_x &lt;= *self.position.x + 1 &amp;&amp; n_y &lt;= *self.position.y - 1)\n                    || (n_x &lt;= *self.position.x - 1 &amp;&amp; n_y &lt;= *self.position.y + 1)\n                    || (n_x &lt;= *self.position.x - 1 &amp;&amp; n_y &lt;= *self.position.y - 1)\n            },\n            PieceType::None =&gt; panic(array![&#x27;Should not move empty piece&#x27;]),\n        }\n    }\n}\nThis tutorial is extracted from here\nCongratulations! You&#x27;ve completed the basic setup for building an on-chain chess game 🎉","title":"Requirements","titles":["0. Setup","Implement Traits for models"]},"208":{"href":"/tutorial/onchain-chess/2-move#2-move-function","html":"</header>\n<ol>\n<li>Write a <code>move</code> function that accepts the <code>current position</code>, <code>next position</code>, <code>caller address</code>, and <code>game_id</code>. The <code>move</code> function should look like this:</li>\n</ol>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"c\" data-theme=\"github-dark-dimmed\"><code data-language=\"c\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">    #[</span><span style=\"color:#DCBDFB\">abi</span><span style=\"color:#ADBAC7\">(embed_v0)]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    impl PlayerActionsImpl of IActions</span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#ADBAC7\">ContractState</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\"> {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        fn </span><span style=\"color:#DCBDFB\">spawn</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            self: @ContractState, white_address: ContractAddress, black_address: ContractAddress</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        ) -&gt; u32 {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Rest of code</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        fn </span><span style=\"color:#DCBDFB\">move</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            self: @ContractState,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            curr_position: Vec2,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            next_position: Vec2,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            caller: ContractAddress,</span><span style=\"color:#768390\"> //player</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            game_id: u32</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        ) {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            let world </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> self.world_dispatcher.</span><span style=\"color:#DCBDFB\">read</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            let mut current_piece </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_id, curr_position), (Piece));</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // check if next_position is out of board or not</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            assert</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F47067\">!</span><span style=\"color:#DCBDFB\">PieceTrait::is_out_of_board</span><span style=\"color:#ADBAC7\">(next_position), </span><span style=\"color:#96D0FF\">&#x27;Should be inside board&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // check if this is the right move for this piece type</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            assert</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                current_piece.</span><span style=\"color:#DCBDFB\">is_right_piece_move</span><span style=\"color:#ADBAC7\">(next_position), </span><span style=\"color:#96D0FF\">&#x27;Illegal move for type of piece&#x27;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            );</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // Get piece data from to next_position in the board</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            let mut next_position_piece </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_id, next_position), (Piece));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            let player </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_id, caller), (Player));</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // check if there is already a piece in next_position</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">            assert</span><span style=\"color:#ADBAC7\">(</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">                next_position_piece.piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> PieceType::None</span></span>\n<span data-line=\"\"><span style=\"color:#F47067\">                    ||</span><span style=\"color:#ADBAC7\"> player.</span><span style=\"color:#DCBDFB\">is_not_my_piece</span><span style=\"color:#ADBAC7\">(next_position_piece.color),</span></span>\n<span data-line=\"\"><span style=\"color:#96D0FF\">                &#x27;Already same color piece exist&#x27;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            );</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            next_position_piece.piece_type </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> current_piece.piece_type;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            next_position_piece.color </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> player.color;</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">            // make current_piece piece none</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            current_piece.piece_type </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> PieceType::None;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            current_piece.color </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> Color::None;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            set</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (next_position_piece));</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            set</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (current_piece));</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">            // change turn</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            let mut game_turn </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, game_id, (GameTurn));</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            game_turn.player_color </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> game_turn.</span><span style=\"color:#DCBDFB\">next_turn</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            set</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_turn));</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span></code></pre></figure>\n<ol start=\"2\">\n<li>\n<p>Run <code>sozo build</code> to compile the code.</p>\n<p>Great, Now we can start testing our functions</p>\n</li>\n</ol>\n","isPage":true,"text":"\n\nWrite a move function that accepts the current position, next position, caller address, and game_id. The move function should look like this:\n\n    #[abi(embed_v0)]\n    impl PlayerActionsImpl of IActions&lt;ContractState&gt; {\n        fn spawn(\n            self: @ContractState, white_address: ContractAddress, black_address: ContractAddress\n        ) -&gt; u32 {\n            // Rest of code\n        }\n        fn move(\n            self: @ContractState,\n            curr_position: Vec2,\n            next_position: Vec2,\n            caller: ContractAddress, //player\n            game_id: u32\n        ) {\n            let world = self.world_dispatcher.read();\n            let mut current_piece = get!(world, (game_id, curr_position), (Piece));\n            // check if next_position is out of board or not\n            assert(!PieceTrait::is_out_of_board(next_position), &#x27;Should be inside board&#x27;);\n \n            // check if this is the right move for this piece type\n            assert(\n                current_piece.is_right_piece_move(next_position), &#x27;Illegal move for type of piece&#x27;\n            );\n            // Get piece data from to next_position in the board\n            let mut next_position_piece = get!(world, (game_id, next_position), (Piece));\n \n            let player = get!(world, (game_id, caller), (Player));\n            // check if there is already a piece in next_position\n            assert(\n                next_position_piece.piece_type == PieceType::None\n                    || player.is_not_my_piece(next_position_piece.color),\n                &#x27;Already same color piece exist&#x27;\n            );\n \n            next_position_piece.piece_type = current_piece.piece_type;\n            next_position_piece.color = player.color;\n            // make current_piece piece none\n            current_piece.piece_type = PieceType::None;\n            current_piece.color = Color::None;\n            set!(world, (next_position_piece));\n            set!(world, (current_piece));\n \n            // change turn\n            let mut game_turn = get!(world, game_id, (GameTurn));\n            game_turn.player_color = game_turn.next_turn();\n            set!(world, (game_turn));\n        }\n    }\n\n\nRun sozo build to compile the code.\nGreat, Now we can start testing our functions\n\n\n","title":"2 Move function","titles":[]},"209":{"href":"/tutorial/onchain-chess/2-move#test-flow","html":"\n<ul>\n<li>Spawn the test world (<code>spawn_test_world</code>) that imports the models in testing.</li>\n<li>Deploy actions contract</li>\n<li>Interact with <code>spawn</code> function in the <code>actions</code> contract by providing white and black player&#x27;s wallet addresses as inputs.</li>\n<li>Retrieve the game entity and piece entity created in <code>actions</code> contract.</li>\n<li>Ensure the game has been correctly created.</li>\n<li>Verify that each <code>Piece</code> is located in the correct position.</li>\n</ul>\n","isPage":false,"text":"\n\nSpawn the test world (spawn_test_world) that imports the models in testing.\nDeploy actions contract\nInteract with spawn function in the actions contract by providing white and black player&#x27;s wallet addresses as inputs.\nRetrieve the game entity and piece entity created in actions contract.\nEnsure the game has been correctly created.\nVerify that each Piece is located in the correct position.\n\n","title":"Test Flow","titles":["2 Move function"]},"210":{"href":"/tutorial/onchain-chess/2-move#unit-tests","html":"\n<ul>\n<li>Copy the test below and add it to your <code>tests/units.cairo</code> file.</li>\n</ul>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"c\" data-theme=\"github-dark-dimmed\"><code data-language=\"c\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">#[</span><span style=\"color:#DCBDFB\">cfg</span><span style=\"color:#ADBAC7\">(test)]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">mod tests {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    use starknet::ContractAddress;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    use dojo::test_utils::{spawn_test_world, deploy_contract};</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    use chess::models::player::{Player, Color, player};</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    use chess::models::piece::{Piece, PieceType, Vec2, piece};</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    use chess::models::game::{Game, GameTurn, game, game_turn};</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    use chess::actions::{actions, IActionsDispatcher, IActionsDispatcherTrait};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">    // helper setup function</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">setup_world</span><span style=\"color:#ADBAC7\">() </span><span style=\"color:#F47067\">-&gt;</span><span style=\"color:#ADBAC7\"> (IWorldDispatcher, IActionsDispatcher) {</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        // models</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let mut models </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> array</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">[</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            game::TEST_CLASS_HASH,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            player::TEST_CLASS_HASH,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            game_turn::TEST_CLASS_HASH,</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            piece::TEST_CLASS_HASH</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        ];</span></span>\n<span data-line=\"\"><span style=\"color:#768390\">        // deploy world with models</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let world </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> spawn_test_world</span><span style=\"color:#ADBAC7\">(models);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        // deploy systems contract</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let contract_address </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> world</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">            .</span><span style=\"color:#DCBDFB\">deploy_contract</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#96D0FF\">&#x27;salt&#x27;</span><span style=\"color:#ADBAC7\">, actions::TEST_CLASS_HASH.</span><span style=\"color:#DCBDFB\">try_into</span><span style=\"color:#ADBAC7\">().</span><span style=\"color:#DCBDFB\">unwrap</span><span style=\"color:#ADBAC7\">());</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let actions_system </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> IActionsDispatcher { contract_address };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        (world, actions_system)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[test]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[</span><span style=\"color:#DCBDFB\">available_gas</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">3000000000000000</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">test_spawn</span><span style=\"color:#ADBAC7\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let white </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> starknet::contract_address_const::</span><span style=\"color:#F47067\">&lt;0x</span><span style=\"color:#6CB6FF\">01</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let black </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> starknet::contract_address_const::</span><span style=\"color:#F47067\">&lt;0x</span><span style=\"color:#6CB6FF\">02</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        let</span><span style=\"color:#ADBAC7\"> (world, actions_system) </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> setup_world</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //system calls</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let game_id </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> actions_system.</span><span style=\"color:#DCBDFB\">spawn</span><span style=\"color:#ADBAC7\">(white, black);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //get game</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let game </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, game_id, (Game));</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let game_turn </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, game_id, (GameTurn));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(game_turn.player_color </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> Color::White, </span><span style=\"color:#96D0FF\">&#x27;should be white turn&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(game.white </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> white, </span><span style=\"color:#96D0FF\">&#x27;white address is incorrect&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(game.black </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> black, </span><span style=\"color:#96D0FF\">&#x27;black address is incorrect&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //get a1 piece</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> Vec2 { x: </span><span style=\"color:#6CB6FF\">0</span><span style=\"color:#ADBAC7\">, y: </span><span style=\"color:#6CB6FF\">0</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let a1 </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_id, curr_pos), (Piece));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(a1.piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> PieceType::Rook, </span><span style=\"color:#96D0FF\">&#x27;should be Rook&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(a1.color </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> Color::White, </span><span style=\"color:#96D0FF\">&#x27;should be white color&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(a1.piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#ADBAC7\"> PieceType::None, </span><span style=\"color:#96D0FF\">&#x27;should have piece&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[test]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[</span><span style=\"color:#DCBDFB\">available_gas</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">3000000000000000</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">test_move</span><span style=\"color:#ADBAC7\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let white </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> starknet::contract_address_const::</span><span style=\"color:#F47067\">&lt;0x</span><span style=\"color:#6CB6FF\">01</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let black </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> starknet::contract_address_const::</span><span style=\"color:#F47067\">&lt;0x</span><span style=\"color:#6CB6FF\">02</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        let</span><span style=\"color:#ADBAC7\"> (world, actions_system) </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> setup_world</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let game_id </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> actions_system.</span><span style=\"color:#DCBDFB\">spawn</span><span style=\"color:#ADBAC7\">(white, black);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> Vec2 { x: </span><span style=\"color:#6CB6FF\">0</span><span style=\"color:#ADBAC7\">, y: </span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let a2 </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_id, curr_pos), (Piece));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(a2.piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> PieceType::Pawn, </span><span style=\"color:#96D0FF\">&#x27;should be Pawn&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(a2.color </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> Color::White, </span><span style=\"color:#96D0FF\">&#x27;should be white color piece 1&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(a2.piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#ADBAC7\"> PieceType::None, </span><span style=\"color:#96D0FF\">&#x27;should have piece&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let next_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> Vec2 { x: </span><span style=\"color:#6CB6FF\">0</span><span style=\"color:#ADBAC7\">, y: </span><span style=\"color:#6CB6FF\">2</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let game_turn </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, game_id, (GameTurn));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(game_turn.player_color </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> Color::White, </span><span style=\"color:#96D0FF\">&#x27;should be white player turn&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        actions_system.</span><span style=\"color:#DCBDFB\">move</span><span style=\"color:#ADBAC7\">(curr_pos, next_pos, white.</span><span style=\"color:#DCBDFB\">into</span><span style=\"color:#ADBAC7\">(), game_id);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> next_pos;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let c3 </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_id, curr_pos), (Piece));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(c3.piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> PieceType::Pawn, </span><span style=\"color:#96D0FF\">&#x27;should be Pawn&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(c3.color </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> Color::White, </span><span style=\"color:#96D0FF\">&#x27;should be white color piece 2&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(c3.piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#ADBAC7\"> PieceType::None, </span><span style=\"color:#96D0FF\">&#x27;should have piece&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let game_turn </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, game_id, (GameTurn));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(game_turn.player_color </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> Color::Black, </span><span style=\"color:#96D0FF\">&#x27;should be black player turn&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n","isPage":false,"text":"\n\nCopy the test below and add it to your tests/units.cairo file.\n\n#[cfg(test)]\nmod tests {\n    use starknet::ContractAddress;\n    use dojo::test_utils::{spawn_test_world, deploy_contract};\n    use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};\n    use chess::models::player::{Player, Color, player};\n    use chess::models::piece::{Piece, PieceType, Vec2, piece};\n    use chess::models::game::{Game, GameTurn, game, game_turn};\n    use chess::actions::{actions, IActionsDispatcher, IActionsDispatcherTrait};\n \n    // helper setup function\n    fn setup_world() -&gt; (IWorldDispatcher, IActionsDispatcher) {\n        // models\n        let mut models = array![\n            game::TEST_CLASS_HASH,\n            player::TEST_CLASS_HASH,\n            game_turn::TEST_CLASS_HASH,\n            piece::TEST_CLASS_HASH\n        ];\n        // deploy world with models\n        let world = spawn_test_world(models);\n \n        // deploy systems contract\n        let contract_address = world\n            .deploy_contract(&#x27;salt&#x27;, actions::TEST_CLASS_HASH.try_into().unwrap());\n        let actions_system = IActionsDispatcher { contract_address };\n \n        (world, actions_system)\n    }\n \n    #[test]\n    #[available_gas(3000000000000000)]\n    fn test_spawn() {\n        let white = starknet::contract_address_const::&lt;0x01&gt;();\n        let black = starknet::contract_address_const::&lt;0x02&gt;();\n        let (world, actions_system) = setup_world();\n \n        //system calls\n        let game_id = actions_system.spawn(white, black);\n \n        //get game\n        let game = get!(world, game_id, (Game));\n        let game_turn = get!(world, game_id, (GameTurn));\n        assert(game_turn.player_color == Color::White, &#x27;should be white turn&#x27;);\n        assert(game.white == white, &#x27;white address is incorrect&#x27;);\n        assert(game.black == black, &#x27;black address is incorrect&#x27;);\n \n        //get a1 piece\n        let curr_pos = Vec2 { x: 0, y: 0 };\n        let a1 = get!(world, (game_id, curr_pos), (Piece));\n        assert(a1.piece_type == PieceType::Rook, &#x27;should be Rook&#x27;);\n        assert(a1.color == Color::White, &#x27;should be white color&#x27;);\n        assert(a1.piece_type != PieceType::None, &#x27;should have piece&#x27;);\n    }\n \n    #[test]\n    #[available_gas(3000000000000000)]\n    fn test_move() {\n        let white = starknet::contract_address_const::&lt;0x01&gt;();\n        let black = starknet::contract_address_const::&lt;0x02&gt;();\n \n        let (world, actions_system) = setup_world();\n        let game_id = actions_system.spawn(white, black);\n        let curr_pos = Vec2 { x: 0, y: 1 };\n        let a2 = get!(world, (game_id, curr_pos), (Piece));\n        assert(a2.piece_type == PieceType::Pawn, &#x27;should be Pawn&#x27;);\n        assert(a2.color == Color::White, &#x27;should be white color piece 1&#x27;);\n        assert(a2.piece_type != PieceType::None, &#x27;should have piece&#x27;);\n \n        let next_pos = Vec2 { x: 0, y: 2 };\n        let game_turn = get!(world, game_id, (GameTurn));\n        assert(game_turn.player_color == Color::White, &#x27;should be white player turn&#x27;);\n        actions_system.move(curr_pos, next_pos, white.into(), game_id);\n \n        let curr_pos = next_pos;\n        let c3 = get!(world, (game_id, curr_pos), (Piece));\n        assert(c3.piece_type == PieceType::Pawn, &#x27;should be Pawn&#x27;);\n        assert(c3.color == Color::White, &#x27;should be white color piece 2&#x27;);\n        assert(c3.piece_type != PieceType::None, &#x27;should have piece&#x27;);\n \n        let game_turn = get!(world, game_id, (GameTurn));\n        assert(game_turn.player_color == Color::Black, &#x27;should be black player turn&#x27;);\n    }\n}\n","title":"Unit Tests","titles":["2 Move function"]},"211":{"href":"/tutorial/onchain-chess/2-move#diving-into-the-code","html":"\n","isPage":false,"text":"\n","title":"Diving into the Code","titles":["2 Move function"]},"212":{"href":"/tutorial/onchain-chess/2-move#setup_world","html":"\n<p>We should list all models with each having CLASS_HASH as elements and then we deploy world to models with <code>spawn_test_world</code></p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>    //models</span></span>\n<span data-line=\"\"><span>    let mut models = array![</span></span>\n<span data-line=\"\"><span>            game::TEST_CLASS_HASH,</span></span>\n<span data-line=\"\"><span>            player::TEST_CLASS_HASH,</span></span>\n<span data-line=\"\"><span>            game_turn::TEST_CLASS_HASH,</span></span>\n<span data-line=\"\"><span>            piece::TEST_CLASS_HASH</span></span>\n<span data-line=\"\"><span>        ];</span></span>\n<span data-line=\"\"><span>    // deploy world with models</span></span>\n<span data-line=\"\"><span>    let world = spawn_test_world(models);</span></span></code></pre></figure>\n<p>After that, we deploy our system contracts, then we return our <code>world</code> and <code>actions_systems</code> dispatchers.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>    let contract_address = world</span></span>\n<span data-line=\"\"><span>        .deploy_contract(&#x27;salt&#x27;, actions::TEST_CLASS_HASH.try_into().unwrap());</span></span>\n<span data-line=\"\"><span>    let actions_system = IActionsDispatcher { contract_address };</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span>    (world, actions_system)</span></span></code></pre></figure>\n","isPage":false,"text":"\nWe should list all models with each having CLASS_HASH as elements and then we deploy world to models with spawn_test_world\n    //models\n    let mut models = array![\n            game::TEST_CLASS_HASH,\n            player::TEST_CLASS_HASH,\n            game_turn::TEST_CLASS_HASH,\n            piece::TEST_CLASS_HASH\n        ];\n    // deploy world with models\n    let world = spawn_test_world(models);\nAfter that, we deploy our system contracts, then we return our world and actions_systems dispatchers.\n    let contract_address = world\n        .deploy_contract(&#x27;salt&#x27;, actions::TEST_CLASS_HASH.try_into().unwrap());\n    let actions_system = IActionsDispatcher { contract_address };\n \n    (world, actions_system)\n","title":"setup_world","titles":["2 Move function","Diving into the Code"]},"213":{"href":"/tutorial/onchain-chess/2-move#test_spawn","html":"\n<p>First, we&#x27;ll set up the players address and their colors.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>    let white = starknet::contract_address_const::&lt;0x01&gt;();</span></span>\n<span data-line=\"\"><span>    let black = starknet::contract_address_const::&lt;0x02&gt;();</span></span></code></pre></figure>\n<p>We use <code>spawn</code> function in <code>actions.cairo</code> to put our pieces on the board. Each square position holds a piece. The system&#x27;s <code>spawn</code> function needs some input i.e the addresses of the players.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>    // spawn</span></span>\n<span data-line=\"\"><span>    let game_id = actions_system.spawn(white, black);</span></span></code></pre></figure>\n<p>Then we check if the players got their setup address. After that we check if a White rook is at (0,0). Remember, to get a piece that exists on the position, you need to use the keys of the <code>Piece</code> model, which are <code>game_id</code>, and <code>curr_pos</code>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"c\" data-theme=\"github-dark-dimmed\"><code data-language=\"c\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\">    //get a1 square</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    let curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> Vec2 { x: </span><span style=\"color:#6CB6FF\">0</span><span style=\"color:#ADBAC7\">, y: </span><span style=\"color:#6CB6FF\">0</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    let a1 </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_id, curr_pos), (Piece));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    assert</span><span style=\"color:#ADBAC7\">(a1.piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> PieceType::Rook, </span><span style=\"color:#96D0FF\">&#x27;should be Rook&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    assert</span><span style=\"color:#ADBAC7\">(a1.color </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> Color::White, </span><span style=\"color:#96D0FF\">&#x27;should be white color&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    assert</span><span style=\"color:#ADBAC7\">(a1.piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#ADBAC7\"> PieceType::None, </span><span style=\"color:#96D0FF\">&#x27;should have piece&#x27;</span><span style=\"color:#ADBAC7\">);</span></span></code></pre></figure>\n","isPage":false,"text":"\nFirst, we&#x27;ll set up the players address and their colors.\n    let white = starknet::contract_address_const::&lt;0x01&gt;();\n    let black = starknet::contract_address_const::&lt;0x02&gt;();\nWe use spawn function in actions.cairo to put our pieces on the board. Each square position holds a piece. The system&#x27;s spawn function needs some input i.e the addresses of the players.\n    // spawn\n    let game_id = actions_system.spawn(white, black);\nThen we check if the players got their setup address. After that we check if a White rook is at (0,0). Remember, to get a piece that exists on the position, you need to use the keys of the Piece model, which are game_id, and curr_pos.\n    //get a1 square\n    let curr_pos = Vec2 { x: 0, y: 0 };\n    let a1 = get!(world, (game_id, curr_pos), (Piece));\n    assert(a1.piece_type == PieceType::Rook, &#x27;should be Rook&#x27;);\n    assert(a1.color == Color::White, &#x27;should be white color&#x27;);\n    assert(a1.piece_type != PieceType::None, &#x27;should have piece&#x27;);\n","title":"test_spawn","titles":["2 Move function","Diving into the Code"]},"214":{"href":"/tutorial/onchain-chess/2-move#test_move","html":"\n<p>Here, after setting up the board, we use <code>move</code> function in the contract to make moves. Provide the current position, the next position, the player&#x27;s address, and the game id.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\"><code data-language=\"rust,ignore\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span>    //Move White Pawn to (0,2)</span></span>\n<span data-line=\"\"><span>    actions_system.move(curr_pos, next_pos, white.into(), game_id);</span></span></code></pre></figure>\n<p>Then we check if a White Pawn is at the new position.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"c\" data-theme=\"github-dark-dimmed\"><code data-language=\"c\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">    let curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> next_pos;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    let c3 </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_id, curr_pos), (Piece));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    assert</span><span style=\"color:#ADBAC7\">(c3.piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> PieceType::Pawn, </span><span style=\"color:#96D0FF\">&#x27;should be Pawn&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    assert</span><span style=\"color:#ADBAC7\">(c3.color </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> Color::White, </span><span style=\"color:#96D0FF\">&#x27;should be white color piece 2&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">    assert</span><span style=\"color:#ADBAC7\">(c3.piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#ADBAC7\"> PieceType::None, </span><span style=\"color:#96D0FF\">&#x27;should have piece&#x27;</span><span style=\"color:#ADBAC7\">);</span></span></code></pre></figure>\n","isPage":false,"text":"\nHere, after setting up the board, we use move function in the contract to make moves. Provide the current position, the next position, the player&#x27;s address, and the game id.\n    //Move White Pawn to (0,2)\n    actions_system.move(curr_pos, next_pos, white.into(), game_id);\nThen we check if a White Pawn is at the new position.\n    let curr_pos = next_pos;\n    let c3 = get!(world, (game_id, curr_pos), (Piece));\n    assert(c3.piece_type == PieceType::Pawn, &#x27;should be Pawn&#x27;);\n    assert(c3.color == Color::White, &#x27;should be white color piece 2&#x27;);\n    assert(c3.piece_type != PieceType::None, &#x27;should have piece&#x27;);\n","title":"test_move","titles":["2 Move function","Diving into the Code"]},"215":{"href":"/tutorial/onchain-chess/2-move#need-help","html":"\n<p>If you&#x27;re stuck, don&#x27;t hesitate to ask questions at the <a href=\"https://discord.gg/akd2yfuRS3\">Dojo community</a>!</p>","isPage":false,"text":"\nIf you&#x27;re stuck, don&#x27;t hesitate to ask questions at the Dojo community!","title":"Need help?","titles":["2 Move function"]},"216":{"href":"/tutorial/onchain-chess/3-test#3-test-contract","html":"</header>\n<p>In this chapter, we&#x27;ll use everything we&#x27;ve learned to run a full chess game scenario.</p>\n<p>Here&#x27;s what we&#x27;ll do in our test:</p>\n<ol>\n<li>Call spawn to setup <code>white_pawn</code> to (0,1) and <code>black_pawn</code> to (1,6)</li>\n<li>Move <code>white_pawn</code> to (0,3)</li>\n<li>Move <code>black_pawn</code> to (1,4)</li>\n<li>Move <code>white_pawn</code> to (1,4)</li>\n<li>Capture <code>black_pawn</code></li>\n</ol>\n<p>To place the pieces, use our <code>spawn</code> function in our <code>actions</code> contract. For moving them, use the <code>move</code> contract. Remember to check if a piece can be captured when using <code>move</code>.</p>\n<p>Before we get to the code, set up your integration test like this:</p>\n<ul>\n<li>Copy the test below and add it to your <code>tests/integration.cairo</code> file.</li>\n</ul>\n","isPage":true,"text":"\nIn this chapter, we&#x27;ll use everything we&#x27;ve learned to run a full chess game scenario.\nHere&#x27;s what we&#x27;ll do in our test:\n\nCall spawn to setup white_pawn to (0,1) and black_pawn to (1,6)\nMove white_pawn to (0,3)\nMove black_pawn to (1,4)\nMove white_pawn to (1,4)\nCapture black_pawn\n\nTo place the pieces, use our spawn function in our actions contract. For moving them, use the move contract. Remember to check if a piece can be captured when using move.\nBefore we get to the code, set up your integration test like this:\n\nCopy the test below and add it to your tests/integration.cairo file.\n\n","title":"3 Test Contract","titles":[]},"217":{"href":"/tutorial/onchain-chess/3-test#full-code","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"c\" data-theme=\"github-dark-dimmed\"><code data-language=\"c\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">mod tests {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    use chess::models::piece::{Piece, PieceType, Vec2};</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    use dojo::world::IWorldDispatcherTrait;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    use chess::tests::units::tests::setup_world;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    use chess::actions::{IActionsDispatcher, IActionsDispatcherTrait};</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    use chess::models::player::{Color};</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[test]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    #[</span><span style=\"color:#DCBDFB\">available_gas</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#6CB6FF\">3000000000000000</span><span style=\"color:#ADBAC7\">)]</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    fn </span><span style=\"color:#DCBDFB\">integration</span><span style=\"color:#ADBAC7\">() {</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let white </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> starknet::contract_address_const::</span><span style=\"color:#F47067\">&lt;0x</span><span style=\"color:#6CB6FF\">01</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let black </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> starknet::contract_address_const::</span><span style=\"color:#F47067\">&lt;0x</span><span style=\"color:#6CB6FF\">02</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        let</span><span style=\"color:#ADBAC7\"> (world, actions_system) </span><span style=\"color:#F47067\">=</span><span style=\"color:#DCBDFB\"> setup_world</span><span style=\"color:#ADBAC7\">();</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //system calls</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let game_id </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> actions_system.</span><span style=\"color:#DCBDFB\">spawn</span><span style=\"color:#ADBAC7\">(white, black);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //White pawn is setup in (0,1)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let wp_curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> Vec2 { x: </span><span style=\"color:#6CB6FF\">0</span><span style=\"color:#ADBAC7\">, y: </span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let a2 </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_id, wp_curr_pos), (Piece));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(a2.piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> PieceType::Pawn, </span><span style=\"color:#96D0FF\">&#x27;should be Pawn in (0,1)&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(a2.color </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> Color::White, </span><span style=\"color:#96D0FF\">&#x27;should be white color&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(a2.piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#ADBAC7\"> PieceType::None, </span><span style=\"color:#96D0FF\">&#x27;should have piece in (0,1)&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //Black pawn is setup in (1,6)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let bp_curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> Vec2 { x: </span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#ADBAC7\">, y: </span><span style=\"color:#6CB6FF\">6</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let b7 </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_id, bp_curr_pos), (Piece));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(b7.piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> PieceType::Pawn, </span><span style=\"color:#96D0FF\">&#x27;should be Pawn in (1,6)&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(b7.color </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> Color::Black, </span><span style=\"color:#96D0FF\">&#x27;should be black color&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(b7.piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#ADBAC7\"> PieceType::None, </span><span style=\"color:#96D0FF\">&#x27;should have piece in (1,6)&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //Move White Pawn to (0,3)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let wp_next_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> Vec2 { x: </span><span style=\"color:#6CB6FF\">0</span><span style=\"color:#ADBAC7\">, y: </span><span style=\"color:#6CB6FF\">3</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        actions_system.</span><span style=\"color:#DCBDFB\">move</span><span style=\"color:#ADBAC7\">(wp_curr_pos, wp_next_pos, white.</span><span style=\"color:#DCBDFB\">into</span><span style=\"color:#ADBAC7\">(), game_id);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //White pawn is now in (0,3)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let wp_curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> wp_next_pos;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let a4 </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_id, wp_curr_pos), (Piece));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(a4.piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> PieceType::Pawn, </span><span style=\"color:#96D0FF\">&#x27;should be Pawn in (0,3)&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(a4.color </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> Color::White, </span><span style=\"color:#96D0FF\">&#x27;should be white color&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(a4.piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#ADBAC7\"> PieceType::None, </span><span style=\"color:#96D0FF\">&#x27;should have piece in (0,3)&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //Move black Pawn to (1,4)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let bp_next_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> Vec2 { x: </span><span style=\"color:#6CB6FF\">1</span><span style=\"color:#ADBAC7\">, y: </span><span style=\"color:#6CB6FF\">4</span><span style=\"color:#ADBAC7\"> };</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        actions_system.</span><span style=\"color:#DCBDFB\">move</span><span style=\"color:#ADBAC7\">(bp_curr_pos, bp_next_pos, black.</span><span style=\"color:#DCBDFB\">into</span><span style=\"color:#ADBAC7\">(), game_id);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        //Black pawn is now in (1,4)</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let bp_curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> bp_next_pos;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let b5 </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_id, bp_curr_pos), (Piece));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(b5.piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> PieceType::Pawn, </span><span style=\"color:#96D0FF\">&#x27;should be Pawn in (1,4)&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(b5.color </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> Color::Black, </span><span style=\"color:#96D0FF\">&#x27;should be black color&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(b5.piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#ADBAC7\"> PieceType::None, </span><span style=\"color:#96D0FF\">&#x27;should have piece in (1,4)&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\">        // Move White Pawn to (1,4) and capture black pawn</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        actions_system.</span><span style=\"color:#DCBDFB\">move</span><span style=\"color:#ADBAC7\">(wp_curr_pos, bp_curr_pos, white.</span><span style=\"color:#DCBDFB\">into</span><span style=\"color:#ADBAC7\">(), game_id);</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let wp_curr_pos </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> bp_curr_pos;</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">        let b5 </span><span style=\"color:#F47067\">=</span><span style=\"color:#ADBAC7\"> get</span><span style=\"color:#F47067\">!</span><span style=\"color:#ADBAC7\">(world, (game_id, wp_curr_pos), (Piece));</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(b5.piece_type </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> PieceType::Pawn, </span><span style=\"color:#96D0FF\">&#x27;should be Pawn in (1,4)&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(b5.color </span><span style=\"color:#F47067\">==</span><span style=\"color:#ADBAC7\"> Color::White, </span><span style=\"color:#96D0FF\">&#x27;should be white color&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#DCBDFB\">        assert</span><span style=\"color:#ADBAC7\">(b5.piece_type </span><span style=\"color:#F47067\">!=</span><span style=\"color:#ADBAC7\"> PieceType::None, </span><span style=\"color:#96D0FF\">&#x27;should have piece in (1,4)&#x27;</span><span style=\"color:#ADBAC7\">);</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">    }</span></span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">}</span></span></code></pre></figure>\n<p>Keep moving pieces and checking if they&#x27;re in the right places.</p>\n","isPage":false,"text":"\nmod tests {\n    use chess::models::piece::{Piece, PieceType, Vec2};\n    use dojo::world::IWorldDispatcherTrait;\n    use chess::tests::units::tests::setup_world;\n    use chess::actions::{IActionsDispatcher, IActionsDispatcherTrait};\n    use chess::models::player::{Color};\n \n    #[test]\n    #[available_gas(3000000000000000)]\n    fn integration() {\n        let white = starknet::contract_address_const::&lt;0x01&gt;();\n        let black = starknet::contract_address_const::&lt;0x02&gt;();\n \n        let (world, actions_system) = setup_world();\n \n        //system calls\n        let game_id = actions_system.spawn(white, black);\n \n        //White pawn is setup in (0,1)\n        let wp_curr_pos = Vec2 { x: 0, y: 1 };\n        let a2 = get!(world, (game_id, wp_curr_pos), (Piece));\n        assert(a2.piece_type == PieceType::Pawn, &#x27;should be Pawn in (0,1)&#x27;);\n        assert(a2.color == Color::White, &#x27;should be white color&#x27;);\n        assert(a2.piece_type != PieceType::None, &#x27;should have piece in (0,1)&#x27;);\n \n        //Black pawn is setup in (1,6)\n        let bp_curr_pos = Vec2 { x: 1, y: 6 };\n        let b7 = get!(world, (game_id, bp_curr_pos), (Piece));\n        assert(b7.piece_type == PieceType::Pawn, &#x27;should be Pawn in (1,6)&#x27;);\n        assert(b7.color == Color::Black, &#x27;should be black color&#x27;);\n        assert(b7.piece_type != PieceType::None, &#x27;should have piece in (1,6)&#x27;);\n \n        //Move White Pawn to (0,3)\n        let wp_next_pos = Vec2 { x: 0, y: 3 };\n        actions_system.move(wp_curr_pos, wp_next_pos, white.into(), game_id);\n \n        //White pawn is now in (0,3)\n        let wp_curr_pos = wp_next_pos;\n        let a4 = get!(world, (game_id, wp_curr_pos), (Piece));\n        assert(a4.piece_type == PieceType::Pawn, &#x27;should be Pawn in (0,3)&#x27;);\n        assert(a4.color == Color::White, &#x27;should be white color&#x27;);\n        assert(a4.piece_type != PieceType::None, &#x27;should have piece in (0,3)&#x27;);\n \n        //Move black Pawn to (1,4)\n        let bp_next_pos = Vec2 { x: 1, y: 4 };\n        actions_system.move(bp_curr_pos, bp_next_pos, black.into(), game_id);\n \n        //Black pawn is now in (1,4)\n        let bp_curr_pos = bp_next_pos;\n        let b5 = get!(world, (game_id, bp_curr_pos), (Piece));\n        assert(b5.piece_type == PieceType::Pawn, &#x27;should be Pawn in (1,4)&#x27;);\n        assert(b5.color == Color::Black, &#x27;should be black color&#x27;);\n        assert(b5.piece_type != PieceType::None, &#x27;should have piece in (1,4)&#x27;);\n \n        // Move White Pawn to (1,4) and capture black pawn\n        actions_system.move(wp_curr_pos, bp_curr_pos, white.into(), game_id);\n \n        let wp_curr_pos = bp_curr_pos;\n        let b5 = get!(world, (game_id, wp_curr_pos), (Piece));\n        assert(b5.piece_type == PieceType::Pawn, &#x27;should be Pawn in (1,4)&#x27;);\n        assert(b5.color == Color::White, &#x27;should be white color&#x27;);\n        assert(b5.piece_type != PieceType::None, &#x27;should have piece in (1,4)&#x27;);\n    }\n}\nKeep moving pieces and checking if they&#x27;re in the right places.\n","title":"Full Code","titles":["3 Test Contract"]},"218":{"href":"/tutorial/onchain-chess/3-test#congratulations","html":"\n<p>You&#x27;ve made the basic contracts for a chess game using the Dojo engine! This tutorial was just the beginning. There are many ways to make the game better, like optimizing parts, adding checks, or considering special cases. If you want to do more with this chess game, try these challenges:</p>\n<ul>\n<li>Add a checkmate feature. Our game doesn&#x27;t end now, so decide when it should!</li>\n<li>Include special moves like castling, En Passant Capture, or Pawn Promotion.</li>\n<li>Make your own chess rules! You could even create your own version of the <a href=\"https://immortal.game/\">immortal game</a></li>\n</ul>\n<p>Lastly, share your project with others in the <a href=\"https://discord.gg/akd2yfuRS3\">Dojo community</a>!</p>","isPage":false,"text":"\nYou&#x27;ve made the basic contracts for a chess game using the Dojo engine! This tutorial was just the beginning. There are many ways to make the game better, like optimizing parts, adding checks, or considering special cases. If you want to do more with this chess game, try these challenges:\n\nAdd a checkmate feature. Our game doesn&#x27;t end now, so decide when it should!\nInclude special moves like castling, En Passant Capture, or Pawn Promotion.\nMake your own chess rules! You could even create your own version of the immortal game\n\nLastly, share your project with others in the Dojo community!","title":"Congratulations!","titles":["3 Test Contract"]},"219":{"href":"/tutorial/onchain-chess/README#building-a-chess-game","html":"</header>\n<p><em>&quot;I just finished reading The Dojo Book. What should I do next?&quot;</em></p>\n<p>The answers to this question are always &quot;Make something!&quot;, sometimes followed by a list of cool projects. This is a great answer for some people, but others might be looking for a little more direction.</p>\n<p>This guide is intended to fill the gap between heavily directed beginner tutorials and working on your projects. The primary goal here is to get you to write code. The secondary goal is to get you reading documentation.</p>\n<p>If you haven&#x27;t read the Dojo Book yet, it is highly encouraged for you to do so before starting this project.</p>\n","isPage":true,"text":"\n&quot;I just finished reading The Dojo Book. What should I do next?&quot;\nThe answers to this question are always &quot;Make something!&quot;, sometimes followed by a list of cool projects. This is a great answer for some people, but others might be looking for a little more direction.\nThis guide is intended to fill the gap between heavily directed beginner tutorials and working on your projects. The primary goal here is to get you to write code. The secondary goal is to get you reading documentation.\nIf you haven&#x27;t read the Dojo Book yet, it is highly encouraged for you to do so before starting this project.\n","title":"Building a Chess Game","titles":[]},"220":{"href":"/tutorial/onchain-chess/README#what-are-we-building","html":"\n<p>We&#x27;re building an on-chain chess game contract that lets you start a new game and play chess. This guide does not cover every rules of the chess game. You will build step by step as follows:</p>\n<ol>\n<li>A system contract to spawn all the chess pieces</li>\n<li>A system contract to make pieces move</li>\n<li>Add some functions to check a legal move</li>\n<li>Play chess ♟♙ - integration test!</li>\n</ol>\n<p>The full code of tutorial is based on <a href=\"https://github.com/dojoengine/origami/tree/main/examples/chess\">this repo</a>.</p>\n<p>If this seems too hard, don&#x27;t worry! This guide is for beginners. If you know some basics about Cairo and Dojo, you&#x27;re good. We won&#x27;t make a full chess game with all the rules. We&#x27;re keeping it simple.</p>\n","isPage":false,"text":"\nWe&#x27;re building an on-chain chess game contract that lets you start a new game and play chess. This guide does not cover every rules of the chess game. You will build step by step as follows:\n\nA system contract to spawn all the chess pieces\nA system contract to make pieces move\nAdd some functions to check a legal move\nPlay chess ♟♙ - integration test!\n\nThe full code of tutorial is based on this repo.\nIf this seems too hard, don&#x27;t worry! This guide is for beginners. If you know some basics about Cairo and Dojo, you&#x27;re good. We won&#x27;t make a full chess game with all the rules. We&#x27;re keeping it simple.\n","title":"What are we building?","titles":["Building a Chess Game"]},"221":{"href":"/tutorial/onchain-chess/README#what-after-this-guide","html":"\n<p>We&#x27;re making another guide to help design the frontend. This will make our chess game complete.</p>\n<p>After you finish all the four chapters, we can move on to the frontend guide.</p>","isPage":false,"text":"\nWe&#x27;re making another guide to help design the frontend. This will make our chess game complete.\nAfter you finish all the four chapters, we can move on to the frontend guide.","title":"What after this guide?","titles":["Building a Chess Game"]},"222":{"href":"/toolchain/slot/deployments-commands/deployments#slot-deployments","html":"\n<p>It allows you the manage your slot deployments.</p>\n","isPage":true,"text":"\nIt allows you the manage your slot deployments.\n","title":"slot deployments","titles":[null]},"223":{"href":"/toolchain/slot/deployments-commands/deployments#commands","html":"\n<p><code>create</code>\n    Create a new deployment.</p>\n<p><code>delete</code>\n    Delete a deployment.</p>\n<p><code>update</code>\n    Update a deployment.</p>\n<p><code>describe</code>\n    Describe a deployment&#x27;s configuration.</p>\n<p><code>list</code>\n    List all deployments.</p>\n<p><code>logs</code>\n    Fetch logs for a deployment.</p>\n<p><code>help</code>\n    Print this message or the help of the given subcommand(s)</p>","isPage":false,"text":"\ncreate\n    Create a new deployment.\ndelete\n    Delete a deployment.\nupdate\n    Update a deployment.\ndescribe\n    Describe a deployment&#x27;s configuration.\nlist\n    List all deployments.\nlogs\n    Fetch logs for a deployment.\nhelp\n    Print this message or the help of the given subcommand(s)","title":"Commands","titles":[null,"slot deployments"]},"224":{"href":"/toolchain/sozo/common-options/offline#offline","html":"</header>\n","isPage":true,"text":"\n","title":"offline","titles":[]},"225":{"href":"/toolchain/sozo/common-options/offline#use-sozo-offline","html":"\n<p><code>--offline</code><br/>\n    Run without accessing the network.<br/>\n    [env: SOZO_OFFLINE=]</p>\n","isPage":false,"text":"\n--offline\n    Run without accessing the network.\n    [env: SOZO_OFFLINE=]\n","title":"use sozo offline","titles":["offline"]},"226":{"href":"/toolchain/sozo/common-options/offline#usage","html":"\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#6CB6FF\"> --offline</span><span style=\"color:#ADBAC7\"> [COMMAND]</span></span></code></pre></figure>\n<p>For example</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#6CB6FF\"> --offline</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>","isPage":false,"text":"\nsozo --offline [COMMAND]\nFor example\nsozo --offline build","title":"USAGE","titles":["offline","use sozo offline"]},"227":{"href":"/toolchain/sozo/common-options/profile#use-sozo-profiles","html":"\n<p>Profiles can be convenient when dealing with multiple environments (dev, staging, prod)</p>\n<p><code>--profile</code><br/>\n    Specify profile to use by name.</p>\n<p><code>--dev</code><br/>\n    Use dev profile.</p>\n<p><code>--release</code><br/>\n    Use release profile.</p>\n","isPage":true,"text":"\nProfiles can be convenient when dealing with multiple environments (dev, staging, prod)\n--profile\n    Specify profile to use by name.\n--dev\n    Use dev profile.\n--release\n    Use release profile.\n","title":"use sozo profiles","titles":[null]},"228":{"href":"/toolchain/sozo/common-options/profile#usage","html":"\n<p>Multiple profiles can be defined in Scarb.toml</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#ADBAC7\">[profile.dev.tool.dojo.env]</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">rpc_url</span><span style=\"color:#96D0FF\"> = &quot;http://localhost:5050&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">account_address</span><span style=\"color:#96D0FF\"> = &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">private_key</span><span style=\"color:#96D0FF\"> = &quot;0x1800000000300000180000000000030000000000003006001800006600&quot;</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#ADBAC7\">[profile.staging.tool.dojo.env]</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">rpc_url</span><span style=\"color:#96D0FF\"> = &quot;https://api.cartridge.gg/x/mydojoproject/katana&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">account_address</span><span style=\"color:#96D0FF\"> = &quot;0x5686a647a9cdd63ade617e0baf3b364856b813b508f03903eb58a7e622d5855&quot;</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">private_key</span><span style=\"color:#96D0FF\"> = &quot;0x33003003001800009900180300d206308b0070db00121318d17b5e6262150b&quot;</span></span></code></pre></figure>\n<p>Then used with sozo commands</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#6CB6FF\"> --profile</span><span style=\"color:#96D0FF\"> dev migrate</span></span></code></pre></figure>\n<p>is equivalent to</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> migrate --rpc-url http://localhost:5050 --account-address </span><span style=\"color:#6CB6FF\">0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973</span><span style=\"color:#96D0FF\"> --private-key </span><span style=\"color:#6CB6FF\">0x1800000000300000180000000000030000000000003006001800006600</span></span></code></pre></figure>","isPage":false,"text":"\nMultiple profiles can be defined in Scarb.toml\n[profile.dev.tool.dojo.env]\nrpc_url = &quot;http://localhost:5050&quot;\naccount_address = &quot;0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973&quot;\nprivate_key = &quot;0x1800000000300000180000000000030000000000003006001800006600&quot;\n \n[profile.staging.tool.dojo.env]\nrpc_url = &quot;https://api.cartridge.gg/x/mydojoproject/katana&quot;\naccount_address = &quot;0x5686a647a9cdd63ade617e0baf3b364856b813b508f03903eb58a7e622d5855&quot;\nprivate_key = &quot;0x33003003001800009900180300d206308b0070db00121318d17b5e6262150b&quot;\nThen used with sozo commands\nsozo --profile dev migrate\nis equivalent to\nsozo migrate --rpc-url http://localhost:5050 --account-address 0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973 --private-key 0x1800000000300000180000000000030000000000003006001800006600","title":"USAGE","titles":[null,"use sozo profiles"]},"229":{"href":"/toolchain/sozo/project-commands/build#sozo-build","html":"\n<p><code>build</code> is used to compile the cairo contracts, generating the necessary artifacts for deployment.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> build</span></span></code></pre></figure>","isPage":true,"text":"\nbuild is used to compile the cairo contracts, generating the necessary artifacts for deployment.\nsozo build","title":"sozo build","titles":[null]},"230":{"href":"/toolchain/sozo/project-commands/init#sozo-init","html":"\n<p><code>init</code> is used to initialize a new project. It will initialize a new project in the current directory by cloning the <a href=\"https://github.com/dojoengine/dojo-starter\">dojo-starter</a>.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> init</span></span></code></pre></figure>","isPage":true,"text":"\ninit is used to initialize a new project. It will initialize a new project in the current directory by cloning the dojo-starter.\nsozo init","title":"sozo init","titles":[null]},"231":{"href":"/toolchain/sozo/project-commands/test#sozo-test","html":"\n<p><code>test</code> is used to test the project&#x27;s cairo contracts. It will run all tests found within the project.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> test</span></span></code></pre></figure>","isPage":true,"text":"\ntest is used to test the project&#x27;s cairo contracts. It will run all tests found within the project.\nsozo test","title":"sozo test","titles":[null]},"232":{"href":"/toolchain/sozo/world-commands/auth#sozo-auth","html":"\n<p><code>auth</code> is used to manage world authorization.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> auth [OPTIONS] </span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#96D0FF\">COMMAN</span><span style=\"color:#ADBAC7\">D</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#6CB6FF\"> --world</span><span style=\"color:#F47067\"> &lt;</span><span style=\"color:#96D0FF\">WORLD_ADDRES</span><span style=\"color:#ADBAC7\">S</span><span style=\"color:#F47067\">&gt;</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">Commands:</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  writer</span><span style=\"color:#96D0FF\">  Auth a system with the given calldata.</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  help</span><span style=\"color:#96D0FF\">    Print this message or the help of the given subcommand</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">s</span><span style=\"color:#ADBAC7\">)</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># example: writer - auth a system with the given calldata</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># This will auth the spawn system with the writer role for Position component</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> auth writer Moves </span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#96D0FF\">CONTRACT_ADDRES</span><span style=\"color:#ADBAC7\">S</span><span style=\"color:#F47067\">&gt;</span><span style=\"color:#6CB6FF\"> --world</span><span style=\"color:#F47067\"> &lt;</span><span style=\"color:#96D0FF\">WORLD_ADDRES</span><span style=\"color:#ADBAC7\">S</span><span style=\"color:#F47067\">&gt;</span></span></code></pre></figure>","isPage":true,"text":"\nauth is used to manage world authorization.\nsozo auth [OPTIONS] &lt;COMMAND&gt; --world &lt;WORLD_ADDRESS&gt;\nCommands:\n  writer  Auth a system with the given calldata.\n  help    Print this message or the help of the given subcommand(s)\n# example: writer - auth a system with the given calldata\n# This will auth the spawn system with the writer role for Position component\nsozo auth writer Moves &lt;CONTRACT_ADDRESS&gt; --world &lt;WORLD_ADDRESS&gt;","title":"sozo auth","titles":[null]},"233":{"href":"/toolchain/sozo/world-commands/events#sozo-events","html":"\n<p><code>events</code> is used to queries world events.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> events</span></span></code></pre></figure>","isPage":true,"text":"\nevents is used to queries world events.\nsozo events","title":"sozo events","titles":[null]},"234":{"href":"/toolchain/sozo/world-commands/register#sozo-register","html":"\n<p><code>register</code> is used to register new systems and components.</p>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> register [OPTIONS] </span><span style=\"color:#F47067\">&lt;</span><span style=\"color:#96D0FF\">COMMAN</span><span style=\"color:#ADBAC7\">D</span><span style=\"color:#F47067\">&gt;</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#F69D50\">Commands:</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  component</span><span style=\"color:#96D0FF\">  Register a component to a world.</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  system</span><span style=\"color:#96D0FF\">     Register a system to a world.</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">  help</span><span style=\"color:#96D0FF\">       Print this message or the help of the given subcommand</span><span style=\"color:#ADBAC7\">(</span><span style=\"color:#F69D50\">s</span><span style=\"color:#ADBAC7\">)</span></span></code></pre></figure>\n<figure data-rehype-pretty-code-figure=\"\"><pre tabindex=\"0\" data-language=\"sh\" data-theme=\"github-dark-dimmed\"><code data-language=\"sh\" data-theme=\"github-dark-dimmed\" style=\"display:grid\"><span data-line=\"\"><span style=\"color:#768390\"># example: component - register a component to a world</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># this will register the Moves component to the world</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> register component Moves</span></span>\n<span data-line=\"\"> </span>\n<span data-line=\"\"><span style=\"color:#768390\"># example: system - register a system to a world</span></span>\n<span data-line=\"\"><span style=\"color:#768390\"># this will register the spawn system to the world</span></span>\n<span data-line=\"\"><span style=\"color:#F69D50\">sozo</span><span style=\"color:#96D0FF\"> register system spawn</span></span></code></pre></figure>","isPage":true,"text":"\nregister is used to register new systems and components.\nsozo register [OPTIONS] &lt;COMMAND&gt;\nCommands:\n  component  Register a component to a world.\n  system     Register a system to a world.\n  help       Print this message or the help of the given subcommand(s)\n# example: component - register a component to a world\n# this will register the Moves component to the world\nsozo register component Moves\n \n# example: system - register a system to a world\n# this will register the spawn system to the world\nsozo register system spawn","title":"sozo register","titles":[null]}},"dirtCount":0,"index":[["♟♙",{"2":{"220":1}}],["│",{"2":{"202":5}}],["└──",{"2":{"202":4}}],["├──",{"2":{"202":10}}],["ℹ️",{"2":{"138":1}}],["~",{"2":{"136":1,"198":1}}],["q2",{"2":{"128":1}}],["q1",{"2":{"128":1}}],["question",{"2":{"219":1}}],["questions",{"2":{"215":1}}],["questioning",{"2":{"113":1}}],["queen",{"2":{"203":1,"207":1}}],["querying",{"2":{"16":1,"17":1,"18":1}}],["query",{"0":{"176":1,"177":1},"1":{"178":1,"179":1,"180":1,"181":1},"2":{"11":1,"22":1,"26":4,"34":2,"39":1,"175":1,"176":1,"177":4,"178":4,"180":5,"181":2,"182":1,"183":1}}],["queries",{"2":{"7":1,"26":1,"41":1,"132":1,"172":1,"173":1,"176":7,"194":2,"195":1,"233":1}}],["quantity",{"2":{"39":2}}],["quick",{"0":{"92":1},"1":{"93":1,"94":1},"2":{"81":1,"89":1,"95":1}}],["quickstart",{"2":{"1":1}}],["quite",{"2":{"26":1}}],["quot",{"2":{"13":18,"15":6,"25":4,"26":74,"29":14,"83":34,"90":2,"113":4,"118":2,"140":4,"177":36,"178":120,"180":20,"182":48,"183":64,"197":2,"198":6,"202":18,"219":4,"228":12}}],["||",{"2":{"207":21,"208":1}}],["|",{"2":{"93":1,"101":1,"135":1,"156":1}}],["zk",{"2":{"113":1,"115":1,"118":1,"119":1,"127":3}}],["zknight",{"2":{"79":1}}],["zkorp",{"0":{"77":1}}],["zdefender",{"2":{"79":1}}],["zero",{"2":{"35":3,"55":4,"115":1,"119":1,"127":1}}],["94bfdb2",{"2":{"136":1}}],["99",{"2":{"56":1}}],["9999999999999",{"2":{"36":1,"39":1}}],["9",{"2":{"26":1}}],["8",{"2":{"26":1,"38":1,"142":1}}],["8080",{"2":{"26":4,"175":1,"188":2}}],["7",{"2":{"26":1,"207":2}}],["6",{"2":{"26":1,"216":1,"217":4}}],["📚",{"2":{"157":1,"166":1,"190":1}}],["🚀",{"2":{"26":1}}],["📦",{"2":{"25":1}}],["✨",{"2":{"25":2,"198":2}}],["🎉",{"2":{"25":1,"198":1,"207":1}}],["🌎",{"2":{"25":2}}],["52",{"2":{"182":1}}],["56",{"2":{"26":2}}],["5",{"2":{"25":3,"26":1,"180":2}}],["5050",{"2":{"13":1,"197":1,"202":1,"228":2}}],["🧰",{"2":{"25":1}}],["39",{"2":{"182":1}}],["3000000000000000",{"2":{"210":2,"217":1}}],["30000000",{"2":{"56":1}}],["3",{"0":{"102":1,"139":1,"216":1},"1":{"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1,"217":1,"218":1},"2":{"15":1,"25":1,"26":1,"31":2,"83":2,"139":1,"140":1,"143":1,"146":1,"178":1,"180":3,"181":1,"216":1,"217":5}}],["king",{"2":{"203":1,"207":1}}],["kind",{"2":{"178":1}}],["knight",{"2":{"203":1,"207":1}}],["known",{"2":{"118":1}}],["knowledge",{"2":{"115":1,"119":1,"127":1}}],["know",{"2":{"26":1,"127":1,"220":1}}],["kairy",{"2":{"71":1}}],["katanas",{"2":{"85":1}}],["katana",{"0":{"80":1,"81":1,"82":1},"1":{"81":1,"82":1},"2":{"13":1,"25":5,"26":1,"80":2,"81":4,"82":1,"83":2,"85":1,"91":3,"93":1,"119":1,"129":1,"155":1,"159":1,"198":7,"202":1,"228":1}}],["keeping",{"2":{"220":1}}],["keep",{"2":{"36":1,"105":1,"179":1,"217":1}}],["keypair",{"2":{"58":1}}],["keys",{"2":{"9":1,"17":2,"26":3,"34":3,"60":4,"182":2,"183":4,"213":1}}],["key",{"0":{"34":1},"2":{"7":1,"9":3,"13":1,"14":4,"15":1,"17":1,"22":3,"29":1,"32":2,"33":4,"34":7,"36":1,"38":1,"39":4,"42":2,"44":4,"83":4,"116":1,"142":2,"183":1,"198":3,"202":1,"203":6,"228":3}}],["17",{"2":{"182":2}}],["11",{"2":{"56":1,"182":2}}],["12",{"2":{"26":5,"34":1}}],["199592z",{"2":{"26":1}}],["18",{"2":{"26":5}}],["188985z",{"2":{"26":1}}],["188611z",{"2":{"26":1}}],["188215z",{"2":{"26":1}}],["187674z",{"2":{"26":1}}],["187202z",{"2":{"26":1}}],["186720z",{"2":{"26":1}}],["186129z",{"2":{"26":1}}],["185648z",{"2":{"26":1}}],["184244z",{"2":{"26":1}}],["184233z",{"2":{"26":1}}],["18t06",{"2":{"26":15}}],["15",{"0":{"21":1},"1":{"22":1,"23":1,"24":1,"25":1,"26":1,"27":1},"2":{"26":5,"83":2}}],["1",{"0":{"100":1,"102":1},"2":{"13":1,"15":1,"19":1,"22":6,"24":1,"25":2,"26":2,"38":1,"39":2,"53":1,"83":1,"102":1,"114":1,"118":1,"136":2,"142":1,"199":1,"207":19,"210":2,"216":4,"217":16}}],["1071",{"2":{"136":1}}],["100000",{"2":{"55":2}}],["100",{"2":{"22":2,"39":2}}],["10",{"2":{"10":3,"22":3,"24":5,"26":18,"34":1,"39":5,"42":2,"49":1,"53":3,"56":1,"79":2,"136":2,"177":1,"182":5}}],["42",{"2":{"182":1}}],["420",{"2":{"55":2}}],["48",{"2":{"26":15,"182":1}}],["49",{"2":{"26":15}}],["4",{"0":{"151":1},"2":{"13":3,"25":4,"26":1,"31":1,"202":3,"216":2,"217":8}}],["y3vyc29yx3r3bw==",{"2":{"180":2}}],["y3vyc29yx29uzq==",{"2":{"180":1}}],["yes",{"2":{"129":1}}],["yet",{"2":{"30":1,"82":1,"113":1,"178":1,"219":1}}],["y",{"2":{"10":2,"14":1,"22":6,"24":3,"35":3,"39":5,"42":2,"53":1,"55":3,"56":3,"182":2,"203":1,"207":57,"210":3,"213":1,"217":4}}],["you",{"0":{"133":1},"2":{"1":2,"7":2,"9":4,"11":1,"15":2,"16":1,"17":1,"19":1,"20":1,"21":4,"22":3,"24":1,"25":2,"26":15,"27":1,"29":1,"33":1,"34":6,"35":1,"36":1,"38":1,"42":1,"51":1,"54":2,"55":1,"56":2,"57":1,"58":3,"60":2,"62":1,"63":1,"69":3,"81":1,"82":3,"83":1,"84":1,"88":2,"89":1,"90":2,"91":1,"93":1,"95":1,"100":1,"109":3,"115":2,"119":1,"123":2,"128":1,"130":2,"133":1,"136":3,"137":1,"138":2,"140":1,"141":2,"142":2,"143":1,"163":1,"164":1,"172":5,"173":1,"175":1,"177":6,"178":4,"179":1,"182":2,"183":4,"184":3,"188":1,"190":1,"198":10,"199":3,"201":2,"203":1,"204":1,"205":1,"206":1,"207":1,"213":1,"215":1,"218":3,"219":4,"220":4,"221":1,"222":1}}],["yourself",{"2":{"92":1,"207":1}}],["your",{"0":{"198":1,"205":1},"1":{"199":1},"2":{"1":1,"9":1,"13":1,"16":1,"17":1,"19":3,"21":2,"22":2,"25":7,"26":9,"29":1,"32":1,"34":1,"40":1,"46":1,"47":1,"54":4,"55":1,"56":2,"58":1,"63":1,"64":1,"79":1,"80":1,"81":3,"82":6,"83":1,"93":1,"94":1,"100":2,"110":1,"115":3,"133":2,"138":1,"139":1,"140":1,"143":1,"145":1,"147":1,"150":2,"155":1,"157":1,"163":2,"164":1,"166":1,"175":2,"176":1,"177":1,"178":3,"179":1,"182":1,"183":3,"184":1,"187":1,"190":1,"198":7,"199":2,"201":1,"202":6,"203":1,"210":1,"216":2,"218":3,"219":1,"222":1}}],["+=",{"2":{"22":2}}],["+",{"0":{"38":1},"2":{"10":2,"24":3,"39":6,"207":12}}],["x",{"2":{"10":2,"14":1,"22":6,"24":3,"29":1,"35":3,"39":5,"42":2,"53":1,"55":3,"56":3,"83":2,"182":2,"203":1,"207":57,"210":3,"213":1,"217":4,"228":1}}],["x27",{"0":{"133":1},"2":{"4":1,"16":2,"18":1,"19":1,"21":6,"22":15,"24":5,"25":5,"26":10,"28":1,"36":1,"38":13,"41":1,"46":1,"47":2,"49":2,"52":1,"55":4,"56":8,"58":1,"60":1,"62":1,"81":1,"82":1,"101":2,"106":1,"113":3,"115":1,"118":1,"119":1,"125":1,"126":2,"127":2,"130":1,"131":1,"133":1,"136":5,"138":1,"142":13,"147":1,"150":2,"164":1,"172":1,"175":1,"177":3,"178":1,"188":1,"198":3,"203":1,"205":1,"207":9,"208":6,"209":1,"210":30,"212":2,"213":8,"214":7,"215":2,"216":4,"217":31,"218":2,"219":1,"220":5,"221":1,"223":1,"231":1}}],["v",{"2":{"137":1,"197":1}}],["vscode",{"0":{"102":1}}],["virtual",{"2":{"115":1,"126":1}}],["visual",{"2":{"90":1,"102":1,"133":1}}],["via",{"2":{"1":1,"11":1,"36":1,"59":1,"67":1,"165":1,"184":2,"189":1}}],["v2",{"2":{"83":1}}],["v0",{"2":{"22":1,"39":1,"42":1,"49":1,"53":1,"83":1,"145":2,"208":1}}],["ve",{"2":{"25":1,"26":2,"81":1,"207":1,"216":1,"218":1}}],["vein",{"2":{"22":1}}],["vec2trait",{"2":{"55":2}}],["vec2",{"2":{"22":5,"24":1,"42":4,"49":1,"53":2,"55":4,"203":2,"207":6,"208":2,"210":4,"213":1,"217":5}}],["vec",{"2":{"22":7,"24":3,"42":2,"53":1,"55":2,"56":2,"182":2}}],["verify",{"2":{"209":1}}],["verifying",{"2":{"118":1,"127":1}}],["verifiable",{"2":{"116":1}}],["verification",{"2":{"115":1,"118":1}}],["very",{"2":{"15":1,"113":1,"143":1,"181":2}}],["versions",{"2":{"144":1}}],["version",{"0":{"137":1},"2":{"13":4,"25":3,"83":2,"90":1,"136":4,"137":1,"140":1,"197":2,"198":2,"202":3,"218":1}}],["valuable",{"2":{"105":1,"183":1}}],["values",{"2":{"11":1,"22":1,"60":5,"182":1,"183":1}}],["value",{"2":{"9":2,"14":2,"17":2,"29":1,"33":1,"34":1,"36":2,"39":1}}],["validate",{"2":{"142":1,"150":1}}],["validity",{"2":{"116":1,"118":2,"127":1}}],["valid",{"2":{"83":1}}],["vast",{"2":{"27":1}}],["variables",{"2":{"25":1}}],["various",{"2":{"14":1,"33":1,"106":1}}],["=https",{"2":{"101":1}}],["==",{"2":{"15":3,"35":3,"56":3,"207":28,"208":1,"210":11,"213":2,"214":2,"217":10}}],["=",{"2":{"9":7,"13":12,"15":4,"19":3,"22":17,"24":2,"25":3,"29":7,"32":1,"34":3,"36":1,"39":5,"42":3,"49":2,"53":9,"55":1,"56":8,"61":1,"83":19,"149":2,"150":1,"198":3,"202":12,"207":38,"208":10,"210":26,"212":4,"213":6,"214":3,"217":21,"228":6}}],["l1",{"2":{"118":4}}],["l2",{"0":{"118":1},"2":{"118":2}}],["l",{"2":{"93":1,"135":1,"156":1}}],["large",{"2":{"181":1}}],["lattice",{"2":{"113":1,"114":1}}],["latest",{"2":{"105":1,"136":3,"198":2}}],["later",{"2":{"22":1}}],["labeled",{"2":{"109":1}}],["lacking",{"2":{"109":1}}],["launches",{"2":{"81":1}}],["lair",{"2":{"79":1}}],["language",{"2":{"115":1,"116":2,"119":1,"126":3}}],["languages",{"2":{"70":1}}],["land",{"2":{"79":1}}],["lander",{"2":{"79":1}}],["layers",{"2":{"113":1}}],["layer",{"2":{"41":1,"113":3,"115":1,"118":2,"192":1}}],["layout",{"2":{"38":4,"60":4,"142":6}}],["lastly",{"2":{"203":1,"218":1}}],["lasts",{"2":{"195":1}}],["last",{"2":{"22":5,"24":1,"49":1,"53":2,"177":2,"180":4,"181":1}}],["ll",{"2":{"21":2,"22":4,"26":1,"188":1,"198":1,"203":1,"213":1,"216":2}}],["lt",{"2":{"15":1,"17":3,"22":2,"38":2,"39":1,"42":2,"49":1,"53":1,"56":1,"60":20,"83":1,"142":2,"144":1,"145":1,"147":2,"175":1,"183":1,"188":1,"197":4,"207":12,"208":1,"210":4,"213":2,"217":2,"232":4,"234":1}}],["logs",{"2":{"198":1,"199":2,"223":2}}],["login",{"2":{"198":1}}],["logic",{"2":{"15":1,"21":1,"42":1,"47":1,"124":1,"132":1,"145":1,"204":2}}],["long",{"2":{"182":1,"195":1}}],["longer",{"2":{"141":1,"143":1,"144":1}}],["locked",{"2":{"166":1}}],["located",{"2":{"136":1,"209":1}}],["location",{"2":{"9":2,"34":6}}],["local",{"0":{"80":1,"137":1},"1":{"81":1,"82":1},"2":{"21":1,"26":4,"29":1,"80":1,"81":1,"91":1,"136":1,"166":1,"175":2,"190":2,"194":1,"195":1}}],["locally",{"0":{"25":1},"2":{"21":1,"25":1,"26":1}}],["localhost",{"2":{"13":1,"188":2,"197":1,"202":1,"228":2}}],["low",{"2":{"118":1,"126":1}}],["lower",{"2":{"70":1}}],["lowest",{"2":{"63":1}}],["loot",{"2":{"79":1}}],["looking",{"2":{"69":1,"219":1}}],["look",{"2":{"26":1,"39":1,"42":1,"49":1,"110":1,"202":3,"204":1,"208":1}}],["looks",{"2":{"26":1,"182":1,"202":2}}],["lot",{"2":{"24":1,"202":1}}],["lobby",{"2":{"15":5}}],["legal",{"2":{"220":1}}],["lessons",{"2":{"130":1}}],["learned",{"2":{"130":1,"216":1}}],["learn",{"2":{"126":1}}],["leave",{"2":{"113":1}}],["least",{"2":{"34":1,"113":1}}],["levels",{"2":{"106":1}}],["level",{"0":{"112":1},"2":{"63":1,"70":1,"118":1,"126":1,"143":1}}],["leveraging",{"2":{"7":1,"41":1,"116":1}}],["leverages",{"2":{"188":1}}],["leverage",{"2":{"7":1}}],["length",{"2":{"60":2}}],["left",{"2":{"22":2,"24":1}}],["letting",{"2":{"42":1}}],["lets",{"2":{"19":1,"42":1,"55":1,"177":1,"220":1}}],["let",{"2":{"9":4,"19":2,"21":1,"22":9,"24":3,"25":4,"26":4,"34":3,"39":4,"42":3,"49":3,"53":7,"55":1,"56":8,"61":1,"149":2,"150":1,"177":1,"178":1,"198":2,"205":1,"207":2,"208":5,"210":23,"212":4,"213":5,"214":2,"217":16}}],["little",{"2":{"219":1}}],["lived",{"2":{"182":1}}],["limit",{"0":{"181":1},"2":{"179":1,"181":2}}],["listens",{"2":{"194":1}}],["listen",{"2":{"182":1,"183":1}}],["listening",{"2":{"26":1,"59":1}}],["list",{"2":{"147":2,"197":1,"212":1,"219":1,"223":2}}],["license",{"2":{"121":1}}],["licensed",{"2":{"2":1}}],["lifespan",{"2":{"113":1}}],["linux",{"0":{"99":1},"1":{"100":1,"101":1,"102":1},"2":{"100":1}}],["links",{"2":{"28":1,"29":1}}],["line",{"2":{"24":1,"163":1}}],["libraries",{"0":{"78":1},"2":{"63":1,"78":1}}],["library",{"2":{"63":2,"198":1}}],["lib",{"2":{"22":1,"42":1,"202":2}}],["like",{"2":{"4":1,"15":1,"19":1,"22":1,"24":1,"26":3,"38":1,"39":1,"51":1,"61":1,"69":1,"113":1,"124":1,"142":2,"143":1,"145":1,"176":1,"177":2,"182":2,"183":1,"202":5,"204":1,"208":1,"216":1,"218":2}}],["rm",{"2":{"198":1}}],["rs",{"2":{"90":1}}],["rising",{"2":{"172":1}}],["risk",{"2":{"83":1}}],["right",{"2":{"22":1,"26":1,"56":1,"207":3,"208":2,"217":1}}],["rather",{"2":{"143":1,"204":1}}],["radically",{"2":{"130":1}}],["radical",{"2":{"113":1}}],["rapidly",{"2":{"123":1,"155":1,"159":1}}],["rapid",{"2":{"27":1,"80":1}}],["random",{"2":{"40":1}}],["ran",{"2":{"26":1}}],["rules",{"2":{"125":1,"127":1,"218":1,"220":2}}],["runtime",{"2":{"176":1}}],["runs",{"2":{"118":1}}],["running",{"2":{"25":3,"26":2,"100":1,"101":1,"175":1,"188":1,"195":1}}],["run",{"0":{"25":1},"2":{"21":1,"26":3,"54":1,"82":2,"85":1,"91":1,"119":3,"129":1,"156":2,"177":2,"188":1,"194":1,"198":5,"199":1,"205":1,"208":1,"216":1,"225":1,"231":1}}],["rustup",{"2":{"90":1,"100":2}}],["rust",{"0":{"71":1,"100":1},"2":{"7":1,"70":2,"90":2,"96":1,"100":1,"107":1,"185":1,"186":1}}],["rook",{"2":{"203":1,"207":1,"210":2,"213":3}}],["root",{"2":{"56":1}}],["roadmap",{"0":{"123":1},"2":{"128":1}}],["rock",{"2":{"79":1}}],["rollup",{"2":{"116":1,"118":3}}],["rollups",{"2":{"113":1}}],["roll",{"2":{"79":1}}],["role",{"2":{"6":1,"16":1,"38":2,"47":1,"142":2,"144":1,"145":1,"232":1}}],["rolesschemaintrospectionimpl",{"2":{"38":1,"142":1}}],["roles",{"2":{"6":1,"38":4,"142":5,"144":1,"145":1}}],["route",{"2":{"21":1}}],["robust",{"2":{"21":1,"116":1,"163":1}}],["rpc",{"2":{"13":1,"83":3,"194":1,"197":2,"198":4,"199":2,"202":1,"228":3}}],["renamed",{"2":{"140":1}}],["reworking",{"2":{"139":1}}],["revamped",{"2":{"144":1}}],["revert",{"2":{"134":1}}],["revolves",{"2":{"132":1}}],["revoke",{"2":{"60":2}}],["reduce",{"2":{"116":1}}],["requests",{"0":{"110":1}}],["request",{"2":{"88":1,"110":3,"136":1,"182":1}}],["requiring",{"2":{"113":1}}],["requirements",{"0":{"207":1}}],["required",{"2":{"36":1,"58":1,"143":1,"144":1,"166":1,"190":1}}],["requires",{"2":{"4":1,"139":1}}],["requisites",{"0":{"175":1}}],["requisite",{"2":{"81":1}}],["reusable",{"2":{"49":1,"56":1,"116":1}}],["reuse",{"2":{"33":1}}],["relies",{"2":{"195":1}}],["relied",{"2":{"141":1}}],["related",{"2":{"140":1,"194":1}}],["relationship",{"2":{"41":1}}],["relevant",{"2":{"105":1}}],["releases",{"2":{"138":1}}],["release",{"2":{"19":1,"136":2,"227":2}}],["reformulating",{"2":{"110":1}}],["refining",{"2":{"105":1}}],["ref",{"2":{"38":1,"60":12,"142":1}}],["refer",{"2":{"20":1,"22":1}}],["reference",{"0":{"158":1,"167":1,"191":1},"1":{"159":1,"160":1,"161":1,"168":1,"169":1,"170":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1},"2":{"14":1,"93":1,"106":1,"145":1,"157":2,"166":2,"190":3}}],["representing",{"2":{"180":1}}],["represent",{"2":{"113":1}}],["represents",{"2":{"38":1,"142":1}}],["repository",{"2":{"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"91":2,"136":1}}],["repo",{"0":{"137":1},"2":{"29":1,"40":1,"136":2,"220":1}}],["replaces",{"2":{"118":1,"172":1}}],["replace",{"2":{"13":1,"29":1,"83":1,"140":1,"198":1,"202":1}}],["remember",{"2":{"213":1,"216":1}}],["remodel",{"2":{"202":3}}],["removing",{"2":{"178":1}}],["remote",{"0":{"83":1,"85":1,"86":1},"1":{"84":1,"85":1,"86":1},"2":{"25":1,"29":1,"80":1,"83":1,"85":2}}],["remarkably",{"2":{"119":1}}],["remains",{"2":{"105":1,"113":1}}],["remaining",{"2":{"10":1,"14":1,"17":2,"19":1,"22":5,"24":3,"33":1,"49":1,"53":2,"56":1,"177":2,"182":2}}],["recreate",{"2":{"130":1}}],["receipt",{"2":{"178":1}}],["received",{"2":{"26":1}}],["receive",{"2":{"26":2,"177":2,"182":1,"198":2,"199":1}}],["recent",{"2":{"90":1}}],["recap",{"2":{"24":1,"26":1}}],["recognizing",{"2":{"132":1}}],["recognizes",{"2":{"130":1}}],["recognize",{"2":{"113":1}}],["recognized",{"2":{"22":1}}],["recommended",{"2":{"85":1}}],["recommend",{"2":{"21":1,"200":1}}],["reconstructed",{"2":{"113":1}}],["reconstruct",{"2":{"17":1,"59":1}}],["re",{"2":{"22":1,"113":1,"136":1,"138":1,"164":1,"175":1,"177":1,"215":1,"217":1,"220":3,"221":1}}],["reside",{"2":{"113":1,"147":1,"204":1}}],["response",{"2":{"182":1}}],["responses",{"2":{"178":1}}],["responsible",{"2":{"52":1}}],["respectively",{"2":{"24":1,"207":1}}],["resouces",{"2":{"29":1}}],["resource",{"2":{"9":3,"29":1,"34":4,"60":5,"105":1,"106":1}}],["resources",{"2":{"1":1}}],["result",{"2":{"150":2,"180":1,"195":1}}],["results",{"2":{"26":1}}],["resulting",{"2":{"26":1,"116":1}}],["rest",{"2":{"22":2,"55":1,"58":1,"172":1,"173":1,"177":1,"182":1,"208":1}}],["resemblance",{"2":{"22":1}}],["registrations",{"2":{"194":1}}],["register",{"0":{"234":1},"2":{"26":2,"57":1,"60":1,"170":1,"234":11}}],["registered",{"2":{"18":1,"25":1,"26":3,"182":1}}],["regular",{"2":{"13":1,"24":1,"42":1,"43":1,"51":1,"143":1,"145":1}}],["returns",{"2":{"180":1}}],["return",{"2":{"22":1,"35":1,"179":2,"180":1,"212":1}}],["returned",{"2":{"9":1,"176":1}}],["retrieval",{"2":{"172":1}}],["retrieves",{"2":{"176":1}}],["retrieve",{"2":{"9":3,"22":3,"24":3,"26":1,"34":1,"172":1,"177":1,"178":1,"209":1}}],["retrieving",{"2":{"7":1,"9":1}}],["reach",{"2":{"69":1}}],["react",{"0":{"66":1},"2":{"41":1,"66":2}}],["readme",{"2":{"202":1}}],["ready",{"2":{"82":1,"175":1,"198":1}}],["reading",{"0":{"117":1},"2":{"22":2,"42":1,"92":1,"219":2}}],["read",{"2":{"14":1,"15":1,"19":1,"22":2,"25":1,"39":1,"42":1,"44":1,"53":3,"132":1,"179":1,"184":1,"208":1,"219":1}}],["readability",{"2":{"7":1}}],["realization",{"2":{"130":1}}],["realized",{"2":{"1":1}}],["real",{"2":{"26":1}}],["realms",{"0":{"74":1},"2":{"2":1,"79":3}}],["h",{"2":{"197":1}}],["high",{"2":{"118":1,"143":1,"185":1}}],["highly",{"2":{"19":1,"116":1,"219":1}}],["hurdles",{"2":{"130":1}}],["hub",{"2":{"72":1}}],["human",{"2":{"39":10}}],["humans",{"2":{"39":3}}],["hundreds",{"2":{"27":1}}],["hold",{"2":{"203":1}}],["holds",{"2":{"22":1,"213":1}}],["home",{"2":{"136":1}}],["homework",{"0":{"114":1}}],["hosted",{"2":{"85":1,"197":1}}],["hooks",{"2":{"66":1}}],["houses",{"2":{"22":1}}],["however",{"2":{"4":1,"27":1,"30":1,"34":1,"36":1,"39":1,"58":1,"85":1,"181":1}}],["how",{"0":{"3":1,"88":1},"2":{"4":1,"22":1,"24":1,"34":1,"38":1,"42":1,"58":3,"113":1,"142":1,"147":1,"183":1}}],["hard",{"2":{"220":1}}],["harnessing",{"2":{"183":1}}],["happens",{"2":{"182":2}}],["having",{"2":{"39":2,"212":1}}],["haven",{"2":{"82":1,"219":1}}],["have",{"2":{"20":1,"21":1,"22":4,"24":1,"25":1,"26":5,"39":2,"81":1,"82":1,"83":1,"88":1,"123":1,"136":1,"137":1,"140":1,"172":1,"182":1,"188":1,"198":3,"207":1,"210":3,"213":1,"214":1,"217":5}}],["hang",{"2":{"21":1}}],["hand",{"2":{"176":1}}],["handy",{"2":{"19":1}}],["handle",{"2":{"14":1,"130":1}}],["hashes",{"2":{"183":1}}],["hash",{"2":{"13":1,"18":4,"25":3,"56":3,"60":3,"149":1,"202":1,"210":5,"212":6}}],["has",{"2":{"5":1,"9":1,"14":2,"30":1,"113":2,"130":1,"140":1,"144":1,"149":1,"176":1,"177":1,"209":1}}],["http",{"2":{"13":1,"26":4,"175":1,"188":2,"197":1,"202":1,"228":2}}],["https",{"2":{"13":1,"25":1,"29":3,"83":4,"91":2,"93":1,"98":1,"101":1,"135":1,"156":1,"166":1,"202":1,"228":1}}],["hesitate",{"2":{"215":1}}],["helps",{"2":{"116":1,"163":1}}],["help",{"0":{"215":1},"2":{"105":1,"128":1,"161":2,"197":2,"221":1,"223":2,"232":2,"234":2}}],["helping",{"2":{"65":1}}],["helper",{"2":{"56":1,"210":1}}],["hello",{"0":{"20":1},"1":{"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1},"2":{"94":1,"177":1,"178":1,"183":1,"200":1}}],["hex",{"2":{"40":1}}],["heavy",{"2":{"118":1}}],["heavily",{"2":{"7":1,"219":1}}],["heading",{"0":{"112":1}}],["head",{"2":{"88":1,"94":1,"197":1}}],["health",{"2":{"14":1,"39":11}}],["here",{"2":{"9":1,"10":1,"15":1,"24":3,"25":1,"26":1,"38":1,"44":1,"45":1,"60":1,"85":1,"93":1,"125":1,"126":1,"130":1,"142":1,"145":1,"147":1,"150":1,"179":1,"207":1,"214":1,"216":1,"219":1}}],["n",{"2":{"207":56}}],["nightly",{"2":{"136":2}}],["npm",{"2":{"69":1,"139":1}}],["numbers",{"2":{"39":1}}],["number",{"2":{"33":1,"177":1,"180":1}}],["na",{"2":{"114":1}}],["nature",{"2":{"113":1}}],["natively",{"2":{"140":1}}],["native",{"2":{"40":1}}],["navigate",{"2":{"26":1}}],["named",{"2":{"144":1}}],["name",{"0":{"159":1,"172":1,"192":1},"1":{"173":1},"2":{"13":1,"18":1,"25":1,"26":2,"28":1,"29":2,"38":1,"60":1,"83":1,"142":1,"143":1,"176":1,"177":3,"182":1,"198":5,"199":2,"201":1,"202":1,"227":1}}],["node",{"2":{"177":2,"178":4,"180":4}}],["novel",{"2":{"113":1}}],["no",{"2":{"25":1,"49":1,"113":1,"141":1,"143":1,"144":1}}],["none",{"2":{"22":2,"24":1,"49":1,"53":1,"177":1,"203":2,"207":3,"208":4,"210":3,"213":1,"214":1,"217":5}}],["non",{"2":{"22":1}}],["now",{"2":{"19":1,"21":1,"22":1,"24":1,"25":5,"26":4,"82":1,"141":1,"143":2,"147":1,"177":1,"178":1,"198":4,"204":1,"205":1,"208":1,"217":2,"218":1}}],["notable",{"2":{"113":1}}],["notably",{"2":{"49":1}}],["notion",{"2":{"113":2}}],["noting",{"2":{"60":1}}],["notifications",{"2":{"26":1}}],["notify",{"2":{"22":1,"182":1}}],["notice",{"2":{"22":2,"26":1}}],["notstarted",{"2":{"15":3}}],["noted",{"2":{"204":1}}],["note",{"0":{"137":1},"2":{"14":1,"19":1,"49":1,"58":1,"100":1,"136":1,"138":1,"140":1,"144":1,"195":1,"198":1}}],["not",{"2":{"1":1,"9":1,"13":1,"14":1,"15":3,"20":1,"30":2,"34":1,"37":1,"49":1,"55":2,"58":3,"85":1,"95":1,"110":1,"112":1,"113":1,"124":1,"125":1,"127":1,"138":1,"178":1,"203":1,"205":1,"207":5,"208":2,"220":1}}],["neural",{"2":{"79":1}}],["networking",{"2":{"133":1,"192":1}}],["networks",{"2":{"83":1}}],["network",{"0":{"83":1},"1":{"84":1,"85":1,"86":1},"2":{"69":1,"79":1,"83":1,"118":2,"124":1,"132":1,"225":1}}],["needed",{"2":{"176":1}}],["need",{"0":{"215":1},"2":{"21":1,"25":1,"34":1,"36":1,"38":1,"54":1,"83":1,"90":2,"100":1,"115":1,"138":1,"142":2,"172":1,"198":2,"213":1}}],["needs",{"2":{"16":1,"47":1,"213":1}}],["next",{"0":{"27":1,"94":1},"2":{"19":3,"22":5,"24":1,"26":1,"27":1,"49":1,"53":5,"101":1,"204":1,"206":1,"207":13,"208":15,"210":3,"214":3,"217":6,"219":1}}],["new",{"0":{"41":1},"1":{"42":1,"43":1,"44":1,"45":1},"2":{"18":1,"21":1,"22":2,"24":1,"25":1,"26":4,"56":6,"88":1,"106":1,"110":1,"113":3,"130":1,"143":1,"146":1,"147":1,"163":1,"164":1,"172":1,"198":12,"199":2,"201":1,"214":1,"220":1,"223":1,"230":2,"234":1}}],["never",{"2":{"9":1}}],["necessary",{"2":{"5":1,"109":1,"142":1,"149":1,"150":1,"229":1}}],["nested",{"2":{"4":1}}],["jq",{"2":{"136":3}}],["jay",{"2":{"114":1}}],["javascript",{"2":{"41":1,"62":1}}],["js",{"0":{"62":1,"153":1},"1":{"63":1,"64":1,"65":1,"66":1,"67":1,"68":1},"2":{"70":1,"184":1}}],["json",{"2":{"25":1,"29":1,"172":1,"198":2}}],["jump",{"2":{"26":1,"128":1}}],["just",{"2":{"4":1,"13":1,"43":1,"45":1,"83":1,"89":1,"95":1,"127":1,"130":1,"143":1,"145":1,"218":1,"219":1}}],["join",{"2":{"1":1,"113":1,"123":1}}],["mydojoproject",{"2":{"228":1}}],["my",{"2":{"207":3,"208":1}}],["mysteries",{"2":{"79":1}}],["md",{"2":{"202":1}}],["mkdir",{"2":{"198":1,"201":1}}],["memory",{"2":{"195":4,"197":1}}],["member",{"2":{"38":4,"142":5}}],["message",{"2":{"161":1,"223":1,"232":1,"234":1}}],["medium",{"2":{"113":1}}],["media",{"2":{"28":1}}],["meant",{"2":{"58":1,"126":1}}],["meaning",{"2":{"49":1,"69":1}}],["methods",{"2":{"46":1,"179":2,"204":1}}],["method",{"2":{"36":1,"145":1}}],["metadata",{"0":{"28":1,"29":1,"30":1},"1":{"29":1,"30":1},"2":{"28":1,"29":5,"30":1,"60":2}}],["mentioned",{"2":{"26":1}}],["missing",{"2":{"100":1,"109":2}}],["minimal",{"2":{"146":1}}],["minimize",{"2":{"53":1}}],["mind",{"0":{"39":1}}],["minutes",{"0":{"21":1},"1":{"22":1,"23":1,"24":1,"25":1,"26":1,"27":1},"2":{"62":1}}],["midfielder",{"2":{"38":1,"142":1}}],["migrating",{"2":{"80":1}}],["migrations",{"2":{"198":1}}],["migration",{"0":{"31":1,"139":1,"151":1},"1":{"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1},"2":{"25":2,"29":2,"163":1}}],["migrated",{"2":{"25":2,"82":1,"198":1}}],["migrate",{"2":{"25":1,"26":1,"60":1,"82":3,"84":1,"147":1,"169":1,"178":1,"198":3,"228":2}}],["might",{"2":{"13":1,"219":1}}],["mirroring",{"2":{"41":1}}],["mirror",{"2":{"21":1}}],["mulitple",{"2":{"143":1}}],["multiplayer",{"2":{"79":1}}],["multiple",{"2":{"34":2,"49":1,"109":1,"143":1,"227":1,"228":1}}],["mud",{"2":{"113":1,"114":1}}],["much",{"2":{"109":1,"113":1,"176":1,"183":1}}],["mutates",{"2":{"49":1}}],["mutations",{"2":{"47":1,"173":1}}],["mutating",{"2":{"47":1}}],["mut",{"2":{"19":2,"22":3,"53":2,"56":1,"208":3,"210":1,"212":1}}],["must",{"2":{"9":1,"22":1,"34":2,"58":1,"113":3,"140":1}}],["made",{"2":{"218":1}}],["madara",{"0":{"86":1},"2":{"83":1,"86":1,"119":1}}],["magic",{"2":{"127":1}}],["market",{"2":{"113":1}}],["marked",{"2":{"44":1}}],["major",{"2":{"106":1}}],["master",{"2":{"91":1}}],["masked",{"2":{"79":1}}],["maps",{"2":{"78":1}}],["map",{"2":{"40":1,"78":1}}],["may",{"2":{"35":1,"100":1,"110":1,"113":1,"136":1,"163":1}}],["mainly",{"2":{"176":1}}],["maintains",{"2":{"182":1}}],["maintainable",{"2":{"116":1}}],["maintainability",{"2":{"116":1}}],["maintaining",{"2":{"33":1,"113":1,"118":1}}],["main",{"2":{"26":1,"42":2,"136":2}}],["making",{"2":{"26":1,"116":1,"198":1,"221":1}}],["makes",{"2":{"49":1,"83":1,"172":1}}],["make",{"2":{"25":2,"26":1,"93":1,"100":1,"122":1,"175":2,"198":1,"202":2,"208":1,"214":1,"218":2,"219":1,"220":2,"221":1}}],["mac",{"0":{"99":1},"1":{"100":1,"101":1,"102":1},"2":{"136":1}}],["machine",{"2":{"21":1,"25":1,"26":1,"115":1,"126":1,"175":1}}],["macros",{"2":{"7":1,"19":1}}],["match",{"2":{"15":1,"22":1,"207":3}}],["managing",{"2":{"163":1}}],["management",{"2":{"144":1,"163":1,"164":1}}],["managed",{"2":{"138":1}}],["manages",{"2":{"132":1}}],["manage",{"2":{"27":1,"29":1,"58":1,"156":1,"161":2,"222":1,"232":1}}],["manager",{"0":{"101":1},"2":{"13":2,"90":1,"101":1,"165":1,"189":1}}],["manner",{"2":{"113":1}}],["manually",{"2":{"91":1}}],["man",{"2":{"79":2}}],["manifest",{"2":{"25":1,"198":1}}],["many",{"2":{"2":1,"22":1,"24":1,"203":1,"218":1}}],["moving",{"2":{"216":1,"217":1}}],["move",{"0":{"208":1,"214":1},"1":{"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1},"2":{"19":1,"22":6,"24":5,"53":1,"56":3,"127":2,"146":1,"205":1,"206":1,"207":6,"208":6,"210":2,"214":3,"216":5,"217":6,"220":2,"221":1}}],["moved",{"2":{"11":1,"12":1,"19":3,"22":5,"53":4}}],["movesmodels",{"2":{"177":2}}],["moves",{"2":{"6":2,"9":5,"10":3,"14":2,"17":3,"19":4,"22":21,"24":9,"25":1,"26":6,"33":1,"49":3,"53":8,"56":8,"127":2,"177":2,"182":2,"214":1,"218":1,"232":1,"234":2}}],["monitoring",{"2":{"183":1}}],["moon",{"2":{"79":1}}],["most",{"2":{"42":1,"46":1,"118":1,"180":1}}],["modules",{"2":{"149":1}}],["module",{"2":{"145":1}}],["modularity",{"0":{"39":1},"2":{"33":1}}],["modular",{"2":{"21":1}}],["modification",{"2":{"36":1}}],["modify",{"2":{"36":1}}],["mod",{"2":{"22":1,"39":1,"42":1,"49":1,"53":1,"55":1,"56":1,"146":1,"202":8,"204":1,"210":1,"217":1}}],["modelregistered",{"2":{"18":1,"182":2}}],["model",{"0":{"17":1,"44":1,"141":1},"2":{"4":2,"5":1,"6":4,"9":3,"12":1,"14":1,"15":1,"16":1,"17":3,"22":12,"24":2,"26":7,"32":1,"33":2,"34":8,"35":2,"36":3,"37":1,"38":1,"39":9,"42":1,"44":2,"48":1,"55":3,"59":1,"60":10,"132":1,"140":2,"142":1,"170":1,"176":2,"177":6,"182":3,"184":1,"203":9,"213":1}}],["models",{"0":{"32":1,"33":1,"36":1,"140":1,"203":1,"206":1},"1":{"33":1,"34":2,"35":2,"36":2,"37":2,"38":2,"39":1,"207":1},"2":{"4":1,"7":1,"9":4,"10":2,"14":5,"18":1,"21":1,"22":7,"24":2,"25":2,"26":1,"32":4,"33":5,"35":2,"36":1,"38":1,"39":5,"42":1,"44":2,"46":2,"47":1,"53":2,"55":2,"56":5,"57":3,"58":2,"139":1,"140":1,"141":1,"142":1,"147":1,"176":2,"178":1,"182":2,"202":4,"203":5,"206":1,"207":2,"209":1,"210":7,"212":6,"217":2}}],["moreover",{"2":{"16":1,"115":1}}],["more",{"2":{"2":1,"15":1,"16":1,"25":1,"26":1,"44":1,"53":1,"106":1,"109":1,"113":1,"115":1,"116":1,"118":1,"126":1,"176":1,"177":1,"179":1,"181":1,"184":1,"218":1,"219":1}}],["000",{"2":{"79":1}}],["07",{"2":{"26":3}}],["0xa",{"2":{"183":2}}],["0xb3e374b8087dca92601afbb9881fed855ac0d568e3bf878a876fca5ffcb479",{"2":{"178":1}}],["0xbeef",{"2":{"13":1,"202":1}}],["0x4d6f766573",{"2":{"183":1}}],["0x41d7f42bf7a362f0420aaae66d7a91df981100a039ac116a1d9cb632c74ad27",{"2":{"178":1}}],["0x41a78e741e5af2fec34b695679bc6891742439f7afb8484ecd7766661ad02bf",{"2":{"178":1}}],["0x405a3c5421ca7e23052abce78057e27384ba9db5e4feff7b4041a74e769a98a",{"2":{"178":3}}],["0x33003003001800009900180300d206308b0070db00121318d17b5e6262150b",{"2":{"228":1}}],["0x3b7b034a087355c996abb52e363932c1135f8dd49587bc9a05902d3cf0650b",{"2":{"183":2}}],["0x35ec9fd22092dc0c8fc9341e94d5f361924d921c128fa46a0648f2dac519ce4",{"2":{"178":1}}],["0x31571485922572446df9e3198a891e10d3a48e544544317dbcbb667e15848cd",{"2":{"25":1,"26":2}}],["0xparc",{"2":{"114":1}}],["0xc1cf1490de1352865301bb8705143f3ef938f97fdf892f1090dcb5ac7bcd1d",{"2":{"83":1}}],["0x64",{"2":{"183":1}}],["0x64495ca6dc1dc328972697b30468cea364bcb7452bbb6e4aaad3e4b3f190147",{"2":{"26":1}}],["0x6",{"2":{"178":2}}],["0x6a11b5b3003a3aa0ae7f8f443e48314cc0bc51eaea7c3ed1c19beb909f5dda3",{"2":{"178":1}}],["0x6ffc643cbc4b2fb9c424242b18175a5e142269b45f4463d1cd4dddb7a2e5095",{"2":{"177":1}}],["0x6768b97b44cfbfa9f776a3c00ebe33c228058bf8716bb0515a1363049da2a11",{"2":{"83":2}}],["0x2e5174b54aef0b99d4685827ffa51488447e1f5607908293d5c715d6bd22433",{"2":{"178":1}}],["0x2aa02de0e3fa582b3cb6cf9e4371051f44ae2e0d6c94f5c936338ffc8c2ac12",{"2":{"178":1}}],["0x2ffecbe8de6c7c10c785a6eb964ee6489f8dcf139000adbe2c0f12d249be7d8",{"2":{"178":1}}],["0x2730079d734ee55315f4f141eaed376bddd8c2133523d223a344c5604e0f7f8",{"2":{"178":1}}],["0x2da3d65e223362c72906f97663a4e7dc81ab0bbd04bbde5532a230c1e97d93e",{"2":{"178":1}}],["0x2d5260ba1d62ed0ea7c598f1460d27528b27afdf3bb43524a1ba3617e8279b2",{"2":{"83":2}}],["0x2",{"2":{"83":1,"178":5,"183":2}}],["0x28cd7ee02d7f6ec9810e75b930e8e607793b302445abbdee0ac88143f18da20",{"2":{"26":2,"182":3}}],["0x02",{"2":{"210":2,"213":1,"217":1}}],["0x01",{"2":{"210":2,"213":1,"217":1}}],["0x0",{"2":{"56":1,"178":4,"183":3}}],["0x0001",{"2":{"26":1,"183":1}}],["0x0000000000000000000000000000000000000000000000000000000000000013",{"2":{"182":1}}],["0x000000000000000000000000000000000000000000000000000000000000000b",{"2":{"183":2}}],["0x0000000000000000000000000000000000000000000000000000000000000005",{"2":{"178":1}}],["0x0000000000000000000000000000000000000000000000000000000000000008",{"2":{"178":1}}],["0x000000000000000000000000000000000000000000000000000000000000000a",{"2":{"178":1}}],["0x000000000000000000000000000000000000000000000000000000000000000e",{"2":{"26":2}}],["0x0000",{"2":{"26":3,"178":3,"182":2,"183":3}}],["0x82d996aab290f086314745685c6f05bd69730d46589339763202de5264b1b6",{"2":{"25":1}}],["0x77638e9a645209ac1e32e143bfdbfe9caf723c4f7645fcf465c38967545ea2f",{"2":{"25":1,"178":1}}],["0x5686a647a9cdd63ade617e0baf3b364856b813b508f03903eb58a7e622d5855",{"2":{"228":1}}],["0x5b328933afdbbfd44901fd69a2764a254edbb6e992ae87cf958c70493f2d201",{"2":{"83":1}}],["0x52a1da1853c194683ca5d6d154452d0654d23f2eacd4267c555ff2338e144d6",{"2":{"25":1}}],["0x506f736974696f6e",{"2":{"183":1}}],["0x509a65bd8cc5516176a694a3b3c809011f1f0680959c567b3189e60ddab7ce1",{"2":{"25":1}}],["0x5010c31f127114c6198df8a5239e2b7a5151e1156fb43791e37e7385faa8138",{"2":{"25":3,"26":1}}],["0x59f31686991d7cac25a7d4844225b9647c89e3e1e2d03460dbc61e3fbfafc59",{"2":{"25":1,"178":1}}],["0x517ececd29116499f4a1b64b094da79ba08dfd54a3edaa316134c41f8160973",{"2":{"13":1,"25":1,"26":2,"177":1,"178":3,"182":2,"183":2,"202":1,"228":2}}],["0x1a2f334228cee715f1f0f54053bb6b5eac54fa336e0bc1aacf7516decb0471d",{"2":{"183":2}}],["0x1987cbd17808b9a23693d4de7e246a443cfe37e6e7fbaeabd7d7e6532b07c3d",{"2":{"178":1}}],["0x1f03fa7dc5a673f96d53b728785a98d6ff089c182a7bb32735b150e91817e5b",{"2":{"178":1}}],["0x1fad58d91d5d121aa6dc4d16c01a161e0441ef75fe7d31e3664a61e66022b1f",{"2":{"83":2}}],["0x1e7875674bcb09daaf984cbf77264ac98120cb39e6d17522520defcdc347476",{"2":{"178":2}}],["0x1",{"2":{"178":5,"183":2}}],["0x1800000000300000180000000000030000000000003006001800006600",{"2":{"13":1,"202":1,"228":2}}],["0x1234",{"2":{"9":1,"34":1}}],["0",{"0":{"102":1,"139":2,"151":2,"200":1},"1":{"140":2,"141":2,"142":2,"143":2,"144":2,"145":2,"146":2,"147":2,"148":2,"149":2,"150":2,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1},"2":{"2":1,"9":1,"13":5,"15":1,"25":3,"26":17,"29":1,"31":8,"35":1,"55":4,"83":3,"102":1,"114":1,"121":1,"136":4,"139":2,"140":2,"143":2,"146":2,"175":4,"197":1,"202":5,"210":4,"213":4,"214":1,"216":2,"217":9}}],["2024",{"2":{"128":1}}],["2022",{"2":{"113":1}}],["2023",{"2":{"26":20,"182":2}}],["22",{"2":{"26":3}}],["212335z",{"2":{"26":1}}],["211678z",{"2":{"26":1}}],["210571z",{"2":{"26":1}}],["210032z",{"2":{"26":1}}],["2",{"0":{"101":1,"208":1},"1":{"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1},"2":{"2":1,"13":1,"15":1,"22":1,"24":1,"25":2,"26":1,"31":1,"101":1,"114":1,"115":1,"118":1,"121":1,"180":2,"181":1,"202":2,"207":3,"210":2,"214":2}}],["ultra",{"2":{"80":1}}],["uuid",{"0":{"61":1},"2":{"60":1,"61":2}}],["utilities",{"2":{"78":1}}],["utilizing",{"2":{"46":1,"105":1,"132":1}}],["utilization",{"2":{"45":1,"118":1}}],["utilized",{"2":{"33":1,"113":1}}],["utils",{"0":{"65":1},"2":{"49":1,"53":1,"56":1,"65":2,"149":1,"210":1}}],["u256",{"2":{"37":1,"38":1,"142":1,"144":1,"145":1,"147":2}}],["u128",{"2":{"37":1}}],["u16",{"2":{"37":1}}],["u64",{"2":{"37":1}}],["uris",{"2":{"29":1}}],["uri",{"2":{"29":6,"30":1,"60":3}}],["url",{"0":{"195":1},"2":{"13":1,"83":3,"197":3,"198":2,"199":1,"202":1,"228":3}}],["upgrade",{"2":{"60":1}}],["upload",{"2":{"29":2}}],["uploading",{"2":{"29":1}}],["up",{"0":{"202":1},"2":{"21":1,"22":1,"26":1,"52":1,"81":1,"95":1,"109":1,"114":1,"155":1,"159":1,"182":1,"198":1,"213":1,"214":1,"216":1}}],["updating",{"2":{"7":1,"10":1,"25":1,"105":1,"163":1,"164":1,"198":1}}],["updates",{"2":{"26":1,"194":1}}],["updatedat",{"2":{"26":3,"182":2}}],["updated",{"2":{"17":1,"26":1,"140":1,"182":2}}],["update",{"0":{"143":1},"1":{"144":1,"145":1,"146":1},"2":{"5":1,"6":2,"10":1,"16":1,"22":3,"24":1,"25":1,"100":1,"134":1,"140":1,"198":1,"223":2}}],["u32",{"2":{"14":2,"15":1,"17":1,"22":2,"36":3,"37":1,"39":10,"42":2,"203":6,"208":2}}],["u8",{"2":{"14":1,"17":1,"22":1,"33":1,"34":1,"37":1,"38":1,"39":2,"60":6,"142":1,"144":3,"145":3}}],["us",{"2":{"130":1,"180":1}}],["usage",{"0":{"71":1,"136":1,"160":1,"174":1,"188":1,"193":1,"226":1,"228":1},"1":{"137":1,"138":1,"175":1}}],["usize",{"2":{"38":1,"60":3,"142":1}}],["using",{"0":{"8":1,"157":1,"198":1},"1":{"199":1},"2":{"1":1,"8":1,"9":1,"10":1,"19":1,"22":1,"26":1,"29":2,"32":1,"34":1,"44":2,"49":1,"53":1,"79":1,"82":1,"91":1,"138":1,"149":1,"157":2,"180":1,"195":2,"198":2,"201":1,"203":1,"216":1,"218":1}}],["usually",{"2":{"182":1}}],["usual",{"2":{"36":1}}],["users",{"2":{"106":2,"113":1}}],["uses",{"2":{"26":1,"54":1,"118":1,"121":1,"180":2,"182":1,"195":1}}],["useful",{"0":{"57":1},"2":{"15":1,"35":1,"39":1,"61":1}}],["use",{"0":{"225":1,"227":1},"1":{"226":1,"228":1},"2":{"9":2,"19":1,"22":3,"24":2,"26":2,"32":1,"37":1,"39":8,"41":1,"42":4,"49":5,"53":4,"54":1,"55":1,"56":5,"58":2,"61":1,"62":1,"63":1,"69":1,"78":1,"83":1,"85":1,"91":1,"112":2,"116":1,"118":1,"121":1,"136":1,"137":1,"138":1,"141":1,"145":1,"149":3,"181":1,"184":3,"187":1,"195":1,"197":1,"198":2,"203":5,"206":1,"210":7,"213":2,"214":1,"216":3,"217":5,"227":3}}],["used",{"2":{"8":1,"9":1,"10":1,"11":1,"22":1,"34":1,"35":1,"61":1,"63":1,"70":2,"111":1,"182":1,"195":1,"197":1,"198":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1}}],["unreal",{"2":{"133":1}}],["unrestricted",{"2":{"113":1}}],["unassigned",{"2":{"88":1}}],["unaudited",{"2":{"83":1}}],["unhinged",{"2":{"79":1}}],["unwrap",{"2":{"56":1,"210":1,"212":1}}],["unless",{"2":{"46":1}}],["universally",{"2":{"113":1}}],["unity",{"2":{"130":1,"133":1,"187":1}}],["unit",{"0":{"55":1,"210":1},"2":{"55":1}}],["units",{"2":{"22":1,"24":1,"116":1,"202":2,"210":1,"217":1}}],["uniquely",{"2":{"34":1}}],["unique",{"2":{"7":1,"61":2,"130":1,"198":2}}],["unfamiliar",{"2":{"22":1}}],["underdark",{"2":{"79":1}}],["underworld",{"2":{"79":1}}],["understand",{"2":{"47":1,"58":1}}],["understanding",{"2":{"7":2,"105":1,"106":1,"200":1}}],["under",{"2":{"2":1,"79":1}}],["guaranteed",{"2":{"118":1}}],["guarantees",{"2":{"113":1}}],["gui",{"2":{"163":1}}],["guiltygyoza",{"2":{"114":2}}],["guide",{"0":{"82":1,"97":1,"139":1,"151":1,"221":1},"1":{"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1},"2":{"1":1,"3":1,"81":1,"89":1,"95":3,"106":1,"198":1,"219":1,"220":2,"221":2}}],["gubsheep",{"2":{"114":1}}],["gg",{"2":{"83":2,"155":1,"228":1}}],["grows",{"2":{"179":1}}],["groups",{"2":{"176":1}}],["grid",{"2":{"79":1}}],["grpc",{"0":{"184":1},"2":{"67":1,"184":4,"185":1,"186":1,"188":1,"194":2,"199":1}}],["great",{"2":{"62":1,"177":1,"184":1,"205":1,"208":1,"219":1}}],["graphqql",{"2":{"185":1}}],["graphql",{"0":{"171":1,"173":1},"1":{"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1},"2":{"26":7,"172":2,"173":3,"175":2,"177":1,"178":1,"179":1,"182":2,"183":1,"186":1,"188":2,"194":2,"197":1,"199":1}}],["graphical",{"2":{"133":1}}],["graphics",{"2":{"133":2}}],["graphiql",{"2":{"26":4}}],["grant",{"2":{"6":2,"60":2}}],["give",{"0":{"133":1}}],["given",{"2":{"48":1,"127":1,"161":1,"223":1,"232":3,"234":1}}],["git",{"2":{"13":1,"25":1,"83":1,"91":3,"98":2,"136":1,"137":1,"138":1,"166":1,"202":1}}],["github",{"2":{"3":1,"13":1,"25":1,"29":1,"83":1,"88":1,"91":2,"98":1,"123":1,"138":1,"166":1,"202":1}}],["gap",{"2":{"219":1}}],["garbage",{"2":{"195":1}}],["gas",{"2":{"55":2,"56":1,"118":1,"210":2,"217":1}}],["gain",{"2":{"46":1,"200":1}}],["gateway",{"2":{"45":1}}],["gaming",{"2":{"1":1,"78":1,"114":1,"119":1,"129":1,"130":1}}],["gameturnimpl",{"2":{"207":1}}],["gameturntrait",{"2":{"207":3}}],["gameturn",{"2":{"203":1,"207":3,"208":1,"210":4}}],["gametrait",{"2":{"15":1}}],["gameplay",{"2":{"132":1}}],["gameimpl",{"2":{"15":1}}],["gamesettings",{"2":{"36":1}}],["gamestatusfelt252",{"2":{"15":1}}],["gamestatus",{"2":{"15":11}}],["games",{"0":{"115":1,"131":1},"1":{"116":1,"117":1,"118":1,"119":1,"132":1,"133":1},"2":{"1":2,"79":1,"113":1,"115":1,"122":2,"124":2,"129":1,"130":3,"131":1,"132":1}}],["game",{"0":{"1":1,"41":1,"124":1,"127":1,"198":1,"219":1},"1":{"2":1,"3":1,"42":1,"43":1,"44":1,"45":1,"199":1,"220":1,"221":1},"2":{"1":3,"14":1,"15":10,"19":1,"36":3,"40":1,"41":1,"42":1,"61":1,"79":6,"113":1,"114":1,"115":1,"127":4,"130":2,"132":2,"155":1,"183":1,"200":1,"202":2,"203":7,"204":2,"207":3,"208":10,"209":2,"210":27,"212":2,"213":3,"214":3,"216":1,"217":9,"218":5,"220":4,"221":1}}],["global",{"2":{"36":2}}],["glimpse",{"2":{"27":1}}],["g",{"2":{"22":1,"24":1,"83":1,"136":1,"203":1}}],["gt",{"2":{"15":6,"17":3,"22":8,"25":10,"26":1,"31":2,"35":4,"38":4,"39":1,"42":2,"49":1,"53":1,"56":2,"60":32,"83":1,"142":4,"144":1,"145":1,"147":2,"175":1,"183":1,"188":1,"197":4,"207":31,"208":2,"210":5,"213":2,"217":2,"232":4,"234":1}}],["goal",{"2":{"219":2}}],["goalkeeper",{"2":{"38":1,"142":1}}],["got",{"2":{"213":1}}],["godot",{"2":{"133":1}}],["governed",{"2":{"125":1}}],["governance",{"2":{"36":1}}],["goerli",{"2":{"83":2}}],["good",{"2":{"55":1,"220":1}}],["goblinactionsimpl",{"2":{"39":1}}],["goblin",{"2":{"39":10}}],["goblins",{"2":{"39":2}}],["go",{"2":{"14":1,"26":2,"130":1,"177":1,"198":1,"203":1}}],["generic",{"2":{"176":1}}],["general",{"0":{"197":1},"2":{"118":1,"119":1,"126":1}}],["generalized",{"2":{"7":1,"115":1}}],["generative",{"2":{"79":1}}],["generating",{"2":{"7":1,"229":1}}],["generates",{"2":{"42":1,"176":1}}],["generated",{"2":{"26":1,"176":1,"185":1}}],["generate",{"2":{"6":1,"15":1,"61":2,"119":1}}],["getting",{"2":{"20":1,"106":1}}],["get",{"0":{"3":1,"9":1,"72":1},"2":{"9":5,"19":2,"22":8,"24":4,"25":1,"26":1,"34":3,"39":1,"42":5,"45":1,"49":3,"53":8,"56":3,"62":2,"94":1,"123":1,"136":1,"172":1,"178":1,"182":1,"183":1,"208":5,"210":9,"213":3,"214":1,"216":1,"217":5,"219":2}}],["old",{"2":{"198":1}}],["ohayoo",{"2":{"83":1}}],["optimizing",{"2":{"218":1}}],["optimized",{"2":{"119":1}}],["options",{"0":{"168":1,"196":1,"197":1},"1":{"197":1},"2":{"160":1,"193":1,"232":1,"234":1}}],["optional",{"2":{"143":1,"146":1}}],["option",{"2":{"60":1,"90":1,"195":1}}],["operates",{"2":{"118":1}}],["operation",{"0":{"177":1},"1":{"178":1,"179":1,"180":1,"181":1}}],["operations",{"0":{"182":1},"1":{"183":1},"2":{"7":1,"26":1,"116":1,"175":1}}],["operating",{"2":{"113":1}}],["opens",{"2":{"182":1}}],["opensource",{"2":{"126":1}}],["opening",{"2":{"110":1}}],["openness",{"2":{"4":1}}],["open",{"2":{"1":1,"2":1,"4":1,"22":2,"25":1,"26":2,"87":1,"88":1,"109":2,"110":1,"113":3,"116":1,"121":1,"123":2,"130":1,"198":1,"201":1}}],["omit",{"2":{"53":1}}],["override",{"2":{"100":1}}],["over",{"2":{"41":1,"118":1,"132":1}}],["overview",{"0":{"69":1},"2":{"27":1,"157":1,"166":1}}],["observe",{"2":{"26":1,"178":1}}],["owns",{"0":{"121":1}}],["own",{"2":{"16":1,"26":1,"63":1,"79":1,"83":1,"218":2}}],["owners",{"2":{"6":1,"30":1}}],["owner",{"2":{"4":1,"6":3,"47":1,"60":3}}],["others",{"2":{"218":1,"219":1}}],["otherwise",{"2":{"207":1}}],["other",{"2":{"9":1,"28":2,"63":1,"70":1,"109":1,"110":1,"127":1,"176":1}}],["origins",{"2":{"197":4}}],["origami",{"0":{"40":1},"2":{"40":2,"78":1}}],["org",{"2":{"29":1,"93":1,"135":1}}],["organize",{"2":{"26":1}}],["organizational",{"0":{"2":1}}],["order",{"2":{"26":1}}],["or",{"2":{"4":1,"7":1,"11":1,"13":1,"26":1,"29":2,"42":1,"70":2,"78":1,"91":2,"100":1,"109":2,"110":1,"113":1,"116":1,"128":1,"133":1,"134":1,"136":1,"138":2,"150":1,"161":1,"164":1,"177":1,"179":1,"180":1,"182":1,"184":1,"195":1,"197":1,"208":1,"218":2,"223":1,"232":1,"234":1}}],["ought",{"2":{"46":1}}],["our",{"2":{"3":2,"22":2,"26":4,"128":1,"165":1,"182":1,"189":1,"198":2,"203":1,"204":1,"208":1,"212":2,"213":1,"216":3,"218":1,"221":1}}],["outlines",{"2":{"142":1}}],["outputted",{"2":{"156":1}}],["output",{"2":{"25":1,"26":3,"177":2,"178":1,"182":1,"183":1}}],["out",{"2":{"1":1,"3":1,"69":1,"109":1,"115":1,"128":1,"131":1,"157":1,"207":3,"208":2}}],["online",{"2":{"79":1}}],["only",{"2":{"5":1,"6":1,"52":1,"113":1,"177":1,"195":1}}],["ones",{"2":{"164":2,"198":1}}],["one",{"2":{"22":1,"34":1,"59":1,"118":1,"125":1,"136":1,"163":1}}],["once",{"2":{"22":1,"26":1,"113":1,"156":1,"179":1,"198":2,"199":1}}],["onchain",{"0":{"41":1,"124":1},"1":{"42":1,"43":1,"44":1,"45":1},"2":{"1":1,"78":1,"79":6,"122":1,"124":3,"125":1,"130":1,"188":1}}],["on",{"0":{"82":1,"129":1},"2":{"1":2,"9":1,"14":1,"21":1,"22":1,"24":1,"25":1,"26":4,"28":1,"29":1,"42":2,"47":1,"63":1,"79":5,"80":1,"83":1,"90":1,"93":1,"100":1,"113":3,"114":1,"115":1,"116":1,"119":1,"123":1,"124":2,"127":1,"128":1,"129":1,"130":2,"131":1,"132":4,"138":1,"141":1,"163":1,"166":1,"175":1,"176":1,"182":3,"183":1,"190":1,"195":2,"203":1,"205":1,"206":1,"207":1,"213":2,"219":1,"220":2,"221":1}}],["often",{"2":{"61":1}}],["offline=",{"2":{"225":1}}],["offline",{"0":{"224":1,"225":1},"1":{"225":1,"226":2},"2":{"168":1,"225":1,"226":2}}],["off",{"2":{"118":1,"127":2}}],["offering",{"2":{"118":1}}],["offer",{"2":{"113":1,"133":1}}],["offers",{"2":{"6":1,"132":1,"173":1,"178":1}}],["offchain",{"2":{"28":1}}],["offset",{"0":{"181":1},"2":{"17":2,"60":2,"179":1,"181":2}}],["of",{"0":{"22":1,"106":1,"107":1},"2":{"1":2,"2":1,"6":1,"9":2,"13":1,"14":1,"15":4,"16":1,"17":2,"21":1,"22":8,"24":4,"25":1,"26":3,"27":2,"33":1,"35":1,"38":1,"39":2,"40":1,"42":2,"45":1,"49":3,"51":1,"53":1,"54":1,"55":3,"58":2,"63":2,"72":2,"78":1,"79":4,"80":2,"81":1,"90":1,"91":1,"92":1,"93":1,"106":2,"107":1,"109":3,"113":9,"115":2,"116":5,"118":4,"122":2,"127":3,"130":2,"131":2,"132":4,"133":1,"137":1,"139":1,"140":1,"142":3,"145":1,"147":1,"149":1,"157":1,"161":1,"163":2,"164":1,"166":1,"172":2,"173":1,"176":5,"177":4,"178":2,"179":1,"180":5,"182":1,"183":1,"186":1,"195":1,"197":3,"200":1,"202":1,"203":1,"207":6,"208":5,"213":2,"218":1,"219":1,"220":2,"223":1,"232":1,"234":1}}],["wp",{"2":{"217":11}}],["w",{"2":{"197":1}}],["wsl",{"2":{"138":1}}],["wrong",{"2":{"56":3}}],["writing",{"0":{"55":1,"56":1,"111":1},"1":{"57":1,"112":1},"2":{"53":1,"55":1,"111":1}}],["written",{"2":{"10":1,"14":1}}],["write",{"2":{"7":1,"46":1,"48":1,"54":1,"56":2,"58":1,"116":1,"143":1,"208":1,"219":1}}],["writer",{"2":{"6":4,"60":3,"232":4}}],["won",{"2":{"220":1}}],["wondering",{"2":{"177":1}}],["worry",{"2":{"220":1}}],["worth",{"2":{"60":1,"92":1}}],["workaround",{"2":{"195":1}}],["working",{"2":{"119":1,"219":1}}],["workloads",{"2":{"90":1}}],["works",{"2":{"58":1}}],["workspace",{"2":{"26":1}}],["work",{"2":{"26":1,"79":1,"109":1,"172":2}}],["world",{"0":{"18":1,"29":1,"58":1,"60":1,"74":1,"75":1,"125":1,"170":1,"212":1},"1":{"59":1,"60":1,"61":1},"2":{"4":3,"5":1,"7":1,"8":1,"9":6,"10":3,"11":1,"12":1,"13":1,"14":2,"16":2,"17":3,"18":1,"19":5,"21":2,"22":18,"24":6,"25":6,"26":8,"28":2,"29":4,"32":1,"34":2,"39":7,"42":7,"44":1,"45":3,"46":3,"47":2,"49":7,"52":1,"53":13,"56":11,"57":3,"58":9,"59":2,"60":4,"61":1,"79":4,"80":1,"82":2,"83":3,"84":1,"94":1,"106":1,"113":5,"125":2,"133":1,"144":1,"145":1,"146":1,"149":1,"163":2,"175":2,"176":3,"178":1,"179":1,"185":1,"188":3,"192":1,"194":2,"197":2,"198":4,"199":2,"208":9,"209":2,"210":19,"212":8,"213":1,"214":1,"217":9,"232":5,"233":1,"234":6}}],["worldspawned",{"2":{"18":1}}],["worlds",{"0":{"113":1},"1":{"114":1},"2":{"1":1,"2":1,"4":2,"13":1,"25":1,"27":1,"28":1,"29":2,"49":1,"70":1,"92":1,"113":7,"114":5,"116":1,"119":1,"125":1,"132":2,"139":1,"163":1,"164":1,"185":1}}],["wouldn",{"2":{"130":1}}],["would",{"2":{"9":1,"34":1,"39":1,"69":1,"127":1}}],["wallet",{"2":{"209":1}}],["wallets",{"2":{"64":1}}],["wars",{"2":{"79":2}}],["warmly",{"2":{"1":1,"87":1}}],["wasm",{"0":{"68":1},"2":{"67":1,"68":2,"70":1,"115":1,"119":1,"187":1}}],["was",{"2":{"49":1,"122":1,"218":1}}],["wanting",{"2":{"89":1,"95":1}}],["want",{"2":{"35":1,"56":1,"63":1,"69":1,"127":1,"172":1,"201":1,"218":1}}],["way",{"2":{"7":1,"48":1,"62":1,"64":1,"90":1,"132":1,"163":1,"184":2}}],["ways",{"0":{"108":1},"1":{"109":1,"110":1},"2":{"7":1,"14":1,"203":1,"218":1}}],["wish",{"2":{"199":1}}],["winner",{"2":{"127":1,"203":1}}],["wind",{"2":{"114":1}}],["windows",{"0":{"103":1},"2":{"90":1,"138":1}}],["wired",{"2":{"114":1}}],["will",{"2":{"6":1,"7":1,"11":1,"14":1,"17":4,"19":1,"25":1,"26":4,"27":1,"29":2,"39":2,"54":1,"57":2,"82":1,"84":1,"90":2,"93":2,"109":1,"110":1,"113":1,"138":1,"166":1,"177":2,"178":1,"179":1,"182":1,"183":2,"190":1,"195":1,"198":3,"203":2,"204":2,"220":1,"221":1,"230":1,"231":1,"232":1,"234":2}}],["without",{"2":{"113":1,"225":1}}],["within",{"2":{"4":2,"7":1,"8":1,"14":2,"15":1,"19":1,"42":1,"47":2,"54":1,"116":2,"119":1,"125":1,"129":1,"144":1,"147":1,"183":1,"231":1}}],["with",{"0":{"39":1,"80":1,"112":1},"1":{"81":1,"82":1},"2":{"1":3,"4":1,"7":1,"8":1,"13":1,"17":2,"18":1,"19":1,"20":1,"21":1,"22":3,"24":1,"26":5,"28":1,"32":1,"33":1,"34":2,"36":1,"41":1,"42":1,"43":1,"44":1,"45":1,"49":1,"53":1,"56":1,"57":1,"58":3,"60":1,"62":1,"65":1,"70":2,"78":1,"79":2,"80":1,"82":1,"85":1,"88":1,"89":1,"90":3,"92":1,"93":1,"95":1,"105":1,"113":2,"115":1,"118":1,"119":1,"124":1,"127":1,"133":1,"134":1,"136":1,"140":1,"144":1,"145":1,"149":1,"150":1,"163":2,"172":2,"178":2,"182":3,"187":1,"194":1,"198":7,"202":3,"203":1,"209":1,"210":1,"212":3,"218":2,"220":1,"227":1,"228":1,"232":3}}],["why",{"0":{"122":1}}],["who",{"0":{"121":1},"2":{"130":1}}],["whole",{"2":{"48":1}}],["whether",{"2":{"164":1}}],["where",{"2":{"33":1,"127":1,"198":2,"204":1}}],["whenever",{"2":{"26":1,"182":1}}],["when",{"2":{"5":1,"14":1,"17":2,"18":2,"24":2,"26":1,"35":1,"36":1,"48":1,"52":1,"58":1,"60":1,"110":1,"122":1,"176":1,"182":2,"206":1,"216":1,"218":1,"227":1}}],["white",{"2":{"203":2,"207":3,"208":1,"209":1,"210":18,"213":5,"214":5,"216":3,"217":14}}],["while",{"2":{"21":1,"33":1,"36":1,"39":1,"42":1,"113":5,"118":1,"133":1,"203":1}}],["which",{"2":{"6":1,"9":1,"11":1,"13":1,"14":2,"24":1,"26":1,"35":1,"49":1,"53":1,"60":1,"93":1,"115":1,"118":1,"119":2,"129":2,"132":2,"139":1,"144":1,"146":1,"173":1,"182":2,"198":2,"213":1}}],["what",{"0":{"40":1,"47":1,"123":1,"124":1,"125":1,"126":1,"127":1,"130":1,"133":1,"220":1,"221":1},"1":{"131":1,"132":1,"133":1},"2":{"1":1,"16":1,"27":1,"72":1,"109":2,"127":1,"172":1,"201":1,"216":1,"219":1}}],["were",{"2":{"127":1}}],["well",{"2":{"106":1,"116":1}}],["welcome",{"2":{"105":1,"110":1,"130":1,"198":1}}],["welcomes",{"2":{"1":1,"87":1}}],["websockets",{"2":{"182":1}}],["website",{"2":{"29":2,"74":1,"75":1,"76":1}}],["webassembly",{"2":{"115":1,"119":1}}],["web",{"2":{"26":1,"124":1,"172":1}}],["we",{"0":{"220":1},"2":{"9":2,"10":1,"14":2,"15":1,"21":2,"22":7,"24":4,"25":2,"26":4,"29":1,"36":2,"39":3,"42":1,"45":1,"47":1,"55":1,"58":1,"89":1,"95":1,"112":2,"113":2,"127":3,"177":1,"182":2,"183":1,"198":4,"203":3,"204":1,"206":1,"207":1,"208":1,"212":4,"213":4,"214":2,"216":4,"220":3,"221":2}}],["weeks",{"2":{"1":1}}],["f",{"2":{"198":1,"199":1}}],["flow",{"0":{"209":1}}],["flags",{"0":{"137":1},"2":{"91":1,"137":1}}],["flexibility",{"2":{"21":1,"36":1,"172":1}}],["fetching",{"2":{"179":1}}],["fetch",{"2":{"177":1,"178":1,"184":1,"223":1}}],["fetched",{"2":{"177":1}}],["few",{"2":{"82":1,"111":1}}],["featuring",{"2":{"80":1}}],["feature",{"2":{"39":1,"88":1,"116":1,"182":1,"218":1}}],["features",{"0":{"164":1},"2":{"32":1,"105":1,"106":1,"113":2}}],["feel",{"2":{"109":1,"110":1,"178":1}}],["fee",{"2":{"25":1,"81":1}}],["felt252",{"2":{"15":2,"17":5,"18":2,"19":2,"60":29}}],["freely",{"2":{"113":1,"116":1}}],["free",{"2":{"109":1,"110":1,"121":1,"178":1}}],["frontend",{"2":{"221":2}}],["frontier",{"2":{"72":1}}],["from",{"0":{"89":1,"166":1,"190":1},"1":{"90":1,"91":1},"2":{"1":1,"4":1,"9":2,"12":1,"19":1,"21":2,"22":3,"24":1,"26":2,"47":1,"54":1,"55":1,"56":1,"81":1,"91":1,"110":1,"113":1,"118":1,"130":1,"136":2,"138":1,"142":1,"163":1,"177":3,"178":2,"180":1,"188":1,"190":1,"197":1,"198":1,"204":1,"207":1,"208":1}}],["framework",{"2":{"21":2,"54":1,"106":1,"116":2}}],["fn",{"2":{"15":4,"19":1,"22":5,"35":4,"38":3,"39":1,"42":2,"49":1,"53":2,"55":2,"56":2,"60":22,"61":1,"142":3,"144":1,"145":1,"207":12,"208":2,"210":3,"217":1}}],["fix",{"2":{"205":1}}],["fixing",{"2":{"110":1}}],["fill",{"2":{"219":1}}],["filtered",{"2":{"183":1}}],["filtering",{"2":{"176":1,"178":1}}],["filepath",{"2":{"197":1}}],["file",{"2":{"13":2,"22":3,"25":3,"29":3,"55":1,"56":1,"195":1,"198":2,"203":3,"204":1,"207":3,"210":1,"216":1}}],["filesystem",{"2":{"195":2}}],["files",{"2":{"13":1,"22":1,"140":1}}],["firt",{"2":{"207":1}}],["firm",{"2":{"113":1}}],["first",{"2":{"21":1,"25":1,"46":1,"58":1,"94":1,"113":1,"180":7,"198":2,"203":1,"213":1}}],["finish",{"2":{"221":1}}],["finished",{"2":{"15":2,"156":1,"198":1,"219":1}}],["finer",{"2":{"176":1}}],["finance",{"2":{"116":1}}],["finding",{"2":{"118":1}}],["find",{"2":{"40":1,"93":1,"109":2,"123":1,"177":1}}],["field",{"2":{"22":4,"34":2,"44":1}}],["fields",{"2":{"9":1,"22":1,"33":1,"34":2,"177":2,"178":1}}],["fit",{"2":{"16":1}}],["familar",{"2":{"203":1}}],["familiarize",{"2":{"92":1}}],["familiarizing",{"2":{"1":1}}],["familiar",{"2":{"20":1}}],["fairness",{"2":{"127":1}}],["fair",{"2":{"127":1}}],["faced",{"2":{"122":1}}],["facilitates",{"2":{"45":1}}],["facilitate",{"2":{"7":1}}],["fast",{"2":{"80":1,"86":1,"185":1,"195":1}}],["false",{"2":{"35":1}}],["faqs",{"0":{"120":1},"1":{"121":1,"122":1,"123":1,"124":1,"125":1,"126":1,"127":1,"128":1,"129":1}}],["faq",{"2":{"14":1}}],["four",{"2":{"221":1}}],["founders",{"2":{"122":1}}],["foundational",{"2":{"42":1}}],["found",{"2":{"25":2,"39":1,"231":1}}],["folder",{"2":{"198":1,"201":2}}],["followed",{"2":{"219":1}}],["follow",{"2":{"34":1,"36":1,"93":1,"95":1,"156":1,"203":1}}],["follows",{"2":{"15":1,"107":1,"198":2,"220":1}}],["following",{"2":{"5":1,"8":1,"17":2,"18":1,"19":1,"22":1,"26":3,"29":1,"89":1,"95":1,"113":1,"136":1,"156":1,"198":4,"199":2,"200":1,"207":1}}],["fomoslg",{"2":{"79":1}}],["focus",{"2":{"42":1,"130":1,"132":1,"163":1}}],["fosters",{"2":{"33":1}}],["forward",{"2":{"180":2}}],["format",{"2":{"147":2,"172":2}}],["forms",{"2":{"113":2}}],["fork",{"2":{"136":2}}],["force",{"2":{"91":3,"119":1,"166":1,"190":1}}],["fortunately",{"2":{"19":1}}],["for",{"0":{"206":1},"1":{"207":1},"2":{"1":2,"6":1,"7":1,"9":2,"13":1,"14":1,"17":2,"18":1,"21":1,"22":4,"24":2,"25":2,"26":2,"27":1,"29":3,"30":2,"34":2,"35":2,"36":4,"38":3,"39":2,"42":2,"44":2,"52":1,"54":2,"56":3,"58":1,"61":1,"65":1,"66":1,"68":1,"70":1,"78":1,"81":1,"82":1,"85":1,"88":2,"93":1,"95":1,"102":1,"105":2,"106":2,"109":1,"111":1,"113":6,"114":1,"115":2,"116":2,"119":1,"121":1,"123":1,"126":1,"127":1,"130":1,"132":1,"141":1,"142":4,"143":1,"144":1,"146":1,"155":1,"157":1,"159":1,"161":1,"163":1,"166":1,"172":2,"173":1,"176":1,"177":1,"178":2,"180":1,"181":1,"182":2,"183":2,"185":2,"187":1,"190":1,"192":1,"194":3,"195":2,"197":3,"198":2,"199":1,"202":1,"203":1,"204":1,"206":1,"207":5,"208":2,"216":1,"218":1,"219":3,"220":1,"223":1,"226":1,"229":1,"232":1}}],["fuel",{"2":{"115":1}}],["fun",{"2":{"113":1}}],["fundamental",{"2":{"113":1}}],["functioning",{"2":{"44":1}}],["functionality",{"2":{"35":1,"63":1,"172":1,"173":2}}],["functions",{"0":{"57":1},"2":{"7":1,"22":2,"24":3,"35":1,"39":1,"47":1,"49":1,"53":1,"55":2,"58":1,"116":1,"144":1,"150":1,"208":1,"220":1}}],["function",{"0":{"24":1,"45":1,"51":1,"52":1,"150":1,"208":1},"1":{"209":1,"210":1,"211":1,"212":1,"213":1,"214":1,"215":1},"2":{"4":1,"7":1,"22":1,"24":1,"45":1,"46":1,"49":1,"51":1,"52":1,"56":2,"57":1,"145":1,"204":1,"208":2,"209":1,"210":1,"213":2,"214":1,"216":1}}],["further",{"2":{"45":1}}],["furthermore",{"2":{"39":1}}],["future",{"2":{"36":1,"163":1,"178":1}}],["full",{"0":{"60":1,"217":1},"2":{"13":1,"19":1,"79":1,"93":1,"207":1,"216":1,"220":2}}],["fully",{"2":{"1":1,"113":1,"185":1}}],["tsubasa",{"2":{"149":1}}],["turn",{"2":{"178":1,"207":4,"208":6,"210":11,"212":1}}],["turing",{"2":{"116":1,"126":1}}],["tutorials",{"2":{"219":1}}],["tutorial",{"2":{"157":1,"198":1,"207":1,"218":1,"220":1}}],["tuple",{"2":{"9":1,"38":4,"142":4}}],["ty",{"2":{"38":7,"142":8}}],["typo",{"2":{"110":1}}],["typename",{"2":{"182":3}}],["typed",{"2":{"144":1,"185":1}}],["type",{"2":{"38":4,"39":1,"142":8,"179":2,"203":1,"207":1,"208":6,"210":6,"213":2,"214":2,"217":10}}],["types",{"0":{"37":1,"38":1},"2":{"26":1,"32":1,"33":1,"37":2,"38":2,"142":3}}],["typical",{"2":{"22":1}}],["tcontractstate",{"2":{"22":3,"42":2,"144":3}}],["terms",{"2":{"118":1}}],["terminal",{"2":{"25":4,"26":4,"138":1,"175":1,"198":2,"199":1}}],["terminology",{"2":{"22":1,"113":1}}],["technologies",{"2":{"172":1}}],["technology",{"2":{"113":1,"172":1}}],["technical",{"2":{"118":1}}],["tech",{"2":{"115":1}}],["team",{"2":{"78":1,"79":2,"119":2}}],["templates",{"0":{"78":1},"2":{"78":1}}],["testnets",{"2":{"85":1}}],["testnet",{"2":{"80":1}}],["testing",{"0":{"54":1,"148":1,"150":1},"1":{"55":1,"56":1,"57":1,"149":1,"150":1},"2":{"54":2,"55":1,"80":1,"149":1,"195":1,"208":1,"209":1}}],["test",{"0":{"57":1,"209":1,"213":1,"214":1,"216":1,"231":1},"1":{"217":1,"218":1},"2":{"22":1,"54":2,"55":8,"56":11,"57":2,"100":2,"149":2,"150":2,"155":1,"169":1,"209":2,"210":14,"212":7,"216":3,"217":1,"220":1,"231":3}}],["tests",{"0":{"55":1,"56":1,"210":1},"1":{"57":1},"2":{"22":1,"54":2,"55":2,"56":6,"202":4,"210":2,"216":1,"217":3,"231":1}}],["tip",{"2":{"137":1}}],["tinkering",{"2":{"113":1}}],["tight",{"2":{"21":1}}],["time",{"2":{"5":1,"7":1,"16":1,"22":1,"24":1,"26":1,"30":1,"41":1,"130":1,"177":1,"182":1}}],["t",{"0":{"133":1},"2":{"21":1,"26":1,"60":24,"82":1,"113":1,"130":1,"133":1,"215":1,"218":1,"219":1,"220":2}}],["tandem",{"2":{"194":1}}],["tangible",{"2":{"39":1}}],["tasks",{"2":{"163":1}}],["tarrencev",{"2":{"136":4}}],["targeted",{"2":{"182":1}}],["target",{"2":{"13":1,"202":1}}],["tallies",{"2":{"39":1}}],["takeaways",{"2":{"142":1}}],["takes",{"2":{"116":1,"131":1}}],["take",{"2":{"36":1,"42":1,"110":1}}],["taking",{"2":{"21":1}}],["tag",{"2":{"22":1,"83":1,"88":1}}],["tables",{"2":{"26":1}}],["table",{"2":{"17":3}}],["two",{"2":{"14":1,"24":1,"113":1,"176":1,"179":1,"180":1,"185":1}}],["twitter",{"2":{"3":1,"29":1,"72":1,"77":1}}],["trust",{"2":{"127":1}}],["trustless",{"2":{"113":1}}],["true",{"2":{"13":1,"35":1,"83":1,"202":1}}],["try",{"2":{"56":1,"205":1,"207":1,"210":1,"212":1,"218":1}}],["transactions",{"0":{"178":1},"2":{"178":3,"194":2}}],["transaction",{"2":{"118":1,"127":1,"178":2,"183":1,"194":1}}],["transactionhash",{"2":{"26":2,"178":4,"183":3}}],["transform",{"2":{"41":1}}],["traits",{"0":{"35":1,"206":1},"1":{"207":1},"2":{"32":1,"35":1,"39":2,"149":1,"206":1,"207":1}}],["trait",{"2":{"15":3,"22":2,"35":3,"38":1,"39":1,"42":1,"53":1,"60":1,"141":1,"142":1,"144":2,"207":6}}],["treated",{"2":{"14":1,"22":1,"203":1}}],["tlsv1",{"2":{"101":1}}],["tl",{"2":{"7":1,"32":1,"46":1,"184":1}}],["too",{"2":{"220":1}}],["toolchain",{"2":{"20":1,"29":1,"30":1,"89":1,"95":1,"119":1,"129":1,"155":1,"159":1}}],["tool",{"2":{"6":1,"13":2,"29":1,"130":1,"163":2,"198":1,"202":2,"228":2}}],["tools",{"2":{"1":1,"93":1,"122":1,"131":1}}],["torri",{"2":{"199":1}}],["torii",{"0":{"67":1,"68":1,"70":1,"171":1,"185":1,"186":1,"187":1,"191":1,"199":1},"1":{"71":1,"172":1,"173":1,"174":1,"175":1,"176":1,"177":1,"178":1,"179":1,"180":1,"181":1,"182":1,"183":1,"186":1,"187":1,"188":1,"192":1,"193":1,"194":1,"195":1,"196":1,"197":1},"2":{"11":2,"16":1,"17":1,"18":1,"19":1,"26":20,"67":2,"68":2,"69":1,"70":1,"91":3,"93":1,"155":1,"159":1,"175":3,"176":1,"179":1,"184":1,"185":3,"186":1,"187":1,"188":2,"189":1,"190":3,"192":1,"193":1,"194":1,"195":2,"199":2}}],["todo",{"2":{"146":1,"151":1}}],["tower",{"2":{"79":1}}],["topic",{"2":{"125":1}}],["top",{"2":{"63":1}}],["tokens",{"2":{"40":1}}],["token",{"2":{"38":1,"142":1,"144":1,"145":1,"147":2}}],["totalcount",{"2":{"178":2,"180":2}}],["total",{"2":{"25":2}}],["touched",{"2":{"24":1}}],["toml",{"2":{"13":2,"22":1,"25":1,"29":2,"42":1,"83":1,"84":1,"198":2,"202":2,"228":1}}],["to",{"0":{"41":1,"82":1,"83":1,"84":1,"85":1,"86":1,"87":1,"88":1,"105":1,"108":1,"139":1,"140":1,"151":1,"183":1},"1":{"42":1,"43":1,"44":1,"45":1,"84":1,"85":1,"86":1,"88":1,"106":1,"107":1,"108":1,"109":2,"110":2,"111":1,"112":1,"140":1,"141":1,"142":1,"143":1,"144":1,"145":1,"146":1,"147":1,"148":1,"149":1,"150":1},"2":{"1":2,"2":1,"4":5,"5":1,"6":4,"7":5,"8":1,"9":4,"10":1,"11":1,"13":1,"14":5,"16":3,"17":1,"20":1,"21":3,"22":12,"24":2,"25":5,"26":18,"27":2,"28":1,"29":6,"30":1,"32":1,"33":3,"34":5,"35":1,"36":6,"37":1,"38":2,"39":1,"42":1,"44":1,"45":1,"46":5,"47":2,"48":3,"49":2,"53":3,"54":3,"55":2,"56":1,"58":5,"59":2,"61":2,"62":2,"63":1,"64":1,"67":1,"69":4,"70":2,"79":1,"80":1,"81":2,"82":3,"83":3,"84":1,"85":2,"88":3,"89":1,"90":1,"91":1,"92":1,"94":2,"95":3,"100":3,"105":1,"106":5,"109":1,"110":3,"113":8,"115":3,"116":4,"118":2,"119":4,"121":1,"122":2,"123":1,"124":1,"126":2,"127":4,"128":1,"129":1,"130":6,"132":3,"134":1,"136":10,"138":1,"139":1,"140":3,"142":3,"143":1,"144":1,"145":3,"146":2,"147":1,"149":1,"150":1,"156":2,"157":1,"163":3,"172":5,"173":3,"175":1,"176":3,"177":1,"178":4,"179":2,"180":3,"181":1,"182":9,"183":3,"184":3,"185":3,"187":2,"188":1,"190":1,"194":2,"195":4,"197":3,"198":10,"199":2,"200":1,"202":3,"203":3,"205":1,"207":3,"208":2,"210":1,"212":1,"213":3,"214":2,"215":1,"216":11,"217":3,"218":2,"219":6,"220":3,"221":2,"227":1,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":7}}],["those",{"2":{"105":1,"106":1}}],["thorough",{"2":{"80":1}}],["thriving",{"2":{"72":1}}],["throughput",{"2":{"118":1}}],["throughout",{"2":{"111":1,"113":1,"140":1,"183":1}}],["through",{"2":{"46":1,"115":1,"118":1,"184":1,"198":2}}],["thinkers",{"2":{"72":1}}],["think",{"2":{"48":1,"109":1}}],["this",{"0":{"221":1},"2":{"0":1,"1":2,"4":2,"6":1,"11":1,"13":1,"14":2,"15":2,"17":4,"19":1,"20":1,"21":5,"22":8,"25":5,"26":10,"27":1,"28":1,"30":2,"33":1,"34":3,"35":2,"36":2,"39":2,"42":2,"44":1,"45":2,"49":3,"51":1,"52":1,"53":1,"54":1,"55":1,"56":1,"57":1,"58":1,"59":1,"60":1,"61":1,"63":1,"81":1,"85":1,"93":1,"95":2,"111":1,"113":5,"115":1,"116":1,"127":3,"128":1,"132":2,"136":4,"140":1,"141":1,"144":1,"145":1,"146":1,"161":1,"166":1,"172":2,"177":3,"178":2,"179":1,"182":8,"183":3,"190":1,"195":1,"198":3,"202":5,"203":4,"204":2,"207":2,"208":3,"216":2,"218":2,"219":4,"220":4,"221":1,"223":1,"232":2,"234":3}}],["than",{"2":{"118":1,"143":1,"204":1}}],["thanks",{"2":{"16":1,"127":1}}],["that",{"2":{"7":1,"9":4,"14":3,"16":1,"19":1,"20":1,"21":1,"22":4,"25":5,"26":5,"34":3,"35":1,"36":1,"39":1,"40":1,"41":1,"47":2,"52":1,"54":1,"56":1,"58":1,"60":1,"69":1,"78":1,"82":1,"88":1,"100":1,"105":1,"106":1,"109":1,"113":5,"116":1,"118":1,"124":1,"125":2,"127":1,"130":1,"163":1,"172":5,"173":1,"179":1,"182":5,"186":1,"198":2,"203":2,"204":1,"205":1,"208":1,"209":2,"212":1,"213":2,"220":1}}],["thesis",{"2":{"114":1}}],["these",{"2":{"4":1,"7":1,"11":3,"16":2,"18":2,"19":1,"22":1,"24":1,"27":1,"33":1,"36":1,"44":1,"47":1,"49":1,"65":1,"69":1,"105":1,"113":2,"132":1,"138":1,"183":1,"194":1,"218":1}}],["thereby",{"2":{"53":1}}],["there",{"2":{"16":1,"19":1,"113":1,"176":1,"180":1,"185":1,"203":1,"208":1,"218":1}}],["then",{"2":{"9":1,"15":1,"17":2,"34":1,"39":2,"56":1,"84":1,"93":1,"109":1,"145":1,"194":1,"198":3,"205":1,"212":2,"213":1,"214":1,"228":1}}],["their",{"2":{"7":1,"13":1,"42":1,"46":1,"106":1,"113":2,"127":1,"130":1,"213":2}}],["they",{"2":{"7":1,"8":1,"15":1,"22":1,"24":2,"34":1,"39":2,"109":1,"113":2,"116":1,"176":1,"181":1,"183":1,"217":1}}],["them",{"2":{"7":1,"28":1,"32":1,"36":1,"54":1,"80":1,"93":1,"206":1,"216":1}}],["theory",{"2":{"1":1,"14":1,"25":1,"92":1,"106":1}}],["the",{"0":{"1":1,"9":1,"10":1,"11":1,"12":1,"34":1,"42":1,"44":1,"53":1,"58":1,"87":1,"102":1,"106":2,"123":1,"201":1,"202":1,"211":1},"1":{"2":1,"3":1,"59":1,"60":1,"61":1,"88":1,"212":1,"213":1,"214":1},"2":{"1":6,"2":1,"4":4,"5":8,"6":7,"7":2,"8":2,"9":16,"10":6,"11":1,"12":2,"14":6,"15":2,"16":2,"17":7,"18":2,"19":2,"20":2,"21":5,"22":48,"24":24,"25":7,"26":23,"27":1,"28":2,"29":14,"30":1,"32":3,"33":3,"34":9,"35":1,"36":4,"38":7,"39":6,"40":2,"42":8,"44":5,"45":5,"46":3,"47":2,"48":2,"49":7,"52":4,"53":11,"55":5,"56":3,"57":3,"58":13,"59":3,"60":2,"61":1,"63":3,"67":1,"69":2,"72":1,"78":1,"79":11,"80":3,"81":2,"82":1,"84":2,"88":3,"89":2,"90":4,"91":3,"92":3,"93":2,"95":2,"100":2,"101":1,"102":1,"105":4,"106":3,"107":2,"109":2,"110":1,"111":1,"113":20,"114":1,"115":3,"116":8,"118":7,"119":5,"121":2,"122":2,"123":3,"124":2,"125":2,"126":1,"127":7,"128":3,"129":2,"130":7,"131":1,"132":6,"136":5,"138":1,"140":1,"141":1,"142":12,"144":3,"145":4,"146":2,"147":1,"149":4,"150":3,"156":2,"157":3,"161":3,"163":4,"166":3,"172":6,"173":1,"175":1,"176":9,"177":11,"178":5,"179":2,"180":6,"181":2,"182":11,"183":3,"184":2,"185":3,"186":3,"187":1,"189":1,"190":3,"194":8,"195":7,"197":4,"198":23,"199":4,"200":2,"201":2,"202":1,"203":3,"204":3,"205":2,"206":2,"207":2,"208":5,"209":6,"210":1,"213":9,"214":7,"215":1,"216":4,"217":1,"218":6,"219":6,"220":4,"221":3,"222":1,"223":2,"225":1,"229":2,"230":2,"231":2,"232":6,"234":6}}],["b5",{"2":{"217":8}}],["b7",{"2":{"217":4}}],["bp",{"2":{"217":10}}],["b",{"2":{"35":4}}],["but",{"2":{"113":2,"124":1,"125":1,"127":1,"219":1}}],["button",{"2":{"26":1}}],["burner",{"0":{"64":1},"2":{"64":3}}],["bun",{"2":{"63":1,"64":1,"65":1,"66":1,"67":1,"68":1}}],["builds",{"2":{"116":1}}],["builders",{"2":{"72":1}}],["building",{"0":{"89":1,"91":1,"131":2,"219":1,"220":1},"1":{"90":1,"91":1,"132":2,"133":2,"220":1,"221":1},"2":{"25":1,"58":1,"91":1,"106":1,"116":1,"122":2,"130":2,"131":1,"132":1,"163":1,"207":1,"220":1}}],["build",{"0":{"229":1},"2":{"25":2,"63":1,"82":1,"130":1,"169":1,"198":3,"202":1,"205":3,"208":1,"220":1,"226":1,"229":2}}],["built",{"2":{"1":1,"26":1,"28":1,"79":2,"93":1,"176":1,"185":1}}],["baron",{"2":{"79":1}}],["bash",{"2":{"93":1,"135":1,"138":1,"156":1}}],["basics",{"2":{"220":1}}],["basic",{"0":{"203":1,"204":1},"2":{"42":1,"200":1,"203":1,"207":1,"218":1}}],["base",{"2":{"25":1,"60":1}}],["based",{"2":{"22":1,"26":1,"79":1,"132":1,"179":1,"180":1,"181":1,"183":1,"220":1}}],["balance",{"2":{"34":2}}],["backward",{"2":{"180":2}}],["backend",{"2":{"172":1,"186":1}}],["back",{"2":{"26":2,"203":1}}],["bring",{"2":{"133":1}}],["briq",{"0":{"75":1},"2":{"2":1}}],["brave",{"2":{"113":1}}],["branch",{"0":{"137":1},"2":{"91":1,"134":1,"136":8}}],["browsers",{"2":{"124":1}}],["browser",{"2":{"26":1,"115":1,"128":1}}],["brew",{"2":{"136":1}}],["brewing",{"2":{"79":1}}],["breaks",{"2":{"182":1}}],["breakdown",{"0":{"43":1},"1":{"44":1,"45":1}}],["breaking",{"0":{"23":1,"50":1},"1":{"24":1,"51":1,"52":1,"53":1},"2":{"139":1}}],["breeze",{"2":{"25":1}}],["bishop",{"2":{"203":1,"207":1}}],["binding",{"2":{"185":1}}],["bindings",{"2":{"68":1,"70":1,"152":1}}],["binary",{"2":{"164":2,"165":1,"189":1}}],["binaries",{"0":{"138":1},"2":{"138":1}}],["bin",{"2":{"91":1}}],["bit",{"2":{"21":1,"26":1}}],["bibliothecadao",{"2":{"2":1}}],["board",{"2":{"203":1,"207":3,"208":4,"213":1,"214":1}}],["boilerplate",{"0":{"202":1},"2":{"42":1,"53":1,"116":1,"146":1,"202":1}}],["boxtrait",{"2":{"39":1}}],["box",{"2":{"39":1}}],["bootstrap",{"2":{"188":1}}],["bool",{"2":{"35":4,"60":2,"144":1,"145":1,"207":9}}],["book",{"0":{"105":1,"106":1},"1":{"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1},"2":{"1":1,"105":2,"106":2,"107":1,"110":1,"111":1,"115":1,"117":2,"219":2}}],["both",{"2":{"21":1,"22":1,"24":1,"34":1,"90":1,"106":1,"176":1,"179":1,"180":1}}],["between",{"2":{"219":1}}],["better",{"2":{"138":1,"218":1}}],["becoming",{"2":{"172":1}}],["becomes",{"2":{"176":1}}],["become",{"2":{"115":1,"179":1}}],["behavior",{"2":{"132":1}}],["behind",{"2":{"42":1,"53":1,"119":1}}],["believers",{"2":{"113":1}}],["believe",{"2":{"113":1}}],["below",{"2":{"38":1,"142":1,"210":1,"216":1}}],["beware",{"2":{"79":1}}],["beer",{"2":{"79":2}}],["been",{"2":{"9":1,"14":1,"26":1,"30":1,"113":1,"140":2,"144":1,"198":1,"209":1}}],["bear",{"2":{"22":1}}],["beginners",{"2":{"220":1}}],["beginner",{"2":{"219":1}}],["beginning",{"2":{"218":1}}],["begin",{"2":{"21":1}}],["benefit",{"2":{"21":1,"176":1}}],["beneficial",{"2":{"19":1}}],["be",{"2":{"10":1,"11":1,"13":1,"14":2,"17":1,"19":1,"22":2,"25":3,"29":1,"34":1,"35":1,"36":1,"39":1,"40":1,"46":1,"48":1,"58":1,"60":1,"61":1,"70":2,"82":1,"85":1,"88":1,"106":1,"109":2,"110":1,"113":5,"127":2,"130":1,"144":1,"145":1,"165":1,"181":2,"183":1,"185":1,"189":1,"195":3,"203":1,"204":1,"208":1,"210":9,"213":2,"214":2,"216":1,"217":10,"219":1,"227":1,"228":1}}],["before",{"2":{"9":1,"46":1,"80":1,"92":1,"145":1,"180":3,"198":1,"200":1,"206":1,"216":1,"219":1}}],["best",{"2":{"1":1,"33":1,"55":1}}],["black",{"2":{"203":2,"207":3,"208":1,"209":1,"210":9,"213":2,"216":3,"217":11}}],["blazingly",{"2":{"86":1,"185":1}}],["blog",{"2":{"72":1}}],["blocks",{"2":{"194":1}}],["block",{"2":{"26":11,"59":1,"197":3,"199":1}}],["blockchains",{"2":{"113":1,"129":1}}],["blockchain",{"2":{"4":1,"113":2,"124":1,"127":3}}],["blending",{"2":{"1":1}}],["byo",{"2":{"69":1}}],["byte",{"2":{"38":2,"142":4}}],["by",{"0":{"73":1,"82":1},"1":{"74":1,"75":1,"76":1,"77":1},"2":{"1":1,"2":1,"4":1,"7":2,"11":2,"17":1,"18":1,"19":1,"21":1,"22":3,"24":1,"26":2,"29":3,"30":1,"34":3,"39":1,"41":1,"53":1,"56":1,"59":1,"60":1,"63":1,"78":1,"79":3,"91":2,"100":1,"101":1,"110":1,"113":3,"115":1,"116":3,"118":2,"125":2,"126":1,"127":1,"138":1,"144":1,"155":1,"173":1,"178":2,"182":2,"183":1,"198":1,"204":1,"207":1,"209":1,"219":1,"220":1,"227":1,"230":1}}],["c3",{"2":{"210":4,"214":4}}],["cycle",{"2":{"182":1}}],["cmd",{"2":{"138":1}}],["cvm",{"2":{"115":1}}],["circuits",{"2":{"115":1}}],["ceases",{"2":{"113":1}}],["centralized",{"2":{"113":1}}],["central",{"2":{"58":1}}],["cd",{"2":{"91":1,"166":1,"198":1,"201":1}}],["c++",{"2":{"90":1}}],["c",{"0":{"152":1},"2":{"78":2,"136":1,"152":1,"187":1}}],["cfg",{"2":{"55":1,"56":1,"210":1}}],["ctx",{"2":{"19":1}}],["cryptographic",{"2":{"118":1}}],["crypto",{"2":{"114":1}}],["crypts",{"2":{"78":1}}],["crystallized",{"2":{"113":1}}],["credentials",{"2":{"84":1,"161":1,"198":2}}],["creators",{"2":{"132":1}}],["creative",{"2":{"163":1}}],["creativity",{"2":{"27":1}}],["creating",{"2":{"56":1,"115":1,"206":1}}],["creation",{"0":{"144":1},"2":{"15":1,"26":1,"36":1}}],["createcardimpl",{"2":{"145":1}}],["created",{"2":{"26":1,"122":1,"127":1,"145":1,"209":2}}],["createdat",{"2":{"26":5,"182":2}}],["creates",{"2":{"21":1}}],["create",{"0":{"64":1},"2":{"15":1,"26":2,"29":1,"34":1,"39":1,"56":1,"57":1,"64":2,"88":1,"94":1,"116":1,"130":1,"144":1,"145":2,"149":4,"150":2,"178":1,"198":3,"199":1,"201":1,"203":1,"218":1,"223":2}}],["crates",{"2":{"91":2,"166":1,"190":1}}],["crawler",{"2":{"79":1}}],["crafting",{"2":{"22":1}}],["craft",{"2":{"16":1,"27":1,"36":1}}],["crucial",{"2":{"4":2,"38":1,"54":1,"113":1,"142":1}}],["clear",{"2":{"202":1}}],["cleaning",{"0":{"202":1}}],["cleaner",{"2":{"116":1}}],["clean",{"2":{"15":1,"26":1}}],["cloning",{"2":{"230":1}}],["clone",{"0":{"98":1},"2":{"91":2,"98":1,"166":1}}],["closely",{"2":{"119":1}}],["click",{"2":{"207":1}}],["clicking",{"2":{"26":1}}],["cli",{"2":{"25":1,"93":1,"161":1,"163":1,"164":2}}],["clients",{"2":{"69":1,"70":2,"124":1,"182":2,"185":1,"187":1}}],["client",{"0":{"67":1,"70":1,"128":1,"187":1},"1":{"71":1},"2":{"11":1,"60":1,"67":2,"68":1,"69":2,"70":2,"119":1,"127":1,"172":1,"182":4,"184":2,"185":2,"187":1,"194":1}}],["clarify",{"2":{"22":1}}],["classic",{"2":{"79":1}}],["classhash",{"2":{"18":4,"26":2,"60":6,"177":3}}],["class",{"2":{"13":1,"18":4,"25":3,"56":3,"60":3,"149":1,"202":1,"210":5,"212":6}}],["culmination",{"2":{"130":1}}],["curr",{"2":{"208":2,"210":7,"213":3,"214":3,"217":15}}],["current",{"2":{"9":1,"21":1,"22":4,"24":1,"178":1,"208":8,"214":1,"230":1}}],["currently",{"2":{"1":1,"37":1,"52":1,"87":1,"118":1,"138":1}}],["cursors",{"2":{"180":1}}],["cursor",{"0":{"180":1},"2":{"179":1,"180":4,"181":1}}],["curl",{"2":{"93":1,"101":1,"135":1,"156":1}}],["customizable",{"2":{"183":1}}],["custom",{"0":{"19":1,"36":1,"38":1},"2":{"11":1,"16":1,"19":2,"22":2,"32":1,"37":1,"53":1,"54":1,"142":1,"172":1,"176":3,"194":1}}],["choice",{"2":{"133":1}}],["chunks",{"2":{"109":1}}],["cheaper",{"2":{"118":1}}],["chess",{"0":{"219":1},"1":{"220":1,"221":1},"2":{"79":2,"127":2,"201":2,"202":1,"203":4,"207":1,"210":4,"216":1,"217":4,"218":3,"220":6,"221":1}}],["che",{"2":{"78":1}}],["checkmate",{"2":{"218":1}}],["checking",{"2":{"217":1}}],["checks",{"2":{"5":1,"218":1}}],["check",{"2":{"1":1,"3":1,"26":1,"56":3,"115":1,"157":1,"208":3,"213":2,"214":1,"216":1,"220":1}}],["children",{"2":{"38":1,"142":1}}],["challenges",{"2":{"218":1}}],["change",{"2":{"149":1,"208":1}}],["changes",{"0":{"141":1,"148":1},"1":{"149":1,"150":1},"2":{"26":1,"110":2,"139":1,"143":1,"149":1}}],["channel",{"2":{"127":1}}],["chain",{"2":{"79":2,"113":2,"118":1,"124":1,"127":2,"130":1,"131":1,"207":1,"220":1}}],["chains",{"2":{"4":1}}],["character",{"2":{"14":1,"137":1}}],["chapters",{"0":{"112":1},"2":{"106":1,"110":1,"221":1}}],["chapter",{"2":{"4":1,"22":1,"200":1,"203":1,"204":1,"206":1,"216":1}}],["colors",{"2":{"213":1}}],["color",{"2":{"203":10,"207":21,"208":7,"210":16,"213":3,"214":3,"217":16}}],["collected",{"2":{"195":1}}],["collections",{"2":{"132":1}}],["collection",{"2":{"40":1,"114":1}}],["cost",{"2":{"144":1,"145":1}}],["costly",{"2":{"118":1,"127":1}}],["costs",{"2":{"118":1}}],["coordination",{"2":{"113":1}}],["cool",{"2":{"36":2,"219":1}}],["coexisting",{"2":{"79":1}}],["count",{"2":{"39":15}}],["counter",{"2":{"39":16}}],["could",{"2":{"11":2,"29":1,"35":2,"109":1,"218":1}}],["correpsonding",{"2":{"176":1}}],["correctly",{"2":{"209":1}}],["correct",{"2":{"84":1,"209":1}}],["corresponding",{"2":{"29":1}}],["core",{"0":{"63":1,"87":1},"1":{"88":1},"2":{"26":13,"58":1,"63":2,"132":1}}],["cover",{"2":{"29":3,"220":1}}],["covered",{"2":{"24":1,"25":1,"26":1}}],["copy",{"2":{"15":2,"22":2,"26":1,"33":1,"34":1,"36":1,"39":4,"42":2,"91":1,"147":1,"198":1,"203":3,"210":1,"216":1}}],["codes",{"2":{"202":1}}],["code",{"0":{"107":1,"211":1,"217":1},"1":{"212":1,"213":1,"214":1},"2":{"7":1,"22":2,"55":1,"92":1,"102":1,"107":1,"116":1,"128":1,"140":1,"146":1,"150":1,"190":1,"207":5,"208":2,"216":1,"219":1,"220":1}}],["comes",{"2":{"202":1}}],["combination",{"2":{"180":1}}],["combat",{"2":{"36":2}}],["coming",{"2":{"103":1,"104":1}}],["com",{"2":{"13":1,"25":1,"29":1,"83":2,"91":2,"98":1,"101":1,"166":1,"202":1}}],["complied",{"2":{"205":1}}],["completed",{"2":{"81":1,"207":1}}],["complete",{"2":{"39":1,"116":1,"126":1,"157":1,"166":1,"190":1,"221":1}}],["complexity",{"2":{"115":1,"131":1}}],["complex",{"2":{"7":1,"15":1,"38":2,"130":1,"142":2}}],["comprises",{"2":{"186":1}}],["comprehensive",{"2":{"41":1,"106":1}}],["comparable",{"2":{"173":1}}],["compatible",{"2":{"115":1}}],["computed",{"2":{"118":1}}],["computation",{"2":{"116":1,"118":2,"126":1}}],["computations",{"2":{"115":1}}],["compiling",{"2":{"82":1}}],["compilation",{"2":{"53":1}}],["compiled",{"2":{"25":1,"70":1,"82":1}}],["compiler",{"2":{"22":1,"42":2,"54":1,"90":1,"116":1,"146":1}}],["compile",{"0":{"205":1},"2":{"7":1,"13":1,"41":1,"82":1,"126":1,"202":1,"208":1,"229":1}}],["composable",{"2":{"114":1}}],["composability",{"2":{"33":1}}],["composite",{"2":{"34":2}}],["components",{"0":{"140":1},"2":{"21":1,"22":1,"27":1,"49":1,"56":1,"113":1,"132":2,"139":1,"140":2,"182":1,"234":1}}],["component",{"0":{"132":1},"2":{"21":1,"22":1,"33":1,"47":1,"49":1,"113":1,"132":1,"140":2,"194":1,"232":1,"234":6}}],["comma",{"2":{"197":1}}],["commands",{"0":{"7":1,"8":1,"161":1,"169":1,"170":1,"223":1},"1":{"8":1,"9":1,"10":1,"11":1,"12":1},"2":{"7":6,"8":1,"19":1,"24":1,"25":1,"41":1,"45":2,"116":3,"136":1,"160":1,"228":1,"232":1,"234":1}}],["command",{"0":{"9":1,"10":1,"11":1,"12":1},"2":{"6":1,"9":2,"10":1,"11":1,"12":1,"19":1,"21":1,"24":2,"26":5,"34":1,"42":2,"81":1,"91":1,"93":1,"156":1,"163":1,"198":4,"199":2,"205":1,"226":1,"232":1,"234":1}}],["commit",{"2":{"136":3}}],["communications",{"2":{"127":1}}],["community",{"2":{"1":1,"72":2,"215":1,"218":1}}],["comments",{"2":{"88":1}}],["common",{"0":{"168":1},"2":{"7":1,"35":1,"39":1}}],["conditions",{"2":{"150":1}}],["conduct",{"0":{"107":1},"2":{"107":1}}],["confirm",{"2":{"100":1,"127":1}}],["configurations",{"2":{"198":1}}],["configuration",{"2":{"198":1,"223":1}}],["configuring",{"2":{"197":1}}],["config",{"0":{"13":1}}],["connection",{"2":{"179":1,"182":3}}],["connect",{"2":{"69":1}}],["concise",{"2":{"46":1}}],["concentrate",{"2":{"42":1}}],["concept",{"2":{"1":2,"2":1,"14":1,"92":1,"113":1,"140":1}}],["consistent",{"2":{"179":1}}],["considering",{"2":{"218":1}}],["considered",{"2":{"113":1,"118":1}}],["consider",{"2":{"14":1,"17":1,"33":1,"38":1,"39":1,"42":1,"127":1,"142":1}}],["considerations",{"2":{"4":1}}],["constitutes",{"2":{"127":1}}],["const",{"2":{"36":1,"39":2,"56":1,"210":4,"213":2,"217":2}}],["constant",{"2":{"36":1}}],["congratulations",{"0":{"218":1},"2":{"21":1,"198":1,"207":1}}],["continue",{"2":{"22":2}}],["continuously",{"2":{"21":1}}],["content",{"2":{"109":2,"203":1}}],["contents",{"2":{"22":1}}],["context",{"2":{"19":1,"21":1,"22":1,"28":1,"39":1,"44":1,"53":1}}],["contained",{"2":{"116":1}}],["container",{"0":{"104":1}}],["containing",{"2":{"38":1,"46":1,"142":1}}],["contains",{"2":{"22":1,"25":1,"34":1,"40":1,"63":1}}],["contain",{"2":{"14":1,"33":1,"109":1,"143":1}}],["control",{"2":{"176":1}}],["controlled",{"2":{"79":1,"80":1,"125":1}}],["contractupgraded",{"2":{"18":1}}],["contractdeployed",{"2":{"18":1}}],["contractaddress",{"2":{"14":2,"18":4,"22":4,"33":1,"34":2,"37":1,"42":3,"49":1,"53":2,"60":10,"147":2,"203":6,"208":3,"210":1}}],["contract",{"0":{"24":1,"30":1,"51":1,"53":1,"58":1,"146":1,"216":1},"1":{"59":1,"60":1,"61":1,"217":1,"218":1},"2":{"4":1,"16":1,"17":2,"18":1,"19":1,"22":1,"24":1,"25":4,"26":2,"28":1,"29":1,"30":2,"39":2,"42":3,"43":2,"45":2,"46":4,"47":1,"48":1,"49":2,"51":2,"52":1,"53":6,"56":6,"58":5,"59":2,"60":3,"63":1,"113":1,"116":1,"143":4,"146":2,"149":6,"150":1,"183":1,"192":1,"194":2,"197":1,"204":4,"206":1,"209":3,"210":9,"212":3,"213":2,"214":1,"216":2,"217":2,"220":3,"232":1}}],["contractstate",{"2":{"22":5,"39":2,"42":2,"49":2,"53":4,"145":2,"208":3}}],["contracts",{"2":{"1":1,"18":1,"22":1,"25":1,"26":2,"28":1,"42":2,"46":1,"53":1,"54":2,"82":3,"113":1,"132":1,"133":1,"143":3,"149":1,"212":1,"218":1,"229":1,"231":1}}],["contributing",{"0":{"87":1,"105":1},"1":{"88":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1}}],["contributions",{"2":{"130":1}}],["contribution",{"2":{"1":1,"3":1}}],["contribute",{"0":{"88":1,"108":1},"1":{"109":1,"110":1},"2":{"69":1,"110":1,"113":1,"121":1}}],["contributors",{"2":{"1":1,"2":1,"87":1,"109":1,"110":1}}],["convenient",{"2":{"6":1,"7":1,"227":1}}],["castling",{"2":{"218":1}}],["cases",{"2":{"218":1}}],["case",{"2":{"9":1,"25":1,"34":1,"136":4,"144":1}}],["causing",{"2":{"195":1}}],["catalyze",{"2":{"113":1}}],["catalyst",{"2":{"113":1}}],["caters",{"2":{"106":1}}],["capture",{"2":{"216":1,"217":1,"218":1}}],["captured",{"2":{"11":1,"17":1,"18":1,"216":1}}],["captain",{"2":{"144":1,"145":1}}],["capable",{"2":{"113":1}}],["capabilities",{"2":{"105":1,"106":1,"116":1}}],["capacity",{"2":{"113":1}}],["caverns",{"2":{"78":1}}],["cartrige",{"2":{"155":1}}],["cartridge",{"0":{"76":1},"2":{"2":1,"79":2,"83":2,"156":1,"198":1,"228":1}}],["care",{"2":{"116":1}}],["careful",{"2":{"48":1}}],["carefully",{"2":{"46":1}}],["cargo",{"2":{"90":1,"91":5,"100":1,"166":1,"190":1}}],["card",{"2":{"38":2,"142":2,"144":1,"145":2,"149":4,"150":2}}],["calculate",{"2":{"22":1}}],["calldata",{"2":{"178":4,"232":2}}],["call",{"2":{"45":1,"216":1}}],["caller",{"2":{"9":4,"10":3,"11":1,"12":1,"18":1,"19":2,"22":5,"24":1,"34":2,"42":2,"49":2,"53":3,"56":4,"172":1,"208":3}}],["called",{"2":{"5":1,"8":1,"9":1,"24":1,"52":1,"145":1}}],["calling",{"2":{"9":1}}],["calls",{"2":{"7":1,"56":1,"194":1,"210":1,"217":1}}],["cannot",{"2":{"207":1}}],["can",{"0":{"128":1,"129":1},"2":{"1":1,"6":1,"7":1,"9":1,"10":1,"14":2,"15":2,"16":1,"19":1,"22":1,"24":1,"25":1,"26":5,"28":1,"29":2,"32":1,"33":1,"34":1,"35":1,"36":1,"39":2,"40":1,"41":1,"51":3,"56":1,"58":1,"60":1,"61":1,"62":1,"69":1,"70":2,"91":1,"93":1,"109":1,"113":4,"115":2,"116":1,"119":1,"121":2,"123":1,"127":3,"129":1,"133":1,"136":1,"137":1,"143":2,"165":1,"177":1,"178":1,"179":2,"181":2,"182":3,"183":1,"184":3,"189":1,"194":1,"195":1,"198":4,"199":1,"201":1,"205":1,"206":1,"208":1,"216":1,"221":1,"227":1,"228":1}}],["cairo",{"0":{"102":1,"116":1,"126":1},"1":{"117":1,"118":1,"119":1},"2":{"1":1,"9":1,"13":3,"15":1,"20":1,"22":13,"32":1,"41":1,"42":4,"43":1,"55":1,"56":1,"78":1,"83":2,"92":1,"96":1,"102":1,"115":5,"116":4,"117":2,"119":1,"126":3,"140":1,"143":1,"202":14,"203":3,"204":2,"207":4,"210":1,"213":1,"216":1,"220":1,"229":1,"231":1}}],["square",{"2":{"203":2,"213":2}}],["sqlite",{"2":{"26":1,"194":1,"195":1}}],["snarks",{"2":{"115":1}}],["snake",{"2":{"79":1}}],["swmansion",{"2":{"101":1}}],["ssf",{"2":{"101":1}}],["slice",{"2":{"180":1}}],["slow",{"2":{"179":1}}],["slotup",{"2":{"156":1}}],["slot",{"0":{"155":1,"157":1,"158":1,"198":1,"222":1},"1":{"156":1,"157":1,"159":1,"160":1,"161":1,"199":1,"223":1},"2":{"83":1,"85":1,"155":1,"156":3,"157":3,"159":1,"160":1,"161":2,"198":10,"199":3,"222":1}}],["slenderduck",{"2":{"79":2}}],["skin",{"2":{"79":1}}],["small",{"2":{"33":1}}],["smart",{"2":{"1":1,"4":1,"54":1,"116":1,"132":1}}],["scratch",{"2":{"118":1}}],["screen",{"2":{"93":1,"198":1}}],["scissors",{"2":{"79":1}}],["scenario",{"2":{"216":1}}],["scenarios",{"2":{"46":1}}],["scenes",{"2":{"42":1,"53":1}}],["schemaintrospection",{"2":{"38":3,"141":1,"142":3}}],["schema",{"0":{"142":1,"176":1},"2":{"26":2,"29":1,"176":1,"177":1}}],["scaffolding",{"2":{"163":1}}],["scale",{"2":{"118":1}}],["scalable",{"2":{"116":1,"118":1,"185":1}}],["scalability",{"2":{"21":1}}],["scaling",{"2":{"115":1}}],["scarb",{"0":{"101":1},"2":{"13":3,"22":1,"25":1,"29":2,"42":1,"83":1,"84":1,"101":2,"198":2,"202":2,"228":1}}],["suscription",{"2":{"183":1}}],["susbcription",{"0":{"183":1}}],["sudo",{"2":{"136":1}}],["sudoku",{"2":{"118":1}}],["suited",{"2":{"116":1,"119":1,"129":1}}],["suite",{"2":{"100":1,"122":1,"131":1}}],["subsequent",{"2":{"183":1}}],["subset",{"2":{"180":1}}],["subscribe",{"2":{"184":1}}],["subscribed",{"2":{"182":2}}],["subscription",{"0":{"182":1},"1":{"183":1},"2":{"26":5,"175":1,"182":8,"183":1}}],["subscriptions",{"2":{"26":1,"172":1,"182":2}}],["subcommand",{"2":{"161":1,"223":1,"232":1,"234":1}}],["subcommands",{"2":{"157":1,"166":1}}],["subcomponents",{"2":{"142":1}}],["submitted",{"2":{"127":1}}],["subterranean",{"2":{"79":1}}],["suggested",{"2":{"95":1,"100":1}}],["suggest",{"2":{"58":1,"89":1,"95":1}}],["supply",{"2":{"115":1}}],["suppose",{"2":{"36":1}}],["supporting",{"2":{"58":1}}],["support",{"2":{"37":1,"138":1,"178":2,"183":1,"198":1}}],["supported",{"2":{"30":1,"32":1,"178":1,"180":1}}],["supports",{"2":{"28":1,"29":1,"118":1,"182":1}}],["super",{"2":{"22":1,"42":2,"49":1,"53":1,"55":1,"56":1,"145":1}}],["sure",{"2":{"25":1,"100":1,"175":1,"198":1,"202":2}}],["succinct",{"2":{"41":1}}],["successful",{"2":{"198":2,"199":1}}],["successfully",{"2":{"25":1,"26":1,"198":2,"205":1}}],["success",{"2":{"25":1,"82":1}}],["such",{"2":{"7":1,"28":1,"35":1,"36":1,"39":1,"113":1,"122":1,"183":1}}],["safest",{"2":{"118":1}}],["save",{"2":{"39":1}}],["same",{"2":{"22":1,"55":1,"118":1,"130":1,"181":1,"182":1,"203":1,"207":1,"208":1}}],["salt",{"2":{"18":1,"56":1,"60":1,"210":1,"212":1}}],["src",{"2":{"22":4,"42":1,"202":1}}],["sh",{"2":{"101":2,"156":1}}],["shinai",{"2":{"83":1}}],["sharing",{"2":{"127":1}}],["share",{"2":{"39":1,"113":1,"218":1}}],["shape",{"2":{"21":1}}],["shows",{"2":{"180":1}}],["show",{"2":{"55":1}}],["short",{"2":{"24":1}}],["shortly",{"2":{"21":1}}],["shorthands",{"2":{"7":1}}],["shorthand",{"2":{"7":1,"137":1}}],["should",{"2":{"13":1,"22":1,"25":2,"26":1,"109":1,"141":1,"147":1,"182":1,"195":1,"198":1,"199":1,"204":2,"207":2,"208":2,"210":12,"212":1,"213":3,"214":3,"217":15,"218":1,"219":1}}],["syntax",{"2":{"8":1,"203":1}}],["system",{"0":{"24":1,"45":1,"48":1,"49":1,"51":1,"132":1},"1":{"51":1,"52":1},"2":{"4":1,"5":3,"6":2,"7":2,"9":1,"21":1,"22":1,"24":1,"25":1,"26":2,"33":1,"34":1,"47":1,"49":2,"51":1,"52":1,"53":1,"55":1,"56":7,"58":1,"60":3,"113":1,"118":1,"132":1,"143":2,"144":3,"149":2,"150":1,"166":1,"170":1,"190":1,"194":2,"210":8,"212":3,"213":2,"214":1,"217":6,"220":2,"232":3,"234":6}}],["systems",{"0":{"46":1,"47":1,"143":1,"204":1},"1":{"47":1,"48":1,"49":1,"144":1,"145":1,"146":1},"2":{"4":1,"6":1,"7":2,"8":1,"14":2,"21":1,"22":3,"27":1,"46":8,"47":2,"48":1,"49":1,"53":1,"56":1,"57":2,"58":1,"113":1,"116":1,"132":2,"139":2,"143":6,"149":2,"204":2,"210":1,"212":1,"234":1}}],["spinning",{"2":{"155":1,"159":1}}],["springett",{"2":{"114":1}}],["split",{"2":{"106":1}}],["span",{"2":{"17":3,"38":6,"60":17,"142":6,"147":2,"149":1}}],["spawnhuman",{"2":{"39":1}}],["spawns",{"2":{"24":1,"52":1}}],["spawn",{"0":{"45":1,"52":1,"213":1},"2":{"6":2,"22":2,"24":2,"26":3,"39":2,"42":2,"45":1,"49":1,"52":1,"53":1,"56":3,"57":1,"183":1,"208":1,"209":3,"210":5,"212":2,"213":4,"216":2,"217":1,"220":1,"232":1,"234":2}}],["specalist",{"2":{"128":1}}],["specify",{"2":{"142":1,"172":1,"197":2,"227":1}}],["specifies",{"2":{"25":1,"38":1,"142":1,"144":1,"182":1}}],["specified",{"2":{"22":1,"39":1,"53":1,"194":1}}],["specifically",{"2":{"172":1}}],["specification",{"2":{"30":1}}],["specifics",{"2":{"43":1}}],["specific",{"2":{"13":1,"16":1,"22":1,"46":1,"116":1,"119":1,"129":1,"134":1,"136":5,"142":1,"176":1,"182":1,"194":1}}],["specialized",{"2":{"41":1}}],["special",{"2":{"1":1,"22":1,"39":1,"218":2}}],["spearheaded",{"2":{"2":1}}],["sent",{"2":{"178":1}}],["sentence",{"2":{"110":1}}],["send",{"2":{"182":1}}],["senderaddress",{"2":{"178":4}}],["sending",{"2":{"173":1,"182":1}}],["selection",{"2":{"178":1}}],["selector",{"2":{"143":1}}],["self",{"2":{"15":8,"22":6,"35":8,"39":2,"42":3,"45":1,"49":1,"53":4,"60":22,"116":1,"144":1,"145":1,"207":67,"208":3}}],["separated",{"2":{"197":1}}],["separate",{"2":{"109":1}}],["sequencer",{"2":{"80":1,"86":1,"119":1,"129":1}}],["search",{"2":{"54":1}}],["seamless",{"2":{"45":1}}],["seamlessly",{"2":{"16":1,"119":1,"183":1}}],["serialize",{"2":{"38":4,"142":4}}],["served",{"2":{"113":1}}],["serve",{"2":{"106":1}}],["serves",{"2":{"44":1}}],["server",{"0":{"186":1},"2":{"26":4,"172":1,"175":2,"178":1,"182":5,"185":1,"186":1,"187":1,"197":1}}],["services",{"2":{"28":1}}],["serdelen",{"2":{"141":1}}],["serde",{"2":{"14":2,"15":2,"22":4,"33":1,"34":1,"36":1,"39":4,"42":2,"203":7}}],["seen",{"2":{"149":1}}],["seeking",{"2":{"106":1}}],["seemingly",{"2":{"42":1}}],["seems",{"2":{"21":1,"220":1}}],["see",{"2":{"24":1,"25":1,"26":1,"51":1,"88":1,"93":1,"157":1,"166":1,"190":1,"207":1}}],["seed",{"2":{"13":1,"198":1,"202":1}}],["several",{"2":{"9":1}}],["settled",{"2":{"113":1}}],["settings",{"2":{"36":3,"39":1}}],["setting",{"0":{"36":1},"2":{"29":2,"42":1,"52":1,"81":1,"95":1,"214":1}}],["setup",{"0":{"95":1,"149":1,"200":1,"212":1},"1":{"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1,"201":1,"202":1,"203":1,"204":1,"205":1,"206":1,"207":1},"2":{"42":1,"56":3,"100":2,"150":1,"182":1,"207":1,"210":4,"213":1,"216":1,"217":4}}],["set",{"0":{"10":1},"2":{"5":2,"9":1,"10":3,"19":2,"21":1,"22":3,"24":4,"29":3,"30":1,"34":2,"39":4,"42":2,"45":1,"49":1,"53":4,"60":3,"81":1,"93":1,"100":1,"125":1,"178":1,"180":1,"198":1,"208":3,"213":1,"216":1}}],["sector",{"2":{"130":1}}],["sections",{"2":{"110":1}}],["section",{"2":{"1":1,"20":2,"26":2,"29":1,"111":1,"177":1}}],["secure",{"2":{"116":1}}],["security",{"2":{"4":1,"40":1,"46":1,"118":2}}],["secondary",{"2":{"219":1}}],["seconds",{"2":{"155":1}}],["second",{"0":{"112":1},"2":{"25":1,"180":1,"203":1}}],["s",{"2":{"4":1,"16":2,"18":1,"19":1,"21":3,"22":10,"24":5,"25":4,"26":6,"28":1,"38":3,"41":1,"47":2,"49":2,"52":1,"58":1,"62":1,"106":1,"113":1,"115":1,"118":1,"119":1,"125":1,"126":2,"127":2,"131":1,"136":4,"142":3,"147":1,"161":1,"172":1,"173":1,"177":2,"178":1,"182":1,"197":1,"198":2,"205":1,"209":1,"213":1,"214":1,"216":1,"223":2,"231":1,"232":1,"234":1}}],["singular",{"2":{"143":1}}],["single",{"2":{"91":1,"125":1,"137":1}}],["since",{"2":{"48":1,"54":1,"138":1}}],["significant",{"2":{"45":1,"149":1}}],["signals",{"2":{"22":1}}],["size",{"2":{"38":3,"142":5}}],["simulator",{"2":{"79":1}}],["simulation",{"2":{"79":2}}],["simplifies",{"2":{"41":1,"132":1,"163":1}}],["simplify",{"2":{"15":1}}],["simply",{"2":{"14":1,"15":1,"54":1,"58":1,"93":1,"115":1,"188":1}}],["simplest",{"2":{"49":1}}],["simple",{"2":{"14":1,"25":1,"26":1,"42":1,"48":1,"64":1,"82":1,"84":1,"127":1,"195":1,"220":1}}],["similarities",{"2":{"113":1}}],["similarly",{"2":{"17":1,"44":1,"118":1}}],["similar",{"2":{"4":1,"7":1,"22":1,"25":1,"143":1,"173":1,"178":1,"183":1}}],["sierra",{"2":{"13":1,"83":1,"202":1}}],["side",{"0":{"128":1},"2":{"1":1,"119":1}}],["sorting",{"2":{"176":1}}],["solve",{"2":{"122":1}}],["solving",{"2":{"118":1}}],["solution",{"2":{"113":1,"118":3}}],["soon",{"2":{"103":1,"104":1}}],["software",{"2":{"54":1}}],["socials",{"2":{"29":4}}],["social",{"2":{"28":1,"29":1}}],["sometimes",{"2":{"219":1}}],["something",{"2":{"15":1,"26":2,"219":1}}],["somewhat",{"2":{"113":1,"173":1}}],["some",{"2":{"25":1,"43":1,"53":1,"106":1,"109":1,"112":2,"139":1,"177":1,"213":1,"219":1,"220":2}}],["so",{"2":{"19":1,"27":1,"29":1,"39":2,"58":1,"109":1,"136":1,"205":1,"206":1,"218":1,"219":1}}],["sozo",{"0":{"163":1,"167":1,"225":1,"227":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1},"1":{"168":1,"169":1,"170":1,"226":1,"228":1},"2":{"6":2,"21":1,"25":2,"26":2,"29":2,"53":1,"54":2,"82":3,"91":3,"93":1,"163":1,"164":1,"165":1,"166":3,"178":1,"183":1,"198":4,"201":2,"202":1,"205":2,"208":1,"225":1,"226":2,"228":3,"229":1,"230":1,"231":1,"232":2,"233":1,"234":3}}],["sovereign",{"2":{"4":1}}],["source",{"0":{"89":1,"166":1,"190":1},"1":{"90":1,"91":1},"2":{"1":1,"2":1,"87":1,"116":1,"121":1,"130":1,"190":1}}],["stuck",{"2":{"215":1}}],["studio",{"2":{"90":1,"102":1}}],["studios",{"0":{"73":1},"1":{"74":1,"75":1,"76":1,"77":1}}],["steady",{"2":{"182":1}}],["step",{"0":{"82":2},"2":{"220":2}}],["steps",{"0":{"27":1,"94":1},"2":{"82":1}}],["stop",{"0":{"131":1},"1":{"132":1,"133":1}}],["storing",{"2":{"36":1}}],["stored",{"2":{"34":1,"194":1,"195":1,"197":1}}],["storedelrecord",{"2":{"17":1}}],["store",{"2":{"32":1,"33":1,"44":1,"58":2,"195":1}}],["storesetrecord",{"2":{"17":1,"59":1}}],["storage",{"2":{"9":1,"34":1,"49":3,"51":1,"195":3}}],["style",{"0":{"111":1},"1":{"112":1}}],["staging",{"2":{"227":1,"228":1}}],["stage",{"2":{"42":1,"81":1}}],["stack",{"2":{"115":1}}],["stable",{"2":{"100":1,"136":1}}],["star",{"2":{"172":1}}],["starkex",{"2":{"119":1}}],["starkware",{"2":{"116":1,"126":1}}],["starkland",{"2":{"79":1}}],["stark",{"2":{"79":1,"118":2}}],["starknetvm",{"2":{"129":1}}],["starknet",{"0":{"84":1,"118":1,"119":1,"129":1},"2":{"17":2,"18":4,"19":1,"22":4,"24":1,"42":3,"49":2,"51":1,"53":5,"56":1,"60":1,"79":1,"80":1,"83":1,"84":1,"86":1,"115":4,"116":1,"117":1,"118":3,"119":2,"143":1,"144":1,"145":1,"147":3,"194":1,"197":1,"203":3,"210":5,"213":2,"217":2}}],["starts",{"2":{"26":1,"49":1,"175":2,"194":1}}],["starting",{"2":{"21":1,"198":1,"200":1,"204":1,"219":1}}],["starter",{"2":{"21":1,"22":3,"39":1,"55":1,"56":1,"198":2,"230":1}}],["started",{"0":{"72":1},"2":{"15":3,"20":1,"62":2,"106":1}}],["start",{"0":{"92":1,"112":1,"131":1},"1":{"93":1,"94":1,"132":1,"133":1},"2":{"21":1,"26":1,"81":1,"89":1,"95":1,"100":1,"144":1,"195":1,"197":3,"198":1,"199":1,"208":1,"220":1}}],["status",{"2":{"15":4}}],["stateless",{"2":{"46":1}}],["states",{"2":{"15":1,"47":1,"124":1}}],["state",{"2":{"4":1,"5":1,"7":1,"8":1,"9":2,"10":2,"17":1,"21":1,"22":2,"24":1,"25":1,"44":1,"46":1,"49":2,"52":1,"58":1,"113":3,"124":1,"127":1,"132":1,"185":1,"194":1}}],["standardization",{"2":{"132":1}}],["standardized",{"2":{"132":1}}],["standardizes",{"2":{"122":1}}],["standards",{"2":{"111":1}}],["standard",{"2":{"1":1,"172":1}}],["stream",{"2":{"198":1,"199":1}}],["streamlining",{"2":{"53":1,"132":1}}],["streamline",{"2":{"7":1,"116":1,"163":1}}],["streamlined",{"2":{"1":1}}],["strictly",{"2":{"121":1}}],["straightforward",{"2":{"81":1,"115":1,"127":1}}],["strategy",{"2":{"79":1,"118":1}}],["strongest",{"2":{"114":1}}],["strongly",{"2":{"58":1,"89":1,"95":1}}],["strong",{"2":{"22":1}}],["structs",{"0":{"33":1},"1":{"34":1,"35":1,"36":1,"37":1,"38":1},"2":{"10":1,"14":1,"32":1,"33":1,"44":1}}],["struct",{"0":{"44":1},"2":{"9":1,"14":2,"15":1,"17":3,"18":4,"19":1,"22":8,"24":1,"33":1,"34":1,"36":1,"38":1,"39":4,"42":3,"49":1,"53":1,"142":1,"147":2,"203":5}}],["structured",{"2":{"21":1,"32":1,"172":1}}],["structures",{"2":{"18":1}}],["structure",{"0":{"2":1,"49":1},"1":{"51":1,"52":1},"2":{"4":1,"17":2,"19":1,"22":2,"49":1,"58":1,"142":1}}],["dynamically",{"2":{"176":1,"185":1}}],["dynamics",{"2":{"16":1}}],["due",{"2":{"140":1}}],["dungeon",{"2":{"79":1}}],["duration",{"2":{"36":1}}],["during",{"0":{"137":1},"2":{"29":2,"100":1}}],["d",{"2":{"36":1,"197":1}}],["date",{"2":{"109":1}}],["datasets",{"2":{"181":1}}],["dataset",{"2":{"176":1}}],["database",{"0":{"195":1},"2":{"26":1,"34":1,"194":1,"195":6,"197":3}}],["data",{"2":{"22":6,"24":2,"26":6,"32":2,"42":2,"113":2,"132":1,"172":4,"176":2,"177":4,"178":2,"179":1,"180":1,"182":3,"183":6,"184":1,"194":1,"195":1,"208":1}}],["dark",{"2":{"79":1}}],["dangerous",{"2":{"79":1}}],["dao",{"2":{"78":1}}],["days",{"2":{"1":1}}],["db",{"2":{"12":1,"195":3,"197":1}}],["dribble",{"2":{"144":1,"145":1}}],["driving",{"2":{"79":1,"119":1}}],["drive",{"2":{"79":1}}],["drove",{"2":{"130":1}}],["drop",{"2":{"14":2,"15":2,"17":2,"18":4,"19":1,"22":6,"33":1,"34":1,"36":1,"39":4,"42":2,"53":2,"147":3,"203":7}}],["drug",{"2":{"79":1}}],["dr",{"2":{"7":1,"32":1,"46":1,"184":1}}],["dive",{"2":{"125":1}}],["diving",{"0":{"211":1},"1":{"212":1,"213":1,"214":1},"2":{"92":1}}],["diffs",{"2":{"25":1}}],["diff",{"2":{"25":1}}],["differences",{"2":{"39":1}}],["difference",{"2":{"22":1}}],["different",{"2":{"14":1,"91":1,"198":1}}],["distribution",{"2":{"100":1}}],["distribute",{"2":{"28":1}}],["distinct",{"2":{"39":1,"42":1}}],["displays",{"2":{"26":1}}],["dispatchers",{"2":{"212":1}}],["dispatcher",{"2":{"22":4,"39":1,"42":2,"45":1,"53":4,"146":1,"149":2,"150":1,"208":1}}],["disable",{"2":{"25":1,"81":1}}],["discouraged",{"2":{"110":1}}],["discord",{"2":{"1":1,"3":1,"69":1,"72":1,"74":1,"75":1,"76":1,"123":1}}],["discuss",{"2":{"25":1}}],["discussed",{"2":{"4":1}}],["directed",{"2":{"219":1}}],["directory",{"2":{"21":2,"54":1,"56":1,"81":1,"136":2,"202":1,"230":1}}],["directly",{"2":{"14":1,"19":1,"47":1,"70":1,"184":1,"188":1}}],["directions",{"2":{"156":1}}],["direction",{"2":{"11":1,"12":1,"19":6,"22":27,"24":3,"49":3,"53":12,"56":2,"177":2,"219":1}}],["diagram",{"2":{"5":1}}],["dope",{"2":{"79":1}}],["doing",{"2":{"39":1}}],["doesn",{"0":{"133":1},"2":{"113":1,"133":1,"218":1}}],["does",{"2":{"29":1,"127":1,"138":1,"220":1}}],["documents",{"2":{"111":1}}],["documentation",{"2":{"26":2,"177":2,"219":1}}],["docs",{"2":{"26":1,"53":1,"101":1}}],["don",{"2":{"26":1,"60":1,"215":1,"220":1}}],["done",{"2":{"25":1,"140":1,"198":1}}],["downstream",{"2":{"63":1}}],["down",{"0":{"23":1,"50":1},"1":{"24":1,"51":1,"52":1,"53":1},"2":{"22":1,"36":2}}],["do",{"0":{"3":1},"2":{"14":1,"58":2,"110":1,"112":1,"124":1,"136":1,"198":2,"203":1,"216":1,"218":1,"219":2}}],["dojoup",{"0":{"93":1,"134":1},"1":{"135":1,"136":1,"137":1,"138":1},"2":{"91":3,"93":7,"136":8,"137":1,"138":2,"165":1,"189":1,"198":1}}],["dojostarknet",{"2":{"29":1}}],["dojoengine",{"0":{"63":1,"64":1,"65":1,"66":1,"67":1,"68":1},"2":{"13":1,"25":1,"29":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"83":1,"91":2,"93":1,"98":1,"135":1,"166":1,"202":1}}],["dojo",{"0":{"1":1,"20":1,"21":1,"22":1,"44":1,"45":1,"53":1,"57":1,"62":1,"73":1,"105":1,"121":1,"122":1,"123":1,"128":1,"129":1,"130":1,"133":1,"146":1,"152":1,"153":1},"1":{"2":1,"3":1,"21":1,"22":2,"23":2,"24":2,"25":2,"26":2,"27":2,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"74":1,"75":1,"76":1,"77":1,"106":1,"107":1,"108":1,"109":1,"110":1,"111":1,"112":1,"131":1,"132":1,"133":1},"2":{"1":5,"2":1,"7":2,"13":8,"14":1,"16":1,"20":1,"21":3,"22":8,"24":2,"25":5,"26":1,"27":2,"28":1,"29":1,"34":2,"39":7,"40":1,"41":2,"42":7,"43":2,"44":1,"45":1,"46":1,"47":2,"49":4,"53":6,"54":2,"55":1,"56":5,"58":2,"62":1,"63":2,"64":1,"65":1,"66":1,"69":3,"70":1,"72":3,"78":3,"79":4,"80":2,"83":4,"87":1,"91":5,"93":1,"94":2,"95":1,"98":1,"105":3,"106":2,"115":1,"116":3,"119":4,"121":2,"122":1,"123":2,"128":1,"129":3,"130":4,"131":1,"132":4,"133":2,"134":1,"136":5,"137":1,"143":3,"146":2,"149":1,"163":2,"166":2,"172":1,"177":1,"178":1,"183":1,"184":1,"185":1,"198":4,"200":2,"201":1,"202":5,"203":1,"204":1,"210":2,"215":1,"217":1,"218":2,"219":2,"220":1,"228":2,"230":1}}],["dealing",{"2":{"227":1}}],["demonstrate",{"2":{"183":1}}],["demand",{"2":{"115":1}}],["debug",{"2":{"198":1}}],["debugging",{"2":{"93":1}}],["debian",{"2":{"136":1}}],["determine",{"2":{"132":1}}],["detail",{"2":{"109":1}}],["detailed",{"2":{"93":1,"132":1}}],["details",{"2":{"21":1,"142":1,"177":1}}],["deem",{"2":{"109":1}}],["deepen",{"2":{"106":1}}],["deeper",{"2":{"14":1,"125":1}}],["deep",{"2":{"72":1}}],["dev",{"2":{"227":3,"228":2}}],["device",{"2":{"80":1}}],["develop",{"2":{"130":1}}],["developing",{"2":{"116":1}}],["develops",{"2":{"105":1}}],["developed",{"2":{"78":1,"79":2,"116":1,"155":1,"159":1,"184":1}}],["developer",{"2":{"60":1,"130":1,"132":1}}],["developers",{"2":{"7":1,"41":1,"42":1,"53":1,"113":1,"116":1,"130":1}}],["development",{"0":{"41":1,"95":1,"154":1,"162":1},"1":{"42":1,"43":1,"44":1,"45":1,"96":1,"97":1,"98":1,"99":1,"100":1,"101":1,"102":1,"103":1,"104":1},"2":{"1":3,"41":1,"53":1,"54":1,"80":2,"87":1,"90":1,"93":1,"95":1,"115":1,"116":1,"132":1,"195":1}}],["describe",{"2":{"223":2}}],["description",{"0":{"194":1},"1":{"195":1},"2":{"28":1,"29":2}}],["desktop",{"2":{"90":1}}],["designated",{"2":{"38":1,"142":1}}],["designed",{"2":{"27":1,"79":1,"106":1,"116":1,"118":1,"126":1,"130":1,"163":1,"172":1}}],["design",{"2":{"7":1,"15":1,"21":1,"33":1,"41":1,"49":1,"116":1,"132":1,"172":1,"203":1,"221":1}}],["deduct",{"2":{"22":1}}],["dedicated",{"2":{"1":1,"2":1,"36":1,"165":1,"189":1}}],["decide",{"2":{"218":1}}],["deckcreated",{"2":{"147":4}}],["decentralized",{"2":{"36":1,"113":3,"116":1}}],["declaring",{"2":{"22":2}}],["decorator",{"0":{"53":1,"146":1},"2":{"22":2,"32":1,"46":1,"53":4,"143":1,"146":1}}],["decoding",{"2":{"16":1}}],["delivers",{"2":{"172":1}}],["delving",{"0":{"42":1}}],["delve",{"2":{"21":1,"26":1}}],["deleted",{"2":{"17":1}}],["deletes",{"2":{"12":1}}],["delete",{"0":{"12":1},"2":{"12":2,"60":1,"223":2}}],["derive",{"2":{"14":2,"15":2,"17":2,"18":4,"19":1,"22":6,"24":1,"32":1,"33":2,"34":1,"36":1,"39":4,"42":2,"44":1,"53":2,"140":2,"147":3,"203":7}}],["depending",{"2":{"100":1}}],["dependencies",{"0":{"100":1},"2":{"13":1,"25":1,"83":1,"100":2,"166":1,"190":1,"202":1}}],["depths",{"2":{"79":1}}],["deploy",{"0":{"82":1,"84":1,"85":1,"86":1,"129":1,"157":1,"198":1},"1":{"199":1},"2":{"25":3,"56":4,"57":1,"60":2,"83":1,"84":1,"85":1,"115":1,"149":3,"157":2,"209":1,"210":4,"212":4}}],["deployed",{"2":{"25":2,"26":1,"28":1,"60":1,"150":1,"198":1}}],["deployer",{"2":{"6":1}}],["deploying",{"2":{"4":1,"81":1,"82":1,"113":1,"163":1,"164":1,"198":1}}],["deployments",{"0":{"81":1,"222":1},"1":{"223":1},"2":{"161":2,"198":2,"199":2,"222":1,"223":1}}],["deployment",{"0":{"80":1,"83":1},"1":{"81":1,"82":1,"84":1,"85":1,"86":1},"2":{"1":1,"81":1,"82":1,"163":1,"188":1,"198":4,"199":3,"223":5,"229":1}}],["defense",{"2":{"79":1,"144":1,"145":1}}],["defender",{"2":{"38":1,"142":1}}],["defi",{"2":{"40":1,"116":1}}],["defintions",{"0":{"176":1}}],["definition",{"2":{"26":1,"113":2,"177":1}}],["defining",{"2":{"14":1,"34":1,"35":1,"46":1,"48":1,"143":1,"144":1}}],["define",{"2":{"15":2,"22":3,"32":2,"33":1,"34":2,"35":2,"47":1,"143":1,"207":1}}],["defined",{"2":{"10":1,"13":1,"22":1,"24":1,"29":1,"30":1,"44":1,"53":2,"228":1}}],["defines",{"2":{"9":1,"15":1,"36":1,"142":1}}],["default",{"2":{"9":1,"13":1,"29":1,"197":4,"202":1}}],["immortal",{"2":{"218":1}}],["import",{"2":{"149":1}}],["imported",{"2":{"40":1}}],["imports",{"2":{"24":1,"53":1,"140":1,"146":1,"209":1}}],["importance",{"2":{"22":1,"24":1}}],["important",{"2":{"13":1,"14":1,"46":1,"47":1,"48":1,"58":1,"83":1,"143":1}}],["implication",{"2":{"204":1}}],["implies",{"2":{"22":1}}],["imply",{"2":{"113":1}}],["implemented",{"2":{"141":1,"182":1}}],["implements",{"2":{"35":1}}],["implementing",{"0":{"35":1},"2":{"204":2}}],["implementation",{"0":{"141":1,"145":1},"2":{"22":1,"49":1,"144":1}}],["implementations",{"2":{"7":1}}],["implement",{"0":{"128":1,"206":1},"1":{"207":1},"2":{"22":1,"32":1,"35":1,"38":2,"39":1,"51":1,"53":1,"142":2,"145":1,"204":1,"206":1,"207":1}}],["impl",{"2":{"15":2,"22":2,"35":1,"38":1,"39":2,"42":1,"49":1,"53":2,"142":1,"145":1,"207":3,"208":1}}],["improved",{"2":{"109":1}}],["improve",{"2":{"7":1,"116":1}}],["illegal",{"2":{"207":1,"208":1}}],["illustrate",{"2":{"14":1}}],["illustrates",{"2":{"5":1}}],["icreatecarddispatchertrait",{"2":{"149":1}}],["icreatecarddispatcher",{"2":{"149":2}}],["icreatecard",{"2":{"144":1,"145":2}}],["icon",{"2":{"29":3}}],["ignored",{"0":{"137":1},"2":{"197":1}}],["igoblinactions",{"2":{"39":1}}],["iworld",{"2":{"60":1}}],["iworlddispatchertrait",{"2":{"49":1,"56":1,"210":1,"217":1}}],["iworlddispatcher",{"2":{"49":2,"53":1,"56":1,"144":1,"145":1,"210":2}}],["iplayeractions",{"2":{"42":3,"49":2,"53":2}}],["ipfs",{"2":{"29":4}}],["iactionsdispatchertrait",{"2":{"56":1,"210":1,"217":1}}],["iactionsdispatcher",{"2":{"56":3,"210":3,"212":1,"217":1}}],["iactions",{"2":{"22":3,"208":1}}],["ideas",{"2":{"123":1}}],["idea",{"2":{"88":1}}],["ideal",{"2":{"21":1}}],["identifier",{"2":{"36":1}}],["identified",{"2":{"34":1}}],["identify",{"2":{"34":1}}],["ide",{"2":{"26":4,"173":1,"177":1}}],["id",{"2":{"10":1,"15":1,"26":6,"36":3,"38":1,"39":12,"61":2,"142":1,"144":1,"145":1,"177":4,"178":4,"182":6,"183":3,"203":4,"208":6,"210":10,"213":3,"214":3,"217":9}}],["ids",{"2":{"7":1,"13":1,"60":1,"61":1,"83":1,"202":1}}],["if",{"2":{"5":1,"9":1,"10":1,"20":1,"21":1,"22":1,"34":1,"35":1,"63":1,"69":1,"82":1,"84":1,"88":2,"89":1,"95":1,"109":2,"113":1,"123":1,"127":1,"128":1,"138":1,"141":1,"177":1,"178":1,"183":1,"190":1,"195":1,"197":1,"198":2,"199":1,"203":2,"205":1,"208":3,"213":2,"214":1,"215":1,"216":1,"217":1,"218":1,"219":1,"220":2}}],["i",{"0":{"3":1,"129":1},"2":{"79":1,"213":1,"219":2}}],["inactivity",{"2":{"195":1}}],["inefficient",{"2":{"179":1,"181":1}}],["inject",{"2":{"146":1}}],["injects",{"2":{"53":1}}],["inherent",{"2":{"130":1}}],["invented",{"2":{"126":1}}],["invoked",{"2":{"46":1}}],["involves",{"2":{"33":1,"82":1}}],["involved",{"0":{"3":1},"2":{"123":1}}],["inlining",{"2":{"116":1}}],["inline",{"2":{"38":3,"142":3}}],["infrastructure",{"0":{"131":1},"1":{"132":1,"133":1},"2":{"58":1,"130":1,"131":1}}],["information",{"2":{"93":1,"115":1,"132":1,"172":1,"177":1,"183":1}}],["informs",{"2":{"22":1}}],["info",{"2":{"26":15}}],["innovation",{"2":{"45":1,"113":1}}],["industry",{"2":{"130":1}}],["indicated",{"2":{"44":1}}],["indicates",{"2":{"34":1,"146":1}}],["indexer",{"2":{"185":1,"192":1,"194":3,"195":4,"197":1,"199":1}}],["indexed",{"2":{"11":1,"16":1,"17":1,"18":1,"19":1,"22":2,"26":1,"34":1,"195":1}}],["index",{"2":{"26":1,"28":1,"60":1,"197":1}}],["indexing",{"0":{"26":1},"2":{"26":1,"197":1}}],["inputs",{"2":{"209":1}}],["input",{"2":{"26":2,"180":1,"182":1,"213":1}}],["inprogress",{"2":{"15":3}}],["incorrect",{"2":{"210":2}}],["incorporate",{"2":{"64":1,"115":1}}],["increment",{"2":{"39":1}}],["increased",{"2":{"113":1}}],["increase",{"2":{"24":1}}],["including",{"2":{"53":1,"116":1,"129":1}}],["includes",{"2":{"26":1,"131":1,"163":1,"178":1}}],["include",{"2":{"19":1,"22":1,"51":1,"55":1,"163":1,"194":1,"218":1}}],["inclusion",{"2":{"22":1}}],["inside",{"2":{"208":1}}],["inspired",{"2":{"79":1}}],["inspect",{"2":{"22":1}}],["instructions",{"2":{"93":1}}],["instantiated",{"2":{"150":1}}],["instantiate",{"2":{"149":1}}],["instances",{"2":{"155":1,"159":1}}],["instance",{"2":{"36":1,"44":1,"81":1}}],["installation",{"0":{"156":1,"165":1,"189":1},"1":{"166":1,"190":1},"2":{"165":1,"189":1}}],["installations",{"0":{"137":1},"2":{"156":1}}],["installing",{"0":{"135":1,"166":1,"190":1},"2":{"100":1}}],["install",{"0":{"93":1,"100":1,"101":1},"2":{"90":1,"91":6,"93":3,"100":2,"101":2,"102":1,"135":1,"136":11,"138":1,"156":1,"166":2,"190":3}}],["installed",{"2":{"20":1,"25":1,"90":1,"165":1,"189":1,"198":1}}],["instead",{"2":{"14":1,"125":1,"137":1,"149":1,"182":1}}],["init",{"0":{"230":1},"2":{"21":1,"169":1,"198":1,"201":2,"230":2}}],["initiate",{"2":{"81":1,"199":1}}],["initiative",{"2":{"2":1}}],["initially",{"2":{"182":1}}],["initializing",{"0":{"201":1},"2":{"36":1}}],["initialize",{"2":{"198":1,"201":1,"230":2}}],["initialized",{"2":{"18":1}}],["initializer",{"2":{"13":1,"202":1}}],["initial",{"2":{"1":1,"6":1,"49":1,"52":1}}],["intuitive",{"2":{"164":1,"181":1}}],["intended",{"2":{"219":1}}],["integers",{"2":{"180":1}}],["integrate",{"2":{"133":1}}],["integrating",{"2":{"78":1}}],["integration",{"0":{"56":1},"1":{"57":1},"2":{"56":3,"132":1,"202":2,"216":2,"217":1,"220":1}}],["interconnected",{"2":{"132":1}}],["interpret",{"2":{"124":1}}],["interested",{"2":{"105":1,"109":1,"182":1}}],["interfacing",{"2":{"65":1}}],["interfaces",{"2":{"51":1,"63":1,"143":1,"187":1}}],["interface",{"0":{"144":1,"145":1},"2":{"22":2,"42":2,"49":1,"60":3,"144":2,"145":2,"163":1,"185":1}}],["interacts",{"2":{"58":2}}],["interactively",{"2":{"173":1}}],["interaction",{"2":{"45":1}}],["interacting",{"2":{"4":1,"70":1,"163":1}}],["interacted",{"2":{"26":1,"60":1}}],["interact",{"2":{"7":1,"8":1,"26":1,"42":1,"53":1,"82":1,"113":1,"124":1,"198":1,"209":1}}],["intricacies",{"2":{"132":1}}],["intricate",{"2":{"21":1}}],["intrinsic",{"2":{"39":1}}],["introduction",{"0":{"142":1}}],["introductory",{"2":{"106":1}}],["introducing",{"2":{"140":1}}],["introduced",{"2":{"113":2,"139":1}}],["introduce",{"2":{"39":1}}],["introduces",{"2":{"4":1,"53":1,"146":1}}],["introspection",{"2":{"188":1}}],["introspect",{"2":{"15":1,"22":1,"42":1,"203":3}}],["into",{"0":{"42":1,"211":1},"1":{"212":1,"213":1,"214":1},"2":{"7":1,"15":3,"21":1,"24":1,"25":1,"26":2,"27":1,"39":1,"40":1,"41":1,"52":1,"53":1,"56":1,"64":1,"69":1,"92":1,"106":1,"125":1,"128":1,"198":1,"210":2,"212":1,"214":1,"217":3}}],["in",{"0":{"21":1,"24":1,"39":2,"51":1,"71":1,"141":1},"1":{"22":1,"23":1,"24":1,"25":1,"26":1,"27":1},"2":{"1":2,"4":1,"5":1,"7":1,"9":3,"10":1,"13":1,"14":3,"15":3,"16":1,"17":1,"19":2,"21":3,"22":7,"24":2,"25":5,"26":5,"29":4,"32":1,"33":1,"34":1,"36":1,"38":1,"39":2,"44":2,"45":2,"46":1,"47":1,"52":1,"53":4,"55":2,"56":1,"57":1,"59":1,"62":1,"70":2,"79":1,"80":1,"84":1,"87":1,"88":1,"93":1,"105":1,"109":2,"113":6,"115":2,"116":1,"118":1,"119":1,"127":2,"128":3,"130":1,"136":7,"140":1,"142":1,"143":1,"145":1,"155":1,"163":2,"172":4,"175":1,"177":2,"178":1,"179":1,"181":1,"182":4,"183":2,"185":1,"194":2,"195":5,"197":1,"198":1,"199":1,"203":2,"204":2,"206":1,"208":2,"209":4,"213":1,"214":1,"216":3,"217":15,"218":1,"228":1,"230":1}}],["items",{"2":{"25":1,"180":1}}],["its",{"2":{"1":1,"6":1,"22":1,"26":1,"36":1,"41":1,"47":1,"49":1,"87":1,"106":1,"115":1,"116":1,"118":1,"132":1,"142":1,"144":1,"182":3}}],["it",{"0":{"23":1,"25":1,"50":1},"1":{"24":1,"51":1,"52":1,"53":1},"2":{"1":1,"2":1,"6":1,"10":1,"14":1,"18":1,"19":2,"21":1,"22":2,"24":1,"25":2,"26":2,"28":1,"29":3,"30":2,"34":1,"36":1,"37":1,"38":1,"39":1,"40":1,"47":1,"48":2,"49":1,"51":1,"52":2,"53":1,"55":2,"57":1,"58":5,"60":2,"61":2,"62":1,"63":2,"70":1,"79":1,"83":1,"88":1,"92":1,"95":1,"105":2,"106":1,"113":2,"116":1,"118":2,"119":2,"122":2,"125":1,"126":3,"130":1,"131":1,"133":1,"142":1,"163":4,"172":3,"173":2,"175":1,"177":1,"178":1,"182":1,"184":2,"195":1,"198":1,"202":1,"204":2,"210":1,"216":1,"218":1,"219":1,"220":1,"222":1,"230":1,"231":1}}],["isomorphic",{"2":{"119":1}}],["isolated",{"2":{"33":1}}],["issue",{"2":{"88":2,"109":3,"123":1}}],["issues",{"0":{"109":1},"2":{"88":1,"109":1,"123":1,"205":1}}],["isn",{"2":{"21":1}}],["is",{"0":{"24":1,"40":1,"51":1,"123":1,"124":1,"125":1,"126":1,"127":1,"130":1},"1":{"131":1,"132":1,"133":1},"2":{"0":1,"1":4,"2":2,"4":2,"5":2,"6":2,"7":1,"9":2,"10":1,"11":1,"13":2,"14":1,"16":1,"17":2,"22":5,"24":2,"25":1,"26":2,"27":2,"30":2,"33":1,"34":5,"35":7,"37":1,"39":1,"40":1,"42":1,"43":1,"44":2,"46":1,"48":3,"49":1,"51":1,"52":3,"53":1,"54":1,"55":8,"56":4,"58":3,"60":4,"61":1,"62":1,"63":2,"64":1,"69":2,"70":1,"72":2,"79":1,"81":1,"83":1,"85":1,"86":1,"87":1,"88":1,"90":1,"92":1,"93":1,"95":2,"105":2,"106":2,"109":2,"110":2,"113":5,"115":1,"116":2,"118":6,"119":4,"121":1,"123":1,"125":2,"126":1,"127":2,"128":2,"129":2,"130":3,"141":1,"143":1,"144":3,"145":1,"155":1,"163":1,"172":3,"173":1,"175":1,"176":1,"178":2,"180":1,"182":4,"183":1,"184":2,"185":1,"194":1,"195":4,"198":1,"199":1,"204":1,"207":10,"208":6,"209":1,"210":2,"213":1,"214":1,"217":4,"219":5,"220":2,"228":1,"229":1,"230":1,"231":1,"232":1,"233":1,"234":1}}],["a4",{"2":{"217":4}}],["a2",{"2":{"210":4,"217":4}}],["a1",{"2":{"203":1,"210":5,"213":5}}],["akin",{"2":{"118":1}}],["availability",{"2":{"113":1}}],["available",{"2":{"55":2,"56":1,"93":1,"138":1,"157":1,"166":1,"210":2,"217":1}}],["aim",{"2":{"127":1}}],["aims",{"2":{"53":1,"106":1,"115":1,"116":1}}],["ai",{"2":{"79":1}}],["away",{"2":{"58":1}}],["awesome",{"0":{"79":1},"2":{"26":1,"72":1,"117":1}}],["aws",{"2":{"2":1,"4":1,"92":1,"113":1,"116":2,"132":1,"163":1}}],["after",{"0":{"221":1},"2":{"26":1,"175":1,"177":2,"178":1,"180":5,"183":1,"195":1,"198":1,"212":1,"213":1,"214":1,"221":1}}],["again",{"2":{"22":1}}],["acts",{"2":{"80":1}}],["act",{"2":{"47":1}}],["actively",{"2":{"183":1}}],["activated",{"2":{"26":1}}],["acting",{"2":{"132":1}}],["action",{"2":{"26":1,"183":1,"206":1}}],["actionsimpl",{"2":{"22":1}}],["actions",{"2":{"22":3,"25":1,"26":2,"39":1,"42":1,"49":1,"53":1,"56":7,"116":1,"202":2,"204":3,"209":3,"210":10,"212":4,"213":2,"214":1,"216":1,"217":6}}],["achieve",{"2":{"36":1,"116":1}}],["across",{"2":{"33":1,"35":1,"49":1}}],["accurate",{"2":{"53":1}}],["accepts",{"2":{"208":1}}],["accepting",{"2":{"113":1}}],["accepted",{"2":{"113":1}}],["accept",{"2":{"49":1}}],["accessing",{"2":{"35":1,"225":1}}],["accessible",{"2":{"26":1}}],["access",{"2":{"22":2,"42":1,"46":1,"48":1,"67":1,"113":1,"172":1}}],["according",{"2":{"176":1,"182":1}}],["accordingly",{"2":{"140":1}}],["accomplish",{"2":{"26":2}}],["accounts",{"2":{"198":1}}],["account",{"2":{"13":2,"25":1,"83":4,"198":5,"202":2,"228":3}}],["attempts",{"2":{"130":1}}],["attrs",{"2":{"38":1,"142":1}}],["attributes",{"2":{"22":1,"29":2,"142":1}}],["attribute",{"0":{"34":1},"2":{"22":2,"24":1,"29":1,"32":1,"33":2,"34":1,"44":2,"49":1}}],["attacker",{"2":{"38":1,"142":1}}],["attack",{"2":{"36":1}}],["attached",{"2":{"14":2}}],["at",{"2":{"7":1,"21":1,"22":1,"25":3,"26":2,"30":1,"34":1,"41":1,"42":1,"49":1,"83":1,"106":1,"113":1,"127":1,"130":1,"136":1,"175":1,"176":1,"179":1,"188":2,"198":1,"213":1,"214":1,"215":1}}],["above",{"2":{"26":1,"38":1,"142":1}}],["about",{"2":{"15":1,"19":1,"22":1,"25":1,"26":1,"28":1,"44":1,"48":1,"93":1,"113":2,"115":1,"126":1,"132":1,"177":2,"179":1,"220":1}}],["ability",{"2":{"128":1}}],["abi",{"2":{"22":1,"39":1,"42":1,"49":1,"53":1,"145":2,"208":1}}],["abstracts",{"2":{"58":1}}],["abstraction",{"2":{"41":1,"113":1}}],["abstracting",{"2":{"7":1}}],["abstract",{"2":{"7":1,"113":1}}],["able",{"2":{"6":1,"58":1,"82":1,"85":1}}],["apt",{"2":{"136":1}}],["apparent",{"2":{"176":1}}],["application",{"2":{"198":1}}],["applications",{"2":{"115":1,"116":2,"172":1,"194":1}}],["applied",{"2":{"178":1,"183":1}}],["applies",{"2":{"130":1}}],["appchain",{"0":{"119":1},"2":{"119":1}}],["appchains",{"2":{"115":1,"119":2}}],["app",{"2":{"42":1,"64":1}}],["append",{"2":{"38":1,"142":1}}],["approach",{"0":{"41":1},"1":{"42":1,"43":1,"44":1,"45":1},"2":{"33":1,"127":1,"132":1,"183":1,"203":1}}],["appropriate",{"2":{"4":1,"116":1}}],["apis",{"2":{"173":1,"182":1}}],["api",{"0":{"60":1},"2":{"26":2,"83":3,"172":1,"173":1,"178":2,"185":1,"187":1,"188":2,"194":2,"197":1,"228":1}}],["apache",{"2":{"2":1,"121":1}}],["alchemy",{"2":{"83":1}}],["along",{"2":{"58":1}}],["altered",{"2":{"58":1}}],["alter",{"2":{"46":1,"49":1}}],["although",{"2":{"21":1,"58":1,"178":1}}],["algebra",{"2":{"40":1}}],["always",{"2":{"38":3,"69":1,"142":3,"219":1}}],["already",{"2":{"10":1,"15":1,"20":1,"208":2}}],["allowed",{"2":{"197":4}}],["allowing",{"2":{"36":1,"45":1,"130":1,"132":1,"180":1}}],["allow",{"2":{"17":1,"176":1}}],["allows",{"2":{"4":1,"6":1,"53":1,"54":1,"145":1,"146":1,"172":1,"173":1,"182":1,"183":1,"222":1}}],["all",{"2":{"9":1,"16":1,"26":1,"34":1,"53":1,"54":1,"55":1,"59":1,"63":1,"93":1,"105":1,"124":1,"130":1,"137":1,"140":1,"157":1,"163":2,"166":1,"177":1,"179":1,"197":1,"198":1,"202":1,"212":1,"220":2,"221":1,"223":1,"231":1}}],["also",{"2":{"4":2,"9":1,"10":1,"18":2,"22":1,"36":1,"49":1,"57":1,"90":1,"113":1,"118":1,"119":2,"182":2}}],["argument",{"2":{"182":1}}],["arguments",{"2":{"180":1}}],["artwork",{"2":{"113":1}}],["artists",{"2":{"72":1}}],["artifacts",{"2":{"229":1}}],["artifact",{"2":{"25":2}}],["arise",{"2":{"100":1}}],["around",{"2":{"58":1,"93":1,"113":1,"132":1,"178":1}}],["arraytrait",{"2":{"39":1}}],["array",{"2":{"38":7,"39":1,"56":1,"60":1,"142":7,"149":1,"207":3,"210":1,"212":1}}],["arrays",{"2":{"37":1}}],["arbitrary",{"2":{"29":1}}],["are",{"0":{"33":1,"47":1,"137":1,"220":1},"1":{"34":1,"35":1,"36":1,"37":1,"38":1},"2":{"4":1,"7":4,"8":2,"9":4,"10":2,"11":1,"13":1,"14":2,"15":1,"16":1,"18":3,"19":1,"20":1,"24":1,"26":1,"32":2,"33":1,"44":1,"45":1,"46":1,"53":1,"55":2,"56":1,"58":1,"65":1,"82":1,"84":1,"85":1,"89":1,"95":1,"109":1,"113":1,"114":1,"116":1,"124":2,"128":1,"130":1,"132":1,"138":2,"140":1,"143":2,"172":1,"176":2,"180":4,"182":2,"183":1,"185":1,"198":2,"203":2,"204":2,"213":1,"218":1,"219":1}}],["architecture",{"0":{"5":1,"42":1},"2":{"1":1,"5":1,"41":1,"132":1}}],["ask",{"2":{"215":1}}],["aspires",{"2":{"130":1}}],["aspects",{"2":{"42":1,"130":1,"163":1}}],["assuming",{"2":{"136":1}}],["assumes",{"2":{"20":1}}],["assigned",{"2":{"88":1}}],["asset",{"2":{"29":1}}],["assets",{"2":{"29":3}}],["assert",{"2":{"15":6,"55":2,"56":3,"150":1,"207":1,"208":3,"210":14,"213":3,"214":3,"217":15}}],["associating",{"2":{"28":1}}],["associated",{"2":{"22":1,"176":1}}],["as",{"0":{"21":1,"118":1,"119":1},"1":{"22":1,"23":1,"24":1,"25":1,"26":1,"27":1},"2":{"4":2,"7":1,"9":3,"10":2,"14":1,"15":2,"22":3,"24":1,"25":1,"26":1,"28":1,"33":1,"34":4,"35":1,"36":1,"39":2,"42":1,"44":1,"46":2,"47":1,"49":2,"51":1,"53":1,"55":1,"58":3,"60":1,"79":1,"80":1,"85":1,"105":1,"106":3,"109":2,"113":3,"118":3,"130":1,"132":1,"138":1,"142":1,"149":1,"150":1,"172":1,"179":1,"181":1,"182":1,"183":1,"195":2,"198":2,"203":1,"209":1,"212":1,"220":1}}],["automatic",{"2":{"185":1,"192":1}}],["automatically",{"2":{"26":1,"29":1,"115":1}}],["auto",{"2":{"26":1}}],["autonomous",{"0":{"113":1,"125":1},"1":{"114":1},"2":{"1":1,"2":1,"4":1,"79":4,"92":1,"113":5,"114":4,"116":1,"125":2,"132":1}}],["authentication",{"2":{"198":1}}],["authenticating",{"2":{"198":1}}],["authorize",{"2":{"6":1}}],["authorization",{"0":{"4":1,"6":1},"1":{"5":1,"6":1},"2":{"4":3,"5":3,"6":1,"232":1}}],["auth",{"0":{"5":1,"232":1},"2":{"6":1,"161":2,"170":1,"198":3,"232":6}}],["amp",{"0":{"73":1,"78":1,"99":1},"1":{"74":1,"75":1,"76":1,"77":1,"100":1,"101":1,"102":1},"2":{"2":1,"35":2,"78":1,"100":4,"115":1,"198":2,"207":44}}],["adaptation",{"2":{"79":1}}],["adaptable",{"2":{"49":1}}],["adjust",{"2":{"53":1,"142":1}}],["advancements",{"2":{"105":1}}],["advanced",{"2":{"41":1}}],["advancing",{"2":{"2":1}}],["adhering",{"2":{"33":1}}],["adhere",{"2":{"22":1,"113":1}}],["adopting",{"2":{"21":1}}],["added",{"2":{"113":1}}],["adding",{"2":{"110":1,"218":1}}],["additionally",{"2":{"178":1}}],["additional",{"2":{"1":1,"28":1,"32":1,"39":1,"100":1}}],["add",{"0":{"102":1},"2":{"29":1,"63":1,"64":1,"65":1,"66":1,"67":1,"68":1,"145":1,"203":2,"210":1,"216":1,"218":1,"220":1}}],["addresses",{"2":{"115":1,"209":1,"213":1}}],["address",{"2":{"9":1,"11":1,"12":1,"13":1,"17":1,"18":3,"19":3,"22":7,"24":1,"25":5,"26":5,"34":1,"42":3,"46":1,"49":3,"53":3,"56":3,"58":1,"60":5,"83":4,"149":1,"175":1,"179":1,"183":1,"188":1,"197":1,"198":6,"199":1,"202":1,"203":1,"208":3,"210":8,"212":2,"213":4,"214":1,"217":2,"228":3,"232":3}}],["a",{"0":{"22":1,"24":2,"41":1,"45":1,"51":2,"112":1,"127":1,"219":1},"1":{"42":1,"43":1,"44":1,"45":1,"220":1,"221":1},"2":{"1":4,"4":5,"5":2,"6":4,"7":1,"9":2,"11":1,"12":1,"13":3,"14":6,"15":2,"16":3,"17":2,"19":3,"21":7,"22":8,"24":7,"25":2,"26":8,"27":1,"29":4,"30":1,"33":1,"34":5,"35":2,"36":6,"39":11,"42":1,"43":1,"44":3,"45":2,"46":1,"47":3,"48":1,"49":2,"51":3,"52":1,"53":1,"54":3,"55":1,"56":2,"57":1,"58":3,"60":1,"61":1,"62":1,"64":1,"70":1,"72":1,"79":4,"80":1,"81":1,"82":1,"83":1,"84":1,"86":1,"88":1,"90":1,"91":2,"93":1,"95":2,"105":1,"106":3,"109":1,"110":4,"111":1,"113":7,"115":1,"116":3,"118":5,"119":2,"122":1,"124":1,"126":2,"127":9,"128":1,"129":1,"130":2,"132":1,"134":1,"136":8,"137":1,"145":1,"146":1,"155":1,"157":1,"159":1,"163":5,"166":1,"172":3,"173":2,"176":2,"177":2,"179":1,"180":2,"182":10,"183":1,"184":2,"185":2,"188":2,"190":1,"192":1,"194":1,"195":4,"197":2,"198":9,"199":2,"200":1,"201":1,"202":1,"203":3,"204":1,"208":2,"213":3,"214":1,"216":2,"218":2,"219":3,"220":5,"223":5,"230":2,"232":2,"234":8}}],["answer",{"2":{"219":1}}],["answers",{"2":{"219":1}}],["ancillary",{"2":{"106":1}}],["analogy",{"2":{"39":1}}],["anatomy",{"0":{"22":1},"2":{"24":1}}],["another",{"2":{"36":1,"221":1}}],["annotated",{"2":{"33":1}}],["anything",{"2":{"110":1}}],["anyone",{"2":{"4":1,"121":2}}],["any",{"2":{"4":1,"9":1,"26":1,"29":1,"30":1,"33":1,"54":1,"60":1,"69":1,"100":1,"125":1,"129":1,"130":1,"178":2,"183":1}}],["and",{"0":{"100":1,"137":1,"176":1},"2":{"1":5,"2":2,"3":1,"6":1,"7":2,"9":2,"10":1,"13":1,"14":1,"16":1,"17":1,"18":3,"19":2,"20":1,"21":3,"22":6,"24":9,"25":2,"26":11,"27":1,"28":4,"29":3,"30":1,"32":1,"33":1,"34":1,"35":1,"39":7,"41":1,"42":1,"45":1,"46":2,"49":1,"51":1,"53":2,"54":1,"55":1,"57":3,"58":3,"62":1,"63":2,"72":1,"78":1,"79":1,"81":2,"83":1,"85":1,"87":1,"90":1,"92":1,"93":2,"100":1,"105":5,"106":2,"110":1,"113":9,"115":4,"116":5,"118":4,"119":1,"121":2,"122":1,"123":1,"124":2,"127":3,"128":2,"130":1,"132":2,"133":1,"138":1,"139":1,"140":1,"142":3,"143":1,"146":1,"149":2,"150":1,"155":1,"156":1,"159":1,"163":2,"166":1,"172":5,"173":1,"175":1,"176":4,"178":2,"179":1,"180":3,"181":1,"183":3,"184":1,"185":4,"186":1,"188":1,"190":1,"192":1,"194":4,"195":2,"198":6,"199":1,"201":1,"203":1,"208":1,"209":2,"210":1,"212":2,"213":2,"214":1,"216":2,"217":2,"219":1,"220":2,"234":1}}],["an",{"0":{"21":1,"118":1,"119":1,"124":1,"125":1},"1":{"22":1,"23":1,"24":1,"25":1,"26":1,"27":1},"2":{"0":1,"1":1,"2":1,"13":1,"15":2,"16":1,"17":2,"19":1,"21":2,"22":2,"25":1,"26":1,"36":1,"39":1,"41":1,"58":1,"60":1,"78":1,"79":6,"80":1,"87":1,"88":3,"106":1,"109":1,"113":2,"114":1,"116":1,"118":1,"119":1,"123":1,"125":1,"126":1,"127":1,"130":2,"132":1,"144":1,"147":1,"164":1,"172":1,"177":2,"178":3,"182":4,"183":1,"184":1,"185":1,"187":1,"188":1,"192":1,"203":1,"207":1,"220":1}}],["edit",{"2":{"203":1}}],["edges",{"2":{"177":2,"178":2,"180":2}}],["errors",{"2":{"195":1}}],["erc",{"2":{"40":1}}],["ephemeral",{"2":{"195":1}}],["etc",{"2":{"137":1}}],["ethereum",{"2":{"4":1,"113":1,"118":3}}],["ecosystem",{"0":{"73":1},"1":{"74":1,"75":1,"76":1,"77":1},"2":{"92":1}}],["ecs",{"0":{"21":1,"132":1},"1":{"22":1,"23":1,"24":1,"25":1,"26":1,"27":1},"2":{"14":4,"21":1,"22":1,"33":1,"58":1,"132":2,"203":1}}],["e2e",{"2":{"56":1}}],["effectively",{"2":{"132":1}}],["effortless",{"2":{"45":1}}],["efficiently",{"2":{"42":1,"132":1,"172":1}}],["efficient",{"2":{"16":1,"81":1,"115":1,"180":1,"184":1}}],["either",{"2":{"29":1,"91":1,"195":1}}],["e",{"2":{"22":1,"24":1,"79":1,"136":1,"203":1,"213":1}}],["essential",{"0":{"117":1},"2":{"105":1,"113":1,"183":1}}],["essentially",{"2":{"22":1,"181":1}}],["establish",{"2":{"36":1,"127":1}}],["established",{"2":{"26":1,"113":1}}],["establishes",{"2":{"1":1,"25":1,"26":1}}],["equivalent",{"2":{"137":1,"228":1}}],["equipped",{"2":{"27":1}}],["equips",{"2":{"21":1}}],["equal",{"2":{"9":1,"35":3,"55":4}}],["elements",{"2":{"212":1}}],["eliminating",{"2":{"115":1}}],["eliminates",{"2":{"53":1}}],["elusive",{"2":{"113":1}}],["elucidates",{"2":{"1":1}}],["else",{"2":{"13":1}}],["emerging",{"2":{"113":1,"130":1}}],["emergent",{"2":{"1":1}}],["emoji",{"2":{"79":1}}],["employ",{"2":{"36":1}}],["empty",{"2":{"21":1,"207":2}}],["embed",{"2":{"22":1,"39":1,"42":1,"49":1,"53":1,"145":2,"208":1}}],["emitting",{"2":{"19":1}}],["emitted",{"2":{"18":1,"178":1,"183":2}}],["emits",{"2":{"16":1,"18":1,"59":1}}],["emit",{"0":{"11":1},"2":{"11":4,"17":2,"19":4,"22":2,"53":2,"60":1}}],["ease",{"2":{"134":1}}],["easier",{"2":{"118":1,"122":1,"181":1}}],["easiest",{"2":{"90":1}}],["easily",{"2":{"28":1,"39":1,"93":1,"109":1}}],["easy",{"0":{"81":1},"2":{"16":1,"26":1,"62":1,"83":1,"164":1,"172":1,"187":1}}],["earlier",{"2":{"24":1,"144":1}}],["early",{"2":{"1":1,"87":1}}],["each",{"2":{"9":1,"34":2,"39":1,"56":1,"109":1,"127":1,"142":1,"143":2,"144":1,"145":1,"176":1,"198":1,"209":1,"212":1,"213":1}}],["evaluating",{"2":{"25":1}}],["evolving",{"2":{"21":1,"123":1}}],["evolve",{"2":{"1":1}}],["eventemitted",{"2":{"183":3}}],["eventually",{"2":{"113":1}}],["eventid",{"2":{"26":3,"182":2}}],["event",{"2":{"17":4,"18":4,"19":3,"22":7,"53":5,"59":1,"147":5,"182":4,"183":1}}],["events",{"0":{"16":1,"17":1,"18":1,"19":1,"59":1,"147":1,"183":1,"233":1},"1":{"17":1,"18":1,"19":1},"2":{"11":2,"16":4,"18":3,"19":3,"59":1,"139":1,"147":2,"170":1,"183":2,"184":1,"194":1,"233":3}}],["even",{"2":{"16":1,"115":1,"218":1}}],["everything",{"2":{"21":1,"59":1,"163":1,"216":1}}],["every",{"2":{"5":1,"16":1,"49":1,"58":1,"113":1,"127":2,"130":1,"182":1,"203":1,"220":1}}],["encouraged",{"2":{"219":1}}],["encapsulating",{"2":{"116":1}}],["encapsulates",{"2":{"42":1}}],["en",{"2":{"218":1}}],["enable",{"2":{"119":1}}],["enables",{"2":{"59":1,"116":1}}],["enabling",{"2":{"28":1,"33":1,"80":1,"163":1}}],["enact",{"2":{"47":1}}],["engage",{"2":{"46":1}}],["engines",{"2":{"133":1}}],["engineering",{"2":{"114":1,"130":1}}],["engine",{"0":{"1":1},"1":{"2":1,"3":1},"2":{"1":2,"26":11,"105":2,"106":1,"114":1,"203":1,"218":1}}],["ensures",{"2":{"82":1,"105":1,"172":1}}],["ensure",{"2":{"46":1,"81":1,"127":1,"140":1,"144":1,"145":1,"209":1}}],["ensuring",{"2":{"16":1,"53":1,"113":2,"127":1,"164":1}}],["endeavored",{"2":{"130":1}}],["endpoints",{"2":{"186":1,"194":2,"197":1,"199":1}}],["endpoint",{"2":{"83":2,"194":1,"197":1,"198":2}}],["endless",{"2":{"79":1}}],["end",{"2":{"27":2,"127":1,"218":1}}],["entail",{"2":{"127":1}}],["entry",{"2":{"113":1,"176":1}}],["enter",{"2":{"26":1}}],["entirely",{"2":{"124":1,"125":1,"128":1}}],["entire",{"2":{"26":1,"56":1,"180":1}}],["entities",{"0":{"14":1},"2":{"14":3,"26":2,"60":1,"61":1,"132":2,"176":2,"177":1,"178":1,"179":1,"180":6,"181":1,"183":1}}],["entityupdated",{"2":{"26":3,"182":3}}],["entity",{"0":{"132":1},"2":{"9":2,"10":1,"14":3,"21":1,"22":1,"24":2,"26":2,"33":2,"36":1,"39":10,"60":4,"125":1,"132":1,"182":3,"184":1,"194":1,"203":1,"209":2}}],["enums",{"0":{"38":1},"2":{"15":2,"32":1,"37":1,"142":1}}],["enum",{"0":{"15":1},"2":{"15":3,"22":1,"38":3,"53":1,"142":3,"147":1,"203":2}}],["environments",{"2":{"113":1,"227":1}}],["environment",{"2":{"21":1,"25":1,"80":1,"95":1,"127":1,"197":1}}],["env",{"2":{"13":1,"198":1,"202":1,"225":1,"228":2}}],["enhancements",{"2":{"113":1}}],["enhancement",{"2":{"88":1}}],["enhance",{"2":{"4":1,"116":1}}],["ex",{"2":{"197":1}}],["extracted",{"2":{"207":1}}],["extract",{"2":{"183":1}}],["extension",{"0":{"102":1},"2":{"102":1}}],["external",{"2":{"28":1,"197":3}}],["exactly",{"2":{"172":1}}],["examine",{"2":{"22":1}}],["examples",{"2":{"13":1,"25":1,"39":4,"49":2,"53":2,"56":2}}],["example",{"0":{"0":1},"2":{"0":1,"9":1,"13":1,"14":1,"17":1,"19":1,"29":3,"35":1,"38":1,"39":1,"55":1,"56":1,"78":1,"83":1,"142":1,"147":1,"176":1,"178":2,"181":1,"182":2,"183":2,"226":1,"232":1,"234":2}}],["existing",{"2":{"164":1,"198":1}}],["exist",{"2":{"113":1,"124":3,"208":1}}],["exists",{"2":{"52":1,"119":1,"125":1,"129":1,"197":1,"203":1,"213":1}}],["exceptionally",{"2":{"185":1}}],["excellent",{"2":{"13":1}}],["excavating",{"2":{"79":1}}],["excluding",{"2":{"22":1}}],["exclusively",{"2":{"21":1}}],["exciting",{"2":{"16":1}}],["executing",{"2":{"182":1}}],["execution",{"2":{"7":1,"113":3}}],["executor",{"2":{"25":1,"60":2}}],["execute",{"2":{"21":1,"25":2,"26":2,"81":1,"128":1,"143":1,"144":1,"149":1,"170":1,"178":1,"182":1,"183":2,"199":1}}],["executed",{"2":{"5":1}}],["exposing",{"2":{"172":1}}],["exposes",{"2":{"24":1,"60":1,"63":1,"186":1,"194":1}}],["expertise",{"2":{"132":1}}],["experienced",{"2":{"106":1}}],["experience",{"2":{"80":1,"106":1,"127":1}}],["experiences",{"2":{"28":1}}],["expect",{"2":{"128":1}}],["expressive",{"2":{"116":1}}],["exploring",{"2":{"177":1}}],["exploration",{"2":{"113":1}}],["explorer",{"2":{"177":1}}],["explorers",{"2":{"59":1}}],["explored",{"2":{"45":1}}],["explore",{"2":{"1":1,"173":1,"178":1}}],["explicit",{"2":{"47":1}}],["explained",{"2":{"24":4}}],["expanding",{"2":{"113":1}}],["expand",{"2":{"69":1,"113":1}}],["expanded",{"2":{"7":1}}],["expansive",{"2":{"27":1}}],["expansion",{"2":{"22":1,"53":1}}],["people",{"2":{"219":1}}],["period",{"2":{"195":1}}],["per",{"2":{"143":1,"150":1}}],["perfectly",{"2":{"119":1,"129":1}}],["performance",{"2":{"116":1,"185":1}}],["perform",{"2":{"26":1}}],["perpetual",{"2":{"113":1}}],["permanently",{"2":{"113":1}}],["permits",{"2":{"49":1}}],["permissionless",{"2":{"113":3,"118":1}}],["permission",{"2":{"47":1,"113":1}}],["permissions",{"0":{"48":1},"2":{"46":2}}],["persistence",{"2":{"113":1}}],["persistently",{"2":{"195":1}}],["persistent",{"2":{"113":1,"132":1,"195":3}}],["persist",{"2":{"113":1}}],["put",{"2":{"213":1}}],["push",{"2":{"182":1}}],["pushing",{"2":{"72":1}}],["puzzle",{"2":{"118":1}}],["pull",{"0":{"110":1},"2":{"110":2,"136":1}}],["pure",{"2":{"132":1}}],["purely",{"2":{"42":1,"124":1}}],["purpose",{"0":{"106":1},"2":{"119":1,"126":1}}],["public",{"0":{"84":1},"2":{"4":2,"124":1,"129":1}}],["png",{"2":{"29":2}}],["pieceimpl",{"2":{"207":1}}],["piecetrait",{"2":{"207":3,"208":1}}],["piecetype",{"2":{"203":2,"207":7,"208":2,"210":7,"213":2,"214":2,"217":11}}],["piece",{"2":{"202":2,"203":5,"207":18,"208":27,"209":2,"210":19,"212":1,"213":7,"214":5,"216":1,"217":22}}],["pieces",{"2":{"109":1,"213":1,"216":1,"217":1,"220":2}}],["pixel",{"2":{"79":1}}],["pixelaw",{"2":{"79":1}}],["pivotal",{"2":{"16":1,"47":1}}],["pinned",{"2":{"13":1}}],["plausible",{"2":{"128":1}}],["planning",{"2":{"163":1}}],["plan",{"2":{"46":1}}],["places",{"2":{"217":1}}],["place",{"2":{"36":1,"177":1,"216":1}}],["playground",{"0":{"173":1},"2":{"26":1,"173":1,"197":1}}],["play",{"2":{"16":1,"47":1,"89":1,"95":1,"113":1,"155":1,"178":1,"220":2}}],["playertrait",{"2":{"207":3}}],["playeractions",{"2":{"49":1}}],["playeractionsimpl",{"2":{"42":1,"49":1,"53":1,"208":1}}],["players",{"2":{"22":1,"79":1,"113":1,"127":2,"213":3}}],["player",{"2":{"9":2,"10":2,"14":2,"17":2,"22":25,"24":11,"33":1,"34":6,"42":8,"44":1,"49":4,"52":2,"53":11,"147":2,"177":2,"182":2,"202":2,"203":8,"207":6,"208":6,"209":1,"210":9,"212":1,"214":1,"217":1}}],["please",{"2":{"20":1,"88":2,"109":1,"123":1}}],["plenty",{"2":{"14":1}}],["panic",{"2":{"207":3}}],["palyerimpl",{"2":{"207":1}}],["pawn",{"2":{"203":1,"207":1,"210":4,"214":4,"216":6,"217":18,"218":1}}],["paginate",{"2":{"180":1}}],["pagination",{"0":{"179":1},"1":{"180":1,"181":1},"2":{"178":1,"179":2,"180":4,"181":1,"183":1}}],["page",{"2":{"0":1,"112":2,"138":1,"180":1}}],["paves",{"2":{"132":1}}],["patch",{"2":{"136":2}}],["path",{"2":{"91":4,"137":1,"166":1,"190":1}}],["pattern",{"2":{"21":1,"39":1,"58":1,"113":1,"116":1}}],["paper",{"2":{"79":1}}],["paint",{"2":{"79":1}}],["pair",{"2":{"44":1}}],["pace",{"2":{"105":1}}],["pac",{"2":{"79":1}}],["packages",{"2":{"106":1}}],["package",{"0":{"101":1},"2":{"13":2,"83":1,"90":1,"101":1,"165":1,"184":1,"189":1,"202":1}}],["passant",{"2":{"218":1}}],["pass",{"2":{"46":1,"57":1,"182":1}}],["parsed",{"2":{"194":1}}],["parsing",{"2":{"29":1}}],["paradigm",{"2":{"172":1}}],["parameters",{"2":{"150":1}}],["parameter",{"2":{"36":1,"46":1,"49":2,"53":1,"58":1}}],["parts",{"2":{"185":1,"218":1}}],["particular",{"2":{"182":1}}],["partialeq",{"2":{"15":1,"203":2}}],["part",{"2":{"54":1,"114":1}}],["powerful",{"2":{"163":1}}],["powershell",{"2":{"138":1}}],["power",{"2":{"80":1,"116":1,"183":1}}],["powered",{"0":{"73":1},"1":{"74":1,"75":1,"76":1,"77":1}}],["potions",{"2":{"39":4}}],["potential",{"2":{"1":1,"27":1,"113":3,"178":1}}],["point",{"2":{"21":1,"29":1,"113":1,"176":1}}],["pos",{"2":{"210":10,"213":3,"214":5,"217":21}}],["postman",{"2":{"173":1}}],["possess",{"2":{"39":2,"113":1}}],["possesses",{"2":{"5":1}}],["possible",{"2":{"30":1,"37":1,"49":1,"72":1,"172":1}}],["possibly",{"2":{"22":2}}],["positionmodels",{"2":{"176":1}}],["positionimpl",{"2":{"35":1}}],["positiontrait",{"2":{"35":3}}],["position",{"0":{"44":1},"2":{"9":5,"10":5,"14":1,"19":4,"22":28,"24":10,"25":1,"26":2,"35":7,"39":12,"42":7,"49":4,"53":12,"55":4,"56":12,"177":4,"182":2,"203":3,"207":65,"208":17,"209":1,"213":2,"214":3,"232":1}}],["phaser",{"2":{"79":1}}],["phase",{"2":{"1":1,"87":1}}],["pr",{"2":{"136":1}}],["practise",{"2":{"55":2}}],["practice",{"0":{"39":1}}],["practices",{"2":{"1":1,"33":1}}],["prefer",{"2":{"190":1}}],["presently",{"2":{"178":1}}],["predefined",{"2":{"176":2}}],["precompiled",{"0":{"138":1},"2":{"138":1}}],["precise",{"2":{"113":1}}],["prerequisites",{"0":{"90":1,"96":1}}],["pre",{"0":{"175":1},"2":{"81":1}}],["preparing",{"2":{"25":1}}],["previous",{"2":{"147":1,"150":1}}],["previously",{"2":{"141":1}}],["prev",{"2":{"18":1}}],["principle",{"2":{"130":1}}],["print",{"2":{"15":1,"161":1,"197":2,"223":1,"232":1,"234":1}}],["prioritize",{"2":{"46":1}}],["primer",{"2":{"114":1}}],["primed",{"2":{"36":1}}],["primitives",{"2":{"40":1,"78":1,"115":1}}],["primary",{"2":{"14":2,"22":1,"25":2,"26":1,"32":1,"33":1,"42":1,"44":2,"219":1}}],["private",{"2":{"13":1,"83":3,"198":3,"202":1,"228":3}}],["prod",{"2":{"227":1}}],["production",{"2":{"85":1,"195":1}}],["profiles",{"0":{"227":1},"1":{"228":1},"2":{"227":1,"228":1}}],["profile",{"2":{"168":1,"190":1,"227":4,"228":3}}],["problems",{"2":{"122":1}}],["proof",{"2":{"118":1,"127":2}}],["proofs",{"0":{"128":1},"2":{"113":1,"118":1,"119":2,"127":2}}],["programming",{"2":{"126":1}}],["programs",{"2":{"115":1,"128":1}}],["program",{"2":{"115":1,"183":1}}],["progresses",{"2":{"105":1}}],["progress",{"2":{"15":1}}],["proto",{"2":{"101":1}}],["protoc",{"2":{"96":1}}],["properties",{"2":{"115":1}}],["proper",{"2":{"46":1}}],["proceed",{"2":{"26":1,"150":1}}],["process",{"2":{"53":1,"54":1,"100":1,"116":1,"122":1,"132":2,"198":1}}],["processors",{"2":{"26":2}}],["processed",{"2":{"26":11}}],["promotion",{"2":{"218":1}}],["promoting",{"2":{"2":1,"132":1}}],["prompt",{"2":{"198":1}}],["promises",{"2":{"21":1}}],["provides",{"2":{"27":1,"41":1,"45":1,"54":1,"122":1,"133":1,"163":1,"164":1,"179":1,"182":1,"185":1}}],["provided",{"2":{"22":1,"34":1,"113":1}}],["provide",{"2":{"7":1,"9":1,"14":1,"28":1,"34":1,"150":1,"176":1,"187":1,"214":1}}],["providing",{"0":{"6":1},"2":{"113":1,"115":1,"194":1,"209":1}}],["provable",{"0":{"1":1,"115":1,"127":1},"1":{"2":1,"3":1,"116":1,"117":1,"118":1,"119":1},"2":{"1":3,"115":2,"127":1,"130":1}}],["projects",{"0":{"71":1,"79":1},"2":{"22":2,"29":1,"78":1,"116":1,"157":1,"163":1,"219":2}}],["project",{"0":{"22":1,"169":1,"201":1,"205":1},"2":{"1":1,"13":1,"21":4,"22":1,"24":1,"25":4,"26":1,"54":2,"56":1,"81":2,"82":2,"87":1,"121":1,"123":1,"163":1,"198":6,"201":4,"202":2,"218":1,"219":1,"230":2,"231":2}}]],"serializationVersion":2}
